'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3082
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Base_de_datosDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Base_de_datosDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableConductores_y_cables As Conductores_y_cablesDataTable
    
    Private tableMacizos As MacizosDataTable
    
    Private tablePostes As PostesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Conductores y cables")) Is Nothing) Then
                MyBase.Tables.Add(New Conductores_y_cablesDataTable(ds.Tables("Conductores y cables")))
            End If
            If (Not (ds.Tables("Macizos")) Is Nothing) Then
                MyBase.Tables.Add(New MacizosDataTable(ds.Tables("Macizos")))
            End If
            If (Not (ds.Tables("Postes")) Is Nothing) Then
                MyBase.Tables.Add(New PostesDataTable(ds.Tables("Postes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductores_y_cables() As Conductores_y_cablesDataTable
        Get
            Return Me.tableConductores_y_cables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Macizos() As MacizosDataTable
        Get
            Return Me.tableMacizos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Postes() As PostesDataTable
        Get
            Return Me.tablePostes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Base_de_datosDataSet = CType(MyBase.Clone,Base_de_datosDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Conductores y cables")) Is Nothing) Then
                MyBase.Tables.Add(New Conductores_y_cablesDataTable(ds.Tables("Conductores y cables")))
            End If
            If (Not (ds.Tables("Macizos")) Is Nothing) Then
                MyBase.Tables.Add(New MacizosDataTable(ds.Tables("Macizos")))
            End If
            If (Not (ds.Tables("Postes")) Is Nothing) Then
                MyBase.Tables.Add(New PostesDataTable(ds.Tables("Postes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableConductores_y_cables = CType(MyBase.Tables("Conductores y cables"),Conductores_y_cablesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductores_y_cables) Is Nothing) Then
                Me.tableConductores_y_cables.InitVars
            End If
        End If
        Me.tableMacizos = CType(MyBase.Tables("Macizos"),MacizosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMacizos) Is Nothing) Then
                Me.tableMacizos.InitVars
            End If
        End If
        Me.tablePostes = CType(MyBase.Tables("Postes"),PostesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePostes) Is Nothing) Then
                Me.tablePostes.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Base_de_datosDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Base_de_datosDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableConductores_y_cables = New Conductores_y_cablesDataTable
        MyBase.Tables.Add(Me.tableConductores_y_cables)
        Me.tableMacizos = New MacizosDataTable
        MyBase.Tables.Add(Me.tableMacizos)
        Me.tablePostes = New PostesDataTable
        MyBase.Tables.Add(Me.tablePostes)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductores_y_cables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMacizos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePostes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Conductores_y_cablesRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductores_y_cablesRowChangeEvent)
    
    Public Delegate Sub MacizosRowChangeEventHandler(ByVal sender As Object, ByVal e As MacizosRowChangeEvent)
    
    Public Delegate Sub PostesRowChangeEventHandler(ByVal sender As Object, ByVal e As PostesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductores_y_cablesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductores_y_cablesRow)
        
        Private columnTipo_1 As Global.System.Data.DataColumn
        
        Private columnTipo_2 As Global.System.Data.DataColumn
        
        Private columnTipo_3 As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        Private _columnSección__mm2_ As Global.System.Data.DataColumn
        
        Private _columnDiámetro_cable__m_ As Global.System.Data.DataColumn
        
        Private _columnPeso_lineal__kg_m_ As Global.System.Data.DataColumn
        
        Private _columnResistencia_máxima__ohm_km_ As Global.System.Data.DataColumn
        
        Private columnCoef_dilatación As Global.System.Data.DataColumn
        
        Private _columnMódulo_elástico__kN_ As Global.System.Data.DataColumn
        
        Private _columnCarga_rotura__kN_ As Global.System.Data.DataColumn
        
        Private columnNorma As Global.System.Data.DataColumn
        
        Private columnOrígen_1 As Global.System.Data.DataColumn
        
        Private columnOrígen_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductores y cables"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Sección__mm2_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSección__mm2_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Diámetro_cable__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnDiámetro_cable__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Peso_lineal__kg_m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPeso_lineal__kg_m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Resistencia_máxima__ohm_km_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnResistencia_máxima__ohm_km_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Coef_dilataciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoef_dilatación
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Módulo_elástico__kN_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnMódulo_elástico__kN_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Carga_rotura__kN_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnCarga_rotura__kN_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NormaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNorma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Orígen_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrígen_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Orígen_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrígen_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductores_y_cablesRow
            Get
                Return CType(Me.Rows(index),Conductores_y_cablesRow)
            End Get
        End Property
        
        Public Event Conductores_y_cablesRowChanging As Conductores_y_cablesRowChangeEventHandler
        
        Public Event Conductores_y_cablesRowChanged As Conductores_y_cablesRowChangeEventHandler
        
        Public Event Conductores_y_cablesRowDeleting As Conductores_y_cablesRowChangeEventHandler
        
        Public Event Conductores_y_cablesRowDeleted As Conductores_y_cablesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductores_y_cablesRow(ByVal row As Conductores_y_cablesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductores_y_cablesRow(ByVal Tipo_1 As String, ByVal Tipo_2 As String, ByVal Tipo_3 As String, ByVal Material As String, ByVal _Sección__mm2_ As Double, ByVal _Diámetro_cable__m_ As Double, ByVal _Peso_lineal__kg_m_ As Double, ByVal _Resistencia_máxima__ohm_km_ As Double, ByVal Coef_dilatación As Double, ByVal _Módulo_elástico__kN_ As Double, ByVal _Carga_rotura__kN_ As Double, ByVal Norma As String, ByVal Orígen_1 As String, ByVal Orígen_2 As String) As Conductores_y_cablesRow
            Dim rowConductores_y_cablesRow As Conductores_y_cablesRow = CType(Me.NewRow,Conductores_y_cablesRow)
            Dim columnValuesArray() As Object = New Object() {Tipo_1, Tipo_2, Tipo_3, Material, _Sección__mm2_, _Diámetro_cable__m_, _Peso_lineal__kg_m_, _Resistencia_máxima__ohm_km_, Coef_dilatación, _Módulo_elástico__kN_, _Carga_rotura__kN_, Norma, Orígen_1, Orígen_2}
            rowConductores_y_cablesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductores_y_cablesRow)
            Return rowConductores_y_cablesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductores_y_cablesDataTable = CType(MyBase.Clone,Conductores_y_cablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductores_y_cablesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo_1 = MyBase.Columns("Tipo 1")
            Me.columnTipo_2 = MyBase.Columns("Tipo 2")
            Me.columnTipo_3 = MyBase.Columns("Tipo 3")
            Me.columnMaterial = MyBase.Columns("Material")
            Me._columnSección__mm2_ = MyBase.Columns("Sección (mm2)")
            Me._columnDiámetro_cable__m_ = MyBase.Columns("Diámetro cable (m)")
            Me._columnPeso_lineal__kg_m_ = MyBase.Columns("Peso lineal (kg/m)")
            Me._columnResistencia_máxima__ohm_km_ = MyBase.Columns("Resistencia máxima (ohm/km)")
            Me.columnCoef_dilatación = MyBase.Columns("Coef dilatación")
            Me._columnMódulo_elástico__kN_ = MyBase.Columns("Módulo elástico (kN)")
            Me._columnCarga_rotura__kN_ = MyBase.Columns("Carga rotura (kN)")
            Me.columnNorma = MyBase.Columns("Norma")
            Me.columnOrígen_1 = MyBase.Columns("Orígen 1")
            Me.columnOrígen_2 = MyBase.Columns("Orígen 2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo_1 = New Global.System.Data.DataColumn("Tipo 1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_1)
            Me.columnTipo_2 = New Global.System.Data.DataColumn("Tipo 2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_2)
            Me.columnTipo_3 = New Global.System.Data.DataColumn("Tipo 3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_3)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me._columnSección__mm2_ = New Global.System.Data.DataColumn("Sección (mm2)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSección__mm2_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSección__mm2_")
            Me._columnSección__mm2_.ExtendedProperties.Add("Generator_UserColumnName", "Sección (mm2)")
            MyBase.Columns.Add(Me._columnSección__mm2_)
            Me._columnDiámetro_cable__m_ = New Global.System.Data.DataColumn("Diámetro cable (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnDiámetro_cable__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDiámetro_cable__m_")
            Me._columnDiámetro_cable__m_.ExtendedProperties.Add("Generator_UserColumnName", "Diámetro cable (m)")
            MyBase.Columns.Add(Me._columnDiámetro_cable__m_)
            Me._columnPeso_lineal__kg_m_ = New Global.System.Data.DataColumn("Peso lineal (kg/m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPeso_lineal__kg_m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPeso_lineal__kg_m_")
            Me._columnPeso_lineal__kg_m_.ExtendedProperties.Add("Generator_UserColumnName", "Peso lineal (kg/m)")
            MyBase.Columns.Add(Me._columnPeso_lineal__kg_m_)
            Me._columnResistencia_máxima__ohm_km_ = New Global.System.Data.DataColumn("Resistencia máxima (ohm/km)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnResistencia_máxima__ohm_km_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnResistencia_máxima__ohm_km_")
            Me._columnResistencia_máxima__ohm_km_.ExtendedProperties.Add("Generator_UserColumnName", "Resistencia máxima (ohm/km)")
            MyBase.Columns.Add(Me._columnResistencia_máxima__ohm_km_)
            Me.columnCoef_dilatación = New Global.System.Data.DataColumn("Coef dilatación", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoef_dilatación)
            Me._columnMódulo_elástico__kN_ = New Global.System.Data.DataColumn("Módulo elástico (kN)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnMódulo_elástico__kN_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnMódulo_elástico__kN_")
            Me._columnMódulo_elástico__kN_.ExtendedProperties.Add("Generator_UserColumnName", "Módulo elástico (kN)")
            MyBase.Columns.Add(Me._columnMódulo_elástico__kN_)
            Me._columnCarga_rotura__kN_ = New Global.System.Data.DataColumn("Carga rotura (kN)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnCarga_rotura__kN_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCarga_rotura__kN_")
            Me._columnCarga_rotura__kN_.ExtendedProperties.Add("Generator_UserColumnName", "Carga rotura (kN)")
            MyBase.Columns.Add(Me._columnCarga_rotura__kN_)
            Me.columnNorma = New Global.System.Data.DataColumn("Norma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNorma)
            Me.columnOrígen_1 = New Global.System.Data.DataColumn("Orígen 1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrígen_1)
            Me.columnOrígen_2 = New Global.System.Data.DataColumn("Orígen 2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrígen_2)
            Me.columnTipo_1.MaxLength = 255
            Me.columnTipo_2.MaxLength = 255
            Me.columnTipo_3.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
            Me.columnNorma.MaxLength = 255
            Me.columnOrígen_1.MaxLength = 255
            Me.columnOrígen_2.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductores_y_cablesRow() As Conductores_y_cablesRow
            Return CType(Me.NewRow,Conductores_y_cablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductores_y_cablesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductores_y_cablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductores_y_cablesRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowChanged(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductores_y_cablesRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowChanging(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductores_y_cablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowDeleted(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductores_y_cablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowDeleting(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductores_y_cablesRow(ByVal row As Conductores_y_cablesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductores_y_cablesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MacizosDataTable
        Inherits Global.System.Data.TypedTableBase(Of MacizosRow)
        
        Private columnMacizo As Global.System.Data.DataColumn
        
        Private _columnAdm_Lín As Global.System.Data.DataColumn
        
        Private _columnD_T As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private _columna__m_ As Global.System.Data.DataColumn
        
        Private _columnb__m_ As Global.System.Data.DataColumn
        
        Private _columnd__m_ As Global.System.Data.DataColumn
        
        Private _columnh__m_ As Global.System.Data.DataColumn
        
        Private _columnVolúmen_macizo_1__m3_ As Global.System.Data.DataColumn
        
        Private _columnat__m_ As Global.System.Data.DataColumn
        
        Private _columnbt__m_ As Global.System.Data.DataColumn
        
        Private _columnht__m_ As Global.System.Data.DataColumn
        
        Private _columnVolúmen_macizo_2__m3_ As Global.System.Data.DataColumn
        
        Private _columnVolúmen_TOTAL__m3_ As Global.System.Data.DataColumn
        
        Private _columndiámetro__m_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Macizos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MacizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMacizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LínColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Lín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _D_TColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnD_T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _d__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnd__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _h__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnh__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Volúmen_macizo_1__m3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnVolúmen_macizo_1__m3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _at__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnat__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _bt__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnbt__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ht__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnht__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Volúmen_macizo_2__m3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnVolúmen_macizo_2__m3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Volúmen_TOTAL__m3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnVolúmen_TOTAL__m3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _diámetro__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columndiámetro__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MacizosRow
            Get
                Return CType(Me.Rows(index),MacizosRow)
            End Get
        End Property
        
        Public Event MacizosRowChanging As MacizosRowChangeEventHandler
        
        Public Event MacizosRowChanged As MacizosRowChangeEventHandler
        
        Public Event MacizosRowDeleting As MacizosRowChangeEventHandler
        
        Public Event MacizosRowDeleted As MacizosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMacizosRow(ByVal row As MacizosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMacizosRow(ByVal Macizo As String, ByVal _Adm_Lín As String, ByVal _D_T As String, ByVal Tipo As String, ByVal _a__m_ As Double, ByVal _b__m_ As Double, ByVal _d__m_ As Double, ByVal _h__m_ As Double, ByVal _Volúmen_macizo_1__m3_ As Double, ByVal _at__m_ As Double, ByVal _bt__m_ As Double, ByVal _ht__m_ As Double, ByVal _Volúmen_macizo_2__m3_ As Double, ByVal _Volúmen_TOTAL__m3_ As Double, ByVal _diámetro__m_ As Double) As MacizosRow
            Dim rowMacizosRow As MacizosRow = CType(Me.NewRow,MacizosRow)
            Dim columnValuesArray() As Object = New Object() {Macizo, _Adm_Lín, _D_T, Tipo, _a__m_, _b__m_, _d__m_, _h__m_, _Volúmen_macizo_1__m3_, _at__m_, _bt__m_, _ht__m_, _Volúmen_macizo_2__m3_, _Volúmen_TOTAL__m3_, _diámetro__m_}
            rowMacizosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMacizosRow)
            Return rowMacizosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MacizosDataTable = CType(MyBase.Clone,MacizosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MacizosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMacizo = MyBase.Columns("Macizo")
            Me._columnAdm_Lín = MyBase.Columns("Adm/Lín")
            Me._columnD_T = MyBase.Columns("D/T")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columnd__m_ = MyBase.Columns("d (m)")
            Me._columnh__m_ = MyBase.Columns("h (m)")
            Me._columnVolúmen_macizo_1__m3_ = MyBase.Columns("Volúmen macizo 1 (m3)")
            Me._columnat__m_ = MyBase.Columns("at (m)")
            Me._columnbt__m_ = MyBase.Columns("bt (m)")
            Me._columnht__m_ = MyBase.Columns("ht (m)")
            Me._columnVolúmen_macizo_2__m3_ = MyBase.Columns("Volúmen macizo 2 (m3)")
            Me._columnVolúmen_TOTAL__m3_ = MyBase.Columns("Volúmen TOTAL (m3)")
            Me._columndiámetro__m_ = MyBase.Columns("diámetro (m)")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMacizo = New Global.System.Data.DataColumn("Macizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMacizo)
            Me._columnAdm_Lín = New Global.System.Data.DataColumn("Adm/Lín", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Lín")
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Lín")
            MyBase.Columns.Add(Me._columnAdm_Lín)
            Me._columnD_T = New Global.System.Data.DataColumn("D/T", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnD_T.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnD_T")
            Me._columnD_T.ExtendedProperties.Add("Generator_UserColumnName", "D/T")
            MyBase.Columns.Add(Me._columnD_T)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me._columna__m_ = New Global.System.Data.DataColumn("a (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New Global.System.Data.DataColumn("b (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columnd__m_ = New Global.System.Data.DataColumn("d (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnd__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnd__m_")
            Me._columnd__m_.ExtendedProperties.Add("Generator_UserColumnName", "d (m)")
            MyBase.Columns.Add(Me._columnd__m_)
            Me._columnh__m_ = New Global.System.Data.DataColumn("h (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnh__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnh__m_")
            Me._columnh__m_.ExtendedProperties.Add("Generator_UserColumnName", "h (m)")
            MyBase.Columns.Add(Me._columnh__m_)
            Me._columnVolúmen_macizo_1__m3_ = New Global.System.Data.DataColumn("Volúmen macizo 1 (m3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnVolúmen_macizo_1__m3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVolúmen_macizo_1__m3_")
            Me._columnVolúmen_macizo_1__m3_.ExtendedProperties.Add("Generator_UserColumnName", "Volúmen macizo 1 (m3)")
            MyBase.Columns.Add(Me._columnVolúmen_macizo_1__m3_)
            Me._columnat__m_ = New Global.System.Data.DataColumn("at (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnat__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnat__m_")
            Me._columnat__m_.ExtendedProperties.Add("Generator_UserColumnName", "at (m)")
            MyBase.Columns.Add(Me._columnat__m_)
            Me._columnbt__m_ = New Global.System.Data.DataColumn("bt (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnbt__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnbt__m_")
            Me._columnbt__m_.ExtendedProperties.Add("Generator_UserColumnName", "bt (m)")
            MyBase.Columns.Add(Me._columnbt__m_)
            Me._columnht__m_ = New Global.System.Data.DataColumn("ht (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnht__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnht__m_")
            Me._columnht__m_.ExtendedProperties.Add("Generator_UserColumnName", "ht (m)")
            MyBase.Columns.Add(Me._columnht__m_)
            Me._columnVolúmen_macizo_2__m3_ = New Global.System.Data.DataColumn("Volúmen macizo 2 (m3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnVolúmen_macizo_2__m3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVolúmen_macizo_2__m3_")
            Me._columnVolúmen_macizo_2__m3_.ExtendedProperties.Add("Generator_UserColumnName", "Volúmen macizo 2 (m3)")
            MyBase.Columns.Add(Me._columnVolúmen_macizo_2__m3_)
            Me._columnVolúmen_TOTAL__m3_ = New Global.System.Data.DataColumn("Volúmen TOTAL (m3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnVolúmen_TOTAL__m3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVolúmen_TOTAL__m3_")
            Me._columnVolúmen_TOTAL__m3_.ExtendedProperties.Add("Generator_UserColumnName", "Volúmen TOTAL (m3)")
            MyBase.Columns.Add(Me._columnVolúmen_TOTAL__m3_)
            Me._columndiámetro__m_ = New Global.System.Data.DataColumn("diámetro (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columndiámetro__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columndiámetro__m_")
            Me._columndiámetro__m_.ExtendedProperties.Add("Generator_UserColumnName", "diámetro (m)")
            MyBase.Columns.Add(Me._columndiámetro__m_)
            Me.columnMacizo.MaxLength = 255
            Me._columnAdm_Lín.MaxLength = 255
            Me._columnD_T.MaxLength = 255
            Me.columnTipo.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMacizosRow() As MacizosRow
            Return CType(Me.NewRow,MacizosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MacizosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MacizosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MacizosRowChangedEvent) Is Nothing) Then
                RaiseEvent MacizosRowChanged(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MacizosRowChangingEvent) Is Nothing) Then
                RaiseEvent MacizosRowChanging(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MacizosRowDeletedEvent) Is Nothing) Then
                RaiseEvent MacizosRowDeleted(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MacizosRowDeletingEvent) Is Nothing) Then
                RaiseEvent MacizosRowDeleting(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMacizosRow(ByVal row As MacizosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MacizosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PostesDataTable
        Inherits Global.System.Data.TypedTableBase(Of PostesRow)
        
        Private columnPoste As Global.System.Data.DataColumn
        
        Private _columnAdm_Lín As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private _columnt__m_ As Global.System.Data.DataColumn
        
        Private _columnb__m_ As Global.System.Data.DataColumn
        
        Private _columns__m_ As Global.System.Data.DataColumn
        
        Private columnPeso As Global.System.Data.DataColumn
        
        Private _columna__m_ As Global.System.Data.DataColumn
        
        Private _columnHtot__m_ As Global.System.Data.DataColumn
        
        Private _columnH__m_ As Global.System.Data.DataColumn
        
        Private columntg As Global.System.Data.DataColumn
        
        Private columnK As Global.System.Data.DataColumn
        
        Private _columnSep__m_ As Global.System.Data.DataColumn
        
        Private _columnWyy__cm3_ As Global.System.Data.DataColumn
        
        Private _columnWxx__cm3_ As Global.System.Data.DataColumn
        
        Private columnWr As Global.System.Data.DataColumn
        
        Private columnM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Postes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LínColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Lín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnt__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _s__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columns__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Htot__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnHtot__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _H__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnH__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Sep__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSep__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Wyy__cm3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnWyy__cm3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Wxx__cm3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnWxx__cm3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PostesRow
            Get
                Return CType(Me.Rows(index),PostesRow)
            End Get
        End Property
        
        Public Event PostesRowChanging As PostesRowChangeEventHandler
        
        Public Event PostesRowChanged As PostesRowChangeEventHandler
        
        Public Event PostesRowDeleting As PostesRowChangeEventHandler
        
        Public Event PostesRowDeleted As PostesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPostesRow(ByVal row As PostesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPostesRow( _
                    ByVal Poste As String,  _
                    ByVal _Adm_Lín As String,  _
                    ByVal Tipo As String,  _
                    ByVal _t__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _s__m_ As Double,  _
                    ByVal Peso As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _Htot__m_ As Double,  _
                    ByVal _H__m_ As Double,  _
                    ByVal tg As Double,  _
                    ByVal K As Double,  _
                    ByVal _Sep__m_ As Double,  _
                    ByVal _Wyy__cm3_ As Double,  _
                    ByVal _Wxx__cm3_ As Double,  _
                    ByVal Wr As Double,  _
                    ByVal M As Double) As PostesRow
            Dim rowPostesRow As PostesRow = CType(Me.NewRow,PostesRow)
            Dim columnValuesArray() As Object = New Object() {Poste, _Adm_Lín, Tipo, _t__m_, _b__m_, _s__m_, Peso, _a__m_, _Htot__m_, _H__m_, tg, K, _Sep__m_, _Wyy__cm3_, _Wxx__cm3_, Wr, M}
            rowPostesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPostesRow)
            Return rowPostesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PostesDataTable = CType(MyBase.Clone,PostesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PostesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPoste = MyBase.Columns("Poste")
            Me._columnAdm_Lín = MyBase.Columns("Adm/Lín")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me._columnt__m_ = MyBase.Columns("t (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columns__m_ = MyBase.Columns("s (m)")
            Me.columnPeso = MyBase.Columns("Peso")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnHtot__m_ = MyBase.Columns("Htot (m)")
            Me._columnH__m_ = MyBase.Columns("H (m)")
            Me.columntg = MyBase.Columns("tg")
            Me.columnK = MyBase.Columns("K")
            Me._columnSep__m_ = MyBase.Columns("Sep (m)")
            Me._columnWyy__cm3_ = MyBase.Columns("Wyy (cm3)")
            Me._columnWxx__cm3_ = MyBase.Columns("Wxx (cm3)")
            Me.columnWr = MyBase.Columns("Wr")
            Me.columnM = MyBase.Columns("M")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPoste = New Global.System.Data.DataColumn("Poste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoste)
            Me._columnAdm_Lín = New Global.System.Data.DataColumn("Adm/Lín", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Lín")
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Lín")
            MyBase.Columns.Add(Me._columnAdm_Lín)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me._columnt__m_ = New Global.System.Data.DataColumn("t (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnt__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__m_")
            Me._columnt__m_.ExtendedProperties.Add("Generator_UserColumnName", "t (m)")
            MyBase.Columns.Add(Me._columnt__m_)
            Me._columnb__m_ = New Global.System.Data.DataColumn("b (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columns__m_ = New Global.System.Data.DataColumn("s (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columns__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columns__m_")
            Me._columns__m_.ExtendedProperties.Add("Generator_UserColumnName", "s (m)")
            MyBase.Columns.Add(Me._columns__m_)
            Me.columnPeso = New Global.System.Data.DataColumn("Peso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeso)
            Me._columna__m_ = New Global.System.Data.DataColumn("a (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnHtot__m_ = New Global.System.Data.DataColumn("Htot (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnHtot__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnHtot__m_")
            Me._columnHtot__m_.ExtendedProperties.Add("Generator_UserColumnName", "Htot (m)")
            MyBase.Columns.Add(Me._columnHtot__m_)
            Me._columnH__m_ = New Global.System.Data.DataColumn("H (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnH__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnH__m_")
            Me._columnH__m_.ExtendedProperties.Add("Generator_UserColumnName", "H (m)")
            MyBase.Columns.Add(Me._columnH__m_)
            Me.columntg = New Global.System.Data.DataColumn("tg", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntg)
            Me.columnK = New Global.System.Data.DataColumn("K", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK)
            Me._columnSep__m_ = New Global.System.Data.DataColumn("Sep (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSep__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSep__m_")
            Me._columnSep__m_.ExtendedProperties.Add("Generator_UserColumnName", "Sep (m)")
            MyBase.Columns.Add(Me._columnSep__m_)
            Me._columnWyy__cm3_ = New Global.System.Data.DataColumn("Wyy (cm3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnWyy__cm3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnWyy__cm3_")
            Me._columnWyy__cm3_.ExtendedProperties.Add("Generator_UserColumnName", "Wyy (cm3)")
            MyBase.Columns.Add(Me._columnWyy__cm3_)
            Me._columnWxx__cm3_ = New Global.System.Data.DataColumn("Wxx (cm3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnWxx__cm3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnWxx__cm3_")
            Me._columnWxx__cm3_.ExtendedProperties.Add("Generator_UserColumnName", "Wxx (cm3)")
            MyBase.Columns.Add(Me._columnWxx__cm3_)
            Me.columnWr = New Global.System.Data.DataColumn("Wr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWr)
            Me.columnM = New Global.System.Data.DataColumn("M", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM)
            Me.columnPoste.MaxLength = 255
            Me._columnAdm_Lín.MaxLength = 255
            Me.columnTipo.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPostesRow() As PostesRow
            Return CType(Me.NewRow,PostesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PostesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PostesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PostesRowChangedEvent) Is Nothing) Then
                RaiseEvent PostesRowChanged(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PostesRowChangingEvent) Is Nothing) Then
                RaiseEvent PostesRowChanging(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PostesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PostesRowDeleted(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PostesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PostesRowDeleting(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePostesRow(ByVal row As PostesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PostesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductores_y_cablesRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductores_y_cables As Conductores_y_cablesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductores_y_cables = CType(Me.Table,Conductores_y_cablesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Tipo_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo 1' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Tipo_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Tipo_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo 2' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Tipo_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_3() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Tipo_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo 3' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Tipo_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Sección__mm2_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Sección__mm2_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sección (mm2)' de la tabla 'Conductores y cables' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Sección__mm2_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Diámetro_cable__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Diámetro_cable__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Diámetro cable (m)' de la tabla 'Conductores y cables' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Diámetro_cable__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Peso_lineal__kg_m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Peso lineal (kg/m)' de la tabla 'Conductores y cables' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Resistencia_máxima__ohm_km_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resistencia máxima (ohm/km)' de la tabla 'Conductores y c"& _ 
                            "ables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coef_dilatación() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Coef_dilataciónColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Coef dilatación' de la tabla 'Conductores y cables' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Coef_dilataciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Módulo_elástico__kN_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Módulo_elástico__kN_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Módulo elástico (kN)' de la tabla 'Conductores y cables' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Módulo_elástico__kN_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Carga_rotura__kN_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Carga_rotura__kN_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Carga rotura (kN)' de la tabla 'Conductores y cables' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Carga_rotura__kN_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Norma() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.NormaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Norma' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.NormaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orígen_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Orígen_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Orígen 1' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Orígen_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orígen_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Orígen_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Orígen 2' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Orígen_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_1Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Tipo_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_1Null()
            Me(Me.tableConductores_y_cables.Tipo_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_2Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Tipo_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_2Null()
            Me(Me.tableConductores_y_cables.Tipo_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_3Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Tipo_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_3Null()
            Me(Me.tableConductores_y_cables.Tipo_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductores_y_cables.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Sección__mm2_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Sección__mm2_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Sección__mm2_Null()
            Me(Me.tableConductores_y_cables._Sección__mm2_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Diámetro_cable__m_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Diámetro_cable__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Diámetro_cable__m_Null()
            Me(Me.tableConductores_y_cables._Diámetro_cable__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Peso_lineal__kg_m_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Peso_lineal__kg_m_Null()
            Me(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Resistencia_máxima__ohm_km_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Resistencia_máxima__ohm_km_Null()
            Me(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoef_dilataciónNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Coef_dilataciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoef_dilataciónNull()
            Me(Me.tableConductores_y_cables.Coef_dilataciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Módulo_elástico__kN_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Módulo_elástico__kN_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Módulo_elástico__kN_Null()
            Me(Me.tableConductores_y_cables._Módulo_elástico__kN_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Carga_rotura__kN_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Carga_rotura__kN_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Carga_rotura__kN_Null()
            Me(Me.tableConductores_y_cables._Carga_rotura__kN_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNormaNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.NormaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNormaNull()
            Me(Me.tableConductores_y_cables.NormaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrígen_1Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Orígen_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrígen_1Null()
            Me(Me.tableConductores_y_cables.Orígen_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrígen_2Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Orígen_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrígen_2Null()
            Me(Me.tableConductores_y_cables.Orígen_2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MacizosRow
        Inherits Global.System.Data.DataRow
        
        Private tableMacizos As MacizosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMacizos = CType(Me.Table,MacizosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Macizo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos.MacizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Macizo' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos.MacizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Lín() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Adm_LínColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Lín' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Adm_LínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _D_T() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._D_TColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'D/T' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._D_TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._a__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'a (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._a__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._b__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'b (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._b__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _d__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._d__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'd (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._d__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _h__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._h__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'h (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._h__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Volúmen_macizo_1__m3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Volúmen_macizo_1__m3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Volúmen macizo 1 (m3)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Volúmen_macizo_1__m3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _at__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._at__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'at (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._at__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _bt__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._bt__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'bt (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._bt__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ht__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._ht__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ht (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._ht__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Volúmen_macizo_2__m3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Volúmen_macizo_2__m3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Volúmen macizo 2 (m3)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Volúmen_macizo_2__m3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Volúmen_TOTAL__m3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Volúmen_TOTAL__m3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Volúmen TOTAL (m3)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Volúmen_TOTAL__m3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _diámetro__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._diámetro__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'diámetro (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._diámetro__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMacizoNull() As Boolean
            Return Me.IsNull(Me.tableMacizos.MacizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMacizoNull()
            Me(Me.tableMacizos.MacizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LínNull() As Boolean
            Return Me.IsNull(Me.tableMacizos._Adm_LínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LínNull()
            Me(Me.tableMacizos._Adm_LínColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_D_TNull() As Boolean
            Return Me.IsNull(Me.tableMacizos._D_TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_D_TNull()
            Me(Me.tableMacizos._D_TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMacizos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMacizos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._a__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tableMacizos._a__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._b__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tableMacizos._b__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_d__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._d__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_d__m_Null()
            Me(Me.tableMacizos._d__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_h__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._h__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_h__m_Null()
            Me(Me.tableMacizos._h__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Volúmen_macizo_1__m3_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._Volúmen_macizo_1__m3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Volúmen_macizo_1__m3_Null()
            Me(Me.tableMacizos._Volúmen_macizo_1__m3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_at__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._at__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_at__m_Null()
            Me(Me.tableMacizos._at__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_bt__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._bt__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_bt__m_Null()
            Me(Me.tableMacizos._bt__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ht__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._ht__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ht__m_Null()
            Me(Me.tableMacizos._ht__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Volúmen_macizo_2__m3_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._Volúmen_macizo_2__m3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Volúmen_macizo_2__m3_Null()
            Me(Me.tableMacizos._Volúmen_macizo_2__m3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Volúmen_TOTAL__m3_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._Volúmen_TOTAL__m3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Volúmen_TOTAL__m3_Null()
            Me(Me.tableMacizos._Volúmen_TOTAL__m3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_diámetro__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._diámetro__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_diámetro__m_Null()
            Me(Me.tableMacizos._diámetro__m_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PostesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePostes As PostesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePostes = CType(Me.Table,PostesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poste() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes.PosteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Poste' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.PosteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Lín() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Adm_LínColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Lín' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Adm_LínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._t__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 't (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._t__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._b__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'b (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._b__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _s__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._s__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 's (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._s__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Peso() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.PesoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Peso' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.PesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._a__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'a (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._a__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Htot__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Htot__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Htot (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Htot__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _H__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._H__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'H (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._H__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tg() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.tgColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tg' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.tgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property K() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.KColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'K' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.KColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Sep__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Sep__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sep (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Sep__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Wyy__cm3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Wyy__cm3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Wyy (cm3)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Wyy__cm3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Wxx__cm3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Wxx__cm3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Wxx (cm3)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Wxx__cm3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wr() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.WrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Wr' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.WrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.MColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'M' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosteNull() As Boolean
            Return Me.IsNull(Me.tablePostes.PosteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosteNull()
            Me(Me.tablePostes.PosteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LínNull() As Boolean
            Return Me.IsNull(Me.tablePostes._Adm_LínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LínNull()
            Me(Me.tablePostes._Adm_LínColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablePostes.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablePostes.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._t__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__m_Null()
            Me(Me.tablePostes._t__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._b__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tablePostes._b__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_s__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._s__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_s__m_Null()
            Me(Me.tablePostes._s__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPesoNull() As Boolean
            Return Me.IsNull(Me.tablePostes.PesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPesoNull()
            Me(Me.tablePostes.PesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._a__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tablePostes._a__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Htot__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Htot__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Htot__m_Null()
            Me(Me.tablePostes._Htot__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_H__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._H__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_H__m_Null()
            Me(Me.tablePostes._H__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstgNull() As Boolean
            Return Me.IsNull(Me.tablePostes.tgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettgNull()
            Me(Me.tablePostes.tgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKNull() As Boolean
            Return Me.IsNull(Me.tablePostes.KColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKNull()
            Me(Me.tablePostes.KColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Sep__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Sep__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Sep__m_Null()
            Me(Me.tablePostes._Sep__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Wyy__cm3_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Wyy__cm3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Wyy__cm3_Null()
            Me(Me.tablePostes._Wyy__cm3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Wxx__cm3_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Wxx__cm3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Wxx__cm3_Null()
            Me(Me.tablePostes._Wxx__cm3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWrNull() As Boolean
            Return Me.IsNull(Me.tablePostes.WrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWrNull()
            Me(Me.tablePostes.WrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNull() As Boolean
            Return Me.IsNull(Me.tablePostes.MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNull()
            Me(Me.tablePostes.MColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductores_y_cablesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductores_y_cablesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductores_y_cablesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductores_y_cablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MacizosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MacizosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MacizosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MacizosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PostesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PostesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PostesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PostesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Base_de_datosDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductores_y_cablesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductores y cables"
            tableMapping.ColumnMappings.Add("Tipo 1", "Tipo 1")
            tableMapping.ColumnMappings.Add("Tipo 2", "Tipo 2")
            tableMapping.ColumnMappings.Add("Tipo 3", "Tipo 3")
            tableMapping.ColumnMappings.Add("Material", "Material")
            tableMapping.ColumnMappings.Add("Sección (mm2)", "Sección (mm2)")
            tableMapping.ColumnMappings.Add("Diámetro cable (m)", "Diámetro cable (m)")
            tableMapping.ColumnMappings.Add("Peso lineal (kg/m)", "Peso lineal (kg/m)")
            tableMapping.ColumnMappings.Add("Resistencia máxima (ohm/km)", "Resistencia máxima (ohm/km)")
            tableMapping.ColumnMappings.Add("Coef dilatación", "Coef dilatación")
            tableMapping.ColumnMappings.Add("Módulo elástico (kN)", "Módulo elástico (kN)")
            tableMapping.ColumnMappings.Add("Carga rotura (kN)", "Carga rotura (kN)")
            tableMapping.ColumnMappings.Add("Norma", "Norma")
            tableMapping.ColumnMappings.Add("Orígen 1", "Orígen 1")
            tableMapping.ColumnMappings.Add("Orígen 2", "Orígen 2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Conductores y cables` (`Tipo 1`, `Tipo 2`, `Tipo 3`, `Material`, `Se"& _ 
                "cción (mm2)`, `Diámetro cable (m)`, `Peso lineal (kg/m)`, `Resistencia máxima (o"& _ 
                "hm/km)`, `Coef dilatación`, `Módulo elástico (kN)`, `Carga rotura (kN)`, `Norma`"& _ 
                ", `Orígen 1`, `Orígen 2`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo_1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo 1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo_2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo 2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo_3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo 3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Material", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Material", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sección_(mm2)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sección (mm2)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Diámetro_cable_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Diámetro cable (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Peso_lineal_(kg/m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Peso lineal (kg/m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Resistencia_máxima_(ohm/km)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Resistencia máxima (ohm/km)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Coef_dilatación", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Coef dilatación", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Módulo_elástico_(kN)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Módulo elástico (kN)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Carga_rotura_(kN)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Carga rotura (kN)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Norma", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Norma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Orígen_1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Orígen 1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Orígen_2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Orígen 2", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.Base_de_datosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Tipo 1], [Tipo 2], [Tipo 3], Material, [Sección (mm2)], [Diámetro cable ("& _ 
                "m)], [Peso lineal (kg/m)], [Resistencia máxima (ohm/km)], [Coef dilatación], [Mó"& _ 
                "dulo elástico (kN)], [Carga rotura (kN)], Norma, [Orígen 1], [Orígen 2] FROM [Co"& _ 
                "nductores y cables]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductores_y_cablesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductores_y_cablesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductores_y_cablesDataTable = New Base_de_datosDataSet.Conductores_y_cablesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.Conductores_y_cablesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Conductores y cables")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Tipo_1 As String, ByVal Tipo_2 As String, ByVal Tipo_3 As String, ByVal Material As String, ByVal _Sección__mm2_ As Global.System.Nullable(Of Double), ByVal _Diámetro_cable__m_ As Global.System.Nullable(Of Double), ByVal _Peso_lineal__kg_m_ As Global.System.Nullable(Of Double), ByVal _Resistencia_máxima__ohm_km_ As Global.System.Nullable(Of Double), ByVal Coef_dilatación As Global.System.Nullable(Of Double), ByVal _Módulo_elástico__kN_ As Global.System.Nullable(Of Double), ByVal _Carga_rotura__kN_ As Global.System.Nullable(Of Double), ByVal Norma As String, ByVal Orígen_1 As String, ByVal Orígen_2 As String) As Integer
            If (Tipo_1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Tipo_1,String)
            End If
            If (Tipo_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Tipo_2,String)
            End If
            If (Tipo_3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Tipo_3,String)
            End If
            If (Material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Material,String)
            End If
            If (_Sección__mm2_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_Sección__mm2_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_Diámetro_cable__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_Diámetro_cable__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_Peso_lineal__kg_m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_Peso_lineal__kg_m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_Resistencia_máxima__ohm_km_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_Resistencia_máxima__ohm_km_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Coef_dilatación.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Coef_dilatación.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_Módulo_elástico__kN_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_Módulo_elástico__kN_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_Carga_rotura__kN_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_Carga_rotura__kN_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Norma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Norma,String)
            End If
            If (Orígen_1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Orígen_1,String)
            End If
            If (Orígen_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Orígen_2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MacizosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Macizos"
            tableMapping.ColumnMappings.Add("Macizo", "Macizo")
            tableMapping.ColumnMappings.Add("Adm/Lín", "Adm/Lín")
            tableMapping.ColumnMappings.Add("D/T", "D/T")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("d (m)", "d (m)")
            tableMapping.ColumnMappings.Add("h (m)", "h (m)")
            tableMapping.ColumnMappings.Add("Volúmen macizo 1 (m3)", "Volúmen macizo 1 (m3)")
            tableMapping.ColumnMappings.Add("at (m)", "at (m)")
            tableMapping.ColumnMappings.Add("bt (m)", "bt (m)")
            tableMapping.ColumnMappings.Add("ht (m)", "ht (m)")
            tableMapping.ColumnMappings.Add("Volúmen macizo 2 (m3)", "Volúmen macizo 2 (m3)")
            tableMapping.ColumnMappings.Add("Volúmen TOTAL (m3)", "Volúmen TOTAL (m3)")
            tableMapping.ColumnMappings.Add("diámetro (m)", "diámetro (m)")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Macizos` (`Macizo`, `Adm/Lín`, `D/T`, `Tipo`, `a (m)`, `b (m)`, `d ("& _ 
                "m)`, `h (m)`, `Volúmen macizo 1 (m3)`, `at (m)`, `bt (m)`, `ht (m)`, `Volúmen ma"& _ 
                "cizo 2 (m3)`, `Volúmen TOTAL (m3)`, `diámetro (m)`) VALUES (?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Macizo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Macizo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Lín", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Lín", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("D/T", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "D/T", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("a_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("b_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("d_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "d (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("h_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "h (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Volúmen_macizo_1_(m3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Volúmen macizo 1 (m3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("at_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "at (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("bt_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bt (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ht_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ht (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Volúmen_macizo_2_(m3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Volúmen macizo 2 (m3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Volúmen_TOTAL_(m3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Volúmen TOTAL (m3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("diámetro_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "diámetro (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.Base_de_datosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Macizo, [Adm/Lín], [D/T], Tipo, [a (m)], [b (m)], [d (m)], [h (m)], [Volúm"& _ 
                "en macizo 1 (m3)], [at (m)], [bt (m)], [ht (m)], [Volúmen macizo 2 (m3)], [Volúm"& _ 
                "en TOTAL (m3)], [diámetro (m)] FROM Macizos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.MacizosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.MacizosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.MacizosDataTable = New Base_de_datosDataSet.MacizosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.MacizosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Macizos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Macizo As String, ByVal _Adm_Lín As String, ByVal _D_T As String, ByVal Tipo As String, ByVal _a__m_ As Global.System.Nullable(Of Double), ByVal _b__m_ As Global.System.Nullable(Of Double), ByVal _d__m_ As Global.System.Nullable(Of Double), ByVal _h__m_ As Global.System.Nullable(Of Double), ByVal _Volúmen_macizo_1__m3_ As Global.System.Nullable(Of Double), ByVal _at__m_ As Global.System.Nullable(Of Double), ByVal _bt__m_ As Global.System.Nullable(Of Double), ByVal _ht__m_ As Global.System.Nullable(Of Double), ByVal _Volúmen_macizo_2__m3_ As Global.System.Nullable(Of Double), ByVal _Volúmen_TOTAL__m3_ As Global.System.Nullable(Of Double), ByVal _diámetro__m_ As Global.System.Nullable(Of Double)) As Integer
            If (Macizo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Macizo,String)
            End If
            If (_Adm_Lín Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Adm_Lín,String)
            End If
            If (_D_T Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_D_T,String)
            End If
            If (Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Tipo,String)
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_d__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_d__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_h__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_h__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_Volúmen_macizo_1__m3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_Volúmen_macizo_1__m3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_at__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_at__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_bt__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_bt__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_ht__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(_ht__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_Volúmen_macizo_2__m3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Volúmen_macizo_2__m3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_Volúmen_TOTAL__m3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_Volúmen_TOTAL__m3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_diámetro__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_diámetro__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PostesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Postes"
            tableMapping.ColumnMappings.Add("Poste", "Poste")
            tableMapping.ColumnMappings.Add("Adm/Lín", "Adm/Lín")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("t (m)", "t (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("s (m)", "s (m)")
            tableMapping.ColumnMappings.Add("Peso", "Peso")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("Htot (m)", "Htot (m)")
            tableMapping.ColumnMappings.Add("H (m)", "H (m)")
            tableMapping.ColumnMappings.Add("tg", "tg")
            tableMapping.ColumnMappings.Add("K", "K")
            tableMapping.ColumnMappings.Add("Sep (m)", "Sep (m)")
            tableMapping.ColumnMappings.Add("Wyy (cm3)", "Wyy (cm3)")
            tableMapping.ColumnMappings.Add("Wxx (cm3)", "Wxx (cm3)")
            tableMapping.ColumnMappings.Add("Wr", "Wr")
            tableMapping.ColumnMappings.Add("M", "M")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Postes` (`Poste`, `Adm/Lín`, `Tipo`, `t (m)`, `b (m)`, `s (m)`, `Pes"& _ 
                "o`, `a (m)`, `Htot (m)`, `H (m)`, `tg`, `K`, `Sep (m)`, `Wyy (cm3)`, `Wxx (cm3)`"& _ 
                ", `Wr`, `M`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Poste", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Poste", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Lín", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Lín", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("t_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("b_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("s_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "s (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Peso", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Peso", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("a_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Htot_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Htot (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("H_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "H (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tg", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tg", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("K", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "K", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sep_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sep (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Wyy_(cm3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Wyy (cm3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Wxx_(cm3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Wxx (cm3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Wr", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Wr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("M", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "M", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.Base_de_datosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Poste, [Adm/Lín], Tipo, [t (m)], [b (m)], [s (m)], Peso, [a (m)], [Htot (m"& _ 
                ")], [H (m)], tg, K, [Sep (m)], [Wyy (cm3)], [Wxx (cm3)], Wr, M FROM Postes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.PostesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.PostesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.PostesDataTable = New Base_de_datosDataSet.PostesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.PostesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Postes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Poste As String,  _
                    ByVal _Adm_Lín As String,  _
                    ByVal Tipo As String,  _
                    ByVal _t__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _b__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _s__m_ As Global.System.Nullable(Of Double),  _
                    ByVal Peso As Global.System.Nullable(Of Double),  _
                    ByVal _a__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _Htot__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _H__m_ As Global.System.Nullable(Of Double),  _
                    ByVal tg As Global.System.Nullable(Of Double),  _
                    ByVal K As Global.System.Nullable(Of Double),  _
                    ByVal _Sep__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _Wyy__cm3_ As Global.System.Nullable(Of Double),  _
                    ByVal _Wxx__cm3_ As Global.System.Nullable(Of Double),  _
                    ByVal Wr As Global.System.Nullable(Of Double),  _
                    ByVal M As Global.System.Nullable(Of Double)) As Integer
            If (Poste Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Poste,String)
            End If
            If (_Adm_Lín Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Adm_Lín,String)
            End If
            If (Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Tipo,String)
            End If
            If (_t__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_t__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_s__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_s__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Peso.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Peso.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_Htot__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_Htot__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_H__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_H__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (tg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(tg.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (K.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(K.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_Sep__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Sep__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_Wyy__cm3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_Wyy__cm3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_Wxx__cm3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_Wxx__cm3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Wr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Wr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (M.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(M.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _conductores_y_cablesTableAdapter As Conductores_y_cablesTableAdapter
        
        Private _macizosTableAdapter As MacizosTableAdapter
        
        Private _postesTableAdapter As PostesTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Conductores_y_cablesTableAdapter() As Conductores_y_cablesTableAdapter
            Get
                Return Me._conductores_y_cablesTableAdapter
            End Get
            Set
                Me._conductores_y_cablesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MacizosTableAdapter() As MacizosTableAdapter
            Get
                Return Me._macizosTableAdapter
            End Get
            Set
                Me._macizosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PostesTableAdapter() As PostesTableAdapter
            Get
                Return Me._postesTableAdapter
            End Get
            Set
                Me._postesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._conductores_y_cablesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._conductores_y_cablesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._conductores_y_cablesTableAdapter.Connection
                End If
                If ((Not (Me._macizosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._macizosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._macizosTableAdapter.Connection
                End If
                If ((Not (Me._postesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._postesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._postesTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._macizosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._postesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Base_de_datosDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._postesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Postes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._postesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._macizosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Macizos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._macizosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Conductores_y_cables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._conductores_y_cablesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Base_de_datosDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._postesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Postes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._postesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._macizosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Macizos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._macizosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Conductores_y_cables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._conductores_y_cablesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Base_de_datosDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Conductores_y_cables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._conductores_y_cablesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._macizosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Macizos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._macizosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._postesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Postes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._postesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Base_de_datosDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._conductores_y_cablesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._conductores_y_cablesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._macizosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._macizosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._postesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._postesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._conductores_y_cablesTableAdapter, Me._conductores_y_cablesTableAdapter.Connection)
                    Me._conductores_y_cablesTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._conductores_y_cablesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._conductores_y_cablesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._conductores_y_cablesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._conductores_y_cablesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._macizosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._macizosTableAdapter, Me._macizosTableAdapter.Connection)
                    Me._macizosTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._macizosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._macizosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._macizosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._macizosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._postesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._postesTableAdapter, Me._postesTableAdapter.Connection)
                    Me._postesTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._postesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._postesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._postesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._postesTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                    Me._conductores_y_cablesTableAdapter.Connection = CType(revertConnections(Me._conductores_y_cablesTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._conductores_y_cablesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._macizosTableAdapter) Is Nothing) Then
                    Me._macizosTableAdapter.Connection = CType(revertConnections(Me._macizosTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._macizosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._postesTableAdapter) Is Nothing) Then
                    Me._postesTableAdapter.Connection = CType(revertConnections(Me._postesTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._postesTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
