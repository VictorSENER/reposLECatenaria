'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3082
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Base_de_datosDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Base_de_datosDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableConductores_y_cables As Conductores_y_cablesDataTable
    
    Private tableDatos As DatosDataTable
    
    Private tableElectrificación As ElectrificaciónDataTable
    
    Private tableMacizos As MacizosDataTable
    
    Private tablePostes As PostesDataTable
    
    Private tableConductor_Anclaje As Conductor_AnclajeDataTable
    
    Private tableConductor_Cable_de_Tierra As Conductor_Cable_de_TierraDataTable
    
    Private tableConductor_CDPA As Conductor_CDPADataTable
    
    Private _tableConductor_Feeder__ As _Conductor_Feeder__DataTable
    
    Private __tableConductor_Feeder__ As __Conductor_Feeder__DataTable
    
    Private tableConductor_HC As Conductor_HCDataTable
    
    Private tableConductor_Pendola As Conductor_PendolaDataTable
    
    Private tableConductor_punto_fijo As Conductor_punto_fijoDataTable
    
    Private tableConductor_Sustentador As Conductor_SustentadorDataTable
    
    Private tableElectrificación_Consulta As Electrificación_ConsultaDataTable
    
    Private tableMacizos_Consulta As Macizos_ConsultaDataTable
    
    Private tablePostes_Consulta As Postes_ConsultaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Conductores y cables")) Is Nothing) Then
                MyBase.Tables.Add(New Conductores_y_cablesDataTable(ds.Tables("Conductores y cables")))
            End If
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                MyBase.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            If (Not (ds.Tables("Electrificación")) Is Nothing) Then
                MyBase.Tables.Add(New ElectrificaciónDataTable(ds.Tables("Electrificación")))
            End If
            If (Not (ds.Tables("Macizos")) Is Nothing) Then
                MyBase.Tables.Add(New MacizosDataTable(ds.Tables("Macizos")))
            End If
            If (Not (ds.Tables("Postes")) Is Nothing) Then
                MyBase.Tables.Add(New PostesDataTable(ds.Tables("Postes")))
            End If
            If (Not (ds.Tables("Conductor Anclaje")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_AnclajeDataTable(ds.Tables("Conductor Anclaje")))
            End If
            If (Not (ds.Tables("Conductor Cable de Tierra")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_Cable_de_TierraDataTable(ds.Tables("Conductor Cable de Tierra")))
            End If
            If (Not (ds.Tables("Conductor CDPA")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_CDPADataTable(ds.Tables("Conductor CDPA")))
            End If
            If (Not (ds.Tables("Conductor Feeder -")) Is Nothing) Then
                MyBase.Tables.Add(New _Conductor_Feeder__DataTable(ds.Tables("Conductor Feeder -")))
            End If
            If (Not (ds.Tables("Conductor Feeder +")) Is Nothing) Then
                MyBase.Tables.Add(New __Conductor_Feeder__DataTable(ds.Tables("Conductor Feeder +")))
            End If
            If (Not (ds.Tables("Conductor HC")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_HCDataTable(ds.Tables("Conductor HC")))
            End If
            If (Not (ds.Tables("Conductor Pendola")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_PendolaDataTable(ds.Tables("Conductor Pendola")))
            End If
            If (Not (ds.Tables("Conductor punto fijo")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_punto_fijoDataTable(ds.Tables("Conductor punto fijo")))
            End If
            If (Not (ds.Tables("Conductor Sustentador")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_SustentadorDataTable(ds.Tables("Conductor Sustentador")))
            End If
            If (Not (ds.Tables("Electrificación Consulta")) Is Nothing) Then
                MyBase.Tables.Add(New Electrificación_ConsultaDataTable(ds.Tables("Electrificación Consulta")))
            End If
            If (Not (ds.Tables("Macizos Consulta")) Is Nothing) Then
                MyBase.Tables.Add(New Macizos_ConsultaDataTable(ds.Tables("Macizos Consulta")))
            End If
            If (Not (ds.Tables("Postes Consulta")) Is Nothing) Then
                MyBase.Tables.Add(New Postes_ConsultaDataTable(ds.Tables("Postes Consulta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductores_y_cables() As Conductores_y_cablesDataTable
        Get
            Return Me.tableConductores_y_cables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datos() As DatosDataTable
        Get
            Return Me.tableDatos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Electrificación() As ElectrificaciónDataTable
        Get
            Return Me.tableElectrificación
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Macizos() As MacizosDataTable
        Get
            Return Me.tableMacizos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Postes() As PostesDataTable
        Get
            Return Me.tablePostes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_Anclaje() As Conductor_AnclajeDataTable
        Get
            Return Me.tableConductor_Anclaje
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_Cable_de_Tierra() As Conductor_Cable_de_TierraDataTable
        Get
            Return Me.tableConductor_Cable_de_Tierra
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_CDPA() As Conductor_CDPADataTable
        Get
            Return Me.tableConductor_CDPA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Conductor_Feeder__() As _Conductor_Feeder__DataTable
        Get
            Return Me._tableConductor_Feeder__
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property __Conductor_Feeder__() As __Conductor_Feeder__DataTable
        Get
            Return Me.__tableConductor_Feeder__
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_HC() As Conductor_HCDataTable
        Get
            Return Me.tableConductor_HC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_Pendola() As Conductor_PendolaDataTable
        Get
            Return Me.tableConductor_Pendola
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_punto_fijo() As Conductor_punto_fijoDataTable
        Get
            Return Me.tableConductor_punto_fijo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conductor_Sustentador() As Conductor_SustentadorDataTable
        Get
            Return Me.tableConductor_Sustentador
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Electrificación_Consulta() As Electrificación_ConsultaDataTable
        Get
            Return Me.tableElectrificación_Consulta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Macizos_Consulta() As Macizos_ConsultaDataTable
        Get
            Return Me.tableMacizos_Consulta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Postes_Consulta() As Postes_ConsultaDataTable
        Get
            Return Me.tablePostes_Consulta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Base_de_datosDataSet = CType(MyBase.Clone,Base_de_datosDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Conductores y cables")) Is Nothing) Then
                MyBase.Tables.Add(New Conductores_y_cablesDataTable(ds.Tables("Conductores y cables")))
            End If
            If (Not (ds.Tables("Datos")) Is Nothing) Then
                MyBase.Tables.Add(New DatosDataTable(ds.Tables("Datos")))
            End If
            If (Not (ds.Tables("Electrificación")) Is Nothing) Then
                MyBase.Tables.Add(New ElectrificaciónDataTable(ds.Tables("Electrificación")))
            End If
            If (Not (ds.Tables("Macizos")) Is Nothing) Then
                MyBase.Tables.Add(New MacizosDataTable(ds.Tables("Macizos")))
            End If
            If (Not (ds.Tables("Postes")) Is Nothing) Then
                MyBase.Tables.Add(New PostesDataTable(ds.Tables("Postes")))
            End If
            If (Not (ds.Tables("Conductor Anclaje")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_AnclajeDataTable(ds.Tables("Conductor Anclaje")))
            End If
            If (Not (ds.Tables("Conductor Cable de Tierra")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_Cable_de_TierraDataTable(ds.Tables("Conductor Cable de Tierra")))
            End If
            If (Not (ds.Tables("Conductor CDPA")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_CDPADataTable(ds.Tables("Conductor CDPA")))
            End If
            If (Not (ds.Tables("Conductor Feeder -")) Is Nothing) Then
                MyBase.Tables.Add(New _Conductor_Feeder__DataTable(ds.Tables("Conductor Feeder -")))
            End If
            If (Not (ds.Tables("Conductor Feeder +")) Is Nothing) Then
                MyBase.Tables.Add(New __Conductor_Feeder__DataTable(ds.Tables("Conductor Feeder +")))
            End If
            If (Not (ds.Tables("Conductor HC")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_HCDataTable(ds.Tables("Conductor HC")))
            End If
            If (Not (ds.Tables("Conductor Pendola")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_PendolaDataTable(ds.Tables("Conductor Pendola")))
            End If
            If (Not (ds.Tables("Conductor punto fijo")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_punto_fijoDataTable(ds.Tables("Conductor punto fijo")))
            End If
            If (Not (ds.Tables("Conductor Sustentador")) Is Nothing) Then
                MyBase.Tables.Add(New Conductor_SustentadorDataTable(ds.Tables("Conductor Sustentador")))
            End If
            If (Not (ds.Tables("Electrificación Consulta")) Is Nothing) Then
                MyBase.Tables.Add(New Electrificación_ConsultaDataTable(ds.Tables("Electrificación Consulta")))
            End If
            If (Not (ds.Tables("Macizos Consulta")) Is Nothing) Then
                MyBase.Tables.Add(New Macizos_ConsultaDataTable(ds.Tables("Macizos Consulta")))
            End If
            If (Not (ds.Tables("Postes Consulta")) Is Nothing) Then
                MyBase.Tables.Add(New Postes_ConsultaDataTable(ds.Tables("Postes Consulta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableConductores_y_cables = CType(MyBase.Tables("Conductores y cables"),Conductores_y_cablesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductores_y_cables) Is Nothing) Then
                Me.tableConductores_y_cables.InitVars
            End If
        End If
        Me.tableDatos = CType(MyBase.Tables("Datos"),DatosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatos) Is Nothing) Then
                Me.tableDatos.InitVars
            End If
        End If
        Me.tableElectrificación = CType(MyBase.Tables("Electrificación"),ElectrificaciónDataTable)
        If (initTable = true) Then
            If (Not (Me.tableElectrificación) Is Nothing) Then
                Me.tableElectrificación.InitVars
            End If
        End If
        Me.tableMacizos = CType(MyBase.Tables("Macizos"),MacizosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMacizos) Is Nothing) Then
                Me.tableMacizos.InitVars
            End If
        End If
        Me.tablePostes = CType(MyBase.Tables("Postes"),PostesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePostes) Is Nothing) Then
                Me.tablePostes.InitVars
            End If
        End If
        Me.tableConductor_Anclaje = CType(MyBase.Tables("Conductor Anclaje"),Conductor_AnclajeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_Anclaje) Is Nothing) Then
                Me.tableConductor_Anclaje.InitVars
            End If
        End If
        Me.tableConductor_Cable_de_Tierra = CType(MyBase.Tables("Conductor Cable de Tierra"),Conductor_Cable_de_TierraDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_Cable_de_Tierra) Is Nothing) Then
                Me.tableConductor_Cable_de_Tierra.InitVars
            End If
        End If
        Me.tableConductor_CDPA = CType(MyBase.Tables("Conductor CDPA"),Conductor_CDPADataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_CDPA) Is Nothing) Then
                Me.tableConductor_CDPA.InitVars
            End If
        End If
        Me._tableConductor_Feeder__ = CType(MyBase.Tables("Conductor Feeder -"),_Conductor_Feeder__DataTable)
        If (initTable = true) Then
            If (Not (Me._tableConductor_Feeder__) Is Nothing) Then
                Me._tableConductor_Feeder__.InitVars
            End If
        End If
        Me.__tableConductor_Feeder__ = CType(MyBase.Tables("Conductor Feeder +"),__Conductor_Feeder__DataTable)
        If (initTable = true) Then
            If (Not (Me.__tableConductor_Feeder__) Is Nothing) Then
                Me.__tableConductor_Feeder__.InitVars
            End If
        End If
        Me.tableConductor_HC = CType(MyBase.Tables("Conductor HC"),Conductor_HCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_HC) Is Nothing) Then
                Me.tableConductor_HC.InitVars
            End If
        End If
        Me.tableConductor_Pendola = CType(MyBase.Tables("Conductor Pendola"),Conductor_PendolaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_Pendola) Is Nothing) Then
                Me.tableConductor_Pendola.InitVars
            End If
        End If
        Me.tableConductor_punto_fijo = CType(MyBase.Tables("Conductor punto fijo"),Conductor_punto_fijoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_punto_fijo) Is Nothing) Then
                Me.tableConductor_punto_fijo.InitVars
            End If
        End If
        Me.tableConductor_Sustentador = CType(MyBase.Tables("Conductor Sustentador"),Conductor_SustentadorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConductor_Sustentador) Is Nothing) Then
                Me.tableConductor_Sustentador.InitVars
            End If
        End If
        Me.tableElectrificación_Consulta = CType(MyBase.Tables("Electrificación Consulta"),Electrificación_ConsultaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableElectrificación_Consulta) Is Nothing) Then
                Me.tableElectrificación_Consulta.InitVars
            End If
        End If
        Me.tableMacizos_Consulta = CType(MyBase.Tables("Macizos Consulta"),Macizos_ConsultaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMacizos_Consulta) Is Nothing) Then
                Me.tableMacizos_Consulta.InitVars
            End If
        End If
        Me.tablePostes_Consulta = CType(MyBase.Tables("Postes Consulta"),Postes_ConsultaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePostes_Consulta) Is Nothing) Then
                Me.tablePostes_Consulta.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Base_de_datosDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Base_de_datosDataSet2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableConductores_y_cables = New Conductores_y_cablesDataTable
        MyBase.Tables.Add(Me.tableConductores_y_cables)
        Me.tableDatos = New DatosDataTable
        MyBase.Tables.Add(Me.tableDatos)
        Me.tableElectrificación = New ElectrificaciónDataTable
        MyBase.Tables.Add(Me.tableElectrificación)
        Me.tableMacizos = New MacizosDataTable
        MyBase.Tables.Add(Me.tableMacizos)
        Me.tablePostes = New PostesDataTable
        MyBase.Tables.Add(Me.tablePostes)
        Me.tableConductor_Anclaje = New Conductor_AnclajeDataTable
        MyBase.Tables.Add(Me.tableConductor_Anclaje)
        Me.tableConductor_Cable_de_Tierra = New Conductor_Cable_de_TierraDataTable
        MyBase.Tables.Add(Me.tableConductor_Cable_de_Tierra)
        Me.tableConductor_CDPA = New Conductor_CDPADataTable
        MyBase.Tables.Add(Me.tableConductor_CDPA)
        Me._tableConductor_Feeder__ = New _Conductor_Feeder__DataTable
        MyBase.Tables.Add(Me._tableConductor_Feeder__)
        Me.__tableConductor_Feeder__ = New __Conductor_Feeder__DataTable
        MyBase.Tables.Add(Me.__tableConductor_Feeder__)
        Me.tableConductor_HC = New Conductor_HCDataTable
        MyBase.Tables.Add(Me.tableConductor_HC)
        Me.tableConductor_Pendola = New Conductor_PendolaDataTable
        MyBase.Tables.Add(Me.tableConductor_Pendola)
        Me.tableConductor_punto_fijo = New Conductor_punto_fijoDataTable
        MyBase.Tables.Add(Me.tableConductor_punto_fijo)
        Me.tableConductor_Sustentador = New Conductor_SustentadorDataTable
        MyBase.Tables.Add(Me.tableConductor_Sustentador)
        Me.tableElectrificación_Consulta = New Electrificación_ConsultaDataTable
        MyBase.Tables.Add(Me.tableElectrificación_Consulta)
        Me.tableMacizos_Consulta = New Macizos_ConsultaDataTable
        MyBase.Tables.Add(Me.tableMacizos_Consulta)
        Me.tablePostes_Consulta = New Postes_ConsultaDataTable
        MyBase.Tables.Add(Me.tablePostes_Consulta)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductores_y_cables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeElectrificación() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMacizos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePostes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_Anclaje() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_Cable_de_Tierra() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_CDPA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_Conductor_Feeder__() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize__Conductor_Feeder__() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_HC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_Pendola() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_punto_fijo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConductor_Sustentador() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeElectrificación_Consulta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMacizos_Consulta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePostes_Consulta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Conductores_y_cablesRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductores_y_cablesRowChangeEvent)
    
    Public Delegate Sub DatosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosRowChangeEvent)
    
    Public Delegate Sub ElectrificaciónRowChangeEventHandler(ByVal sender As Object, ByVal e As ElectrificaciónRowChangeEvent)
    
    Public Delegate Sub MacizosRowChangeEventHandler(ByVal sender As Object, ByVal e As MacizosRowChangeEvent)
    
    Public Delegate Sub PostesRowChangeEventHandler(ByVal sender As Object, ByVal e As PostesRowChangeEvent)
    
    Public Delegate Sub Conductor_AnclajeRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_AnclajeRowChangeEvent)
    
    Public Delegate Sub Conductor_Cable_de_TierraRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_Cable_de_TierraRowChangeEvent)
    
    Public Delegate Sub Conductor_CDPARowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_CDPARowChangeEvent)
    
    Public Delegate Sub _Conductor_Feeder__RowChangeEventHandler(ByVal sender As Object, ByVal e As _Conductor_Feeder__RowChangeEvent)
    
    Public Delegate Sub __Conductor_Feeder__RowChangeEventHandler(ByVal sender As Object, ByVal e As __Conductor_Feeder__RowChangeEvent)
    
    Public Delegate Sub Conductor_HCRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_HCRowChangeEvent)
    
    Public Delegate Sub Conductor_PendolaRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_PendolaRowChangeEvent)
    
    Public Delegate Sub Conductor_punto_fijoRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_punto_fijoRowChangeEvent)
    
    Public Delegate Sub Conductor_SustentadorRowChangeEventHandler(ByVal sender As Object, ByVal e As Conductor_SustentadorRowChangeEvent)
    
    Public Delegate Sub Electrificación_ConsultaRowChangeEventHandler(ByVal sender As Object, ByVal e As Electrificación_ConsultaRowChangeEvent)
    
    Public Delegate Sub Macizos_ConsultaRowChangeEventHandler(ByVal sender As Object, ByVal e As Macizos_ConsultaRowChangeEvent)
    
    Public Delegate Sub Postes_ConsultaRowChangeEventHandler(ByVal sender As Object, ByVal e As Postes_ConsultaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductores_y_cablesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductores_y_cablesRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        Private _columnSección__mm2_ As Global.System.Data.DataColumn
        
        Private _columnDiámetro_cable__m_ As Global.System.Data.DataColumn
        
        Private _columnPeso_lineal__kg_m_ As Global.System.Data.DataColumn
        
        Private _columnResistencia_máxima__ohm_km_ As Global.System.Data.DataColumn
        
        Private columnCoef_dilatación As Global.System.Data.DataColumn
        
        Private _columnMódulo_elástico__kN_ As Global.System.Data.DataColumn
        
        Private _columnCarga_rotura__kN_ As Global.System.Data.DataColumn
        
        Private columnNorma As Global.System.Data.DataColumn
        
        Private columnOrígen_1 As Global.System.Data.DataColumn
        
        Private columnOrígen_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductores y cables"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Sección__mm2_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSección__mm2_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Diámetro_cable__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnDiámetro_cable__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Peso_lineal__kg_m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPeso_lineal__kg_m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Resistencia_máxima__ohm_km_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnResistencia_máxima__ohm_km_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Coef_dilataciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoef_dilatación
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Módulo_elástico__kN_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnMódulo_elástico__kN_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Carga_rotura__kN_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnCarga_rotura__kN_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NormaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNorma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Orígen_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrígen_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Orígen_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrígen_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductores_y_cablesRow
            Get
                Return CType(Me.Rows(index),Conductores_y_cablesRow)
            End Get
        End Property
        
        Public Event Conductores_y_cablesRowChanging As Conductores_y_cablesRowChangeEventHandler
        
        Public Event Conductores_y_cablesRowChanged As Conductores_y_cablesRowChangeEventHandler
        
        Public Event Conductores_y_cablesRowDeleting As Conductores_y_cablesRowChangeEventHandler
        
        Public Event Conductores_y_cablesRowDeleted As Conductores_y_cablesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductores_y_cablesRow(ByVal row As Conductores_y_cablesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductores_y_cablesRow(ByVal Tipo As String, ByVal Material As String, ByVal _Sección__mm2_ As Double, ByVal _Diámetro_cable__m_ As Double, ByVal _Peso_lineal__kg_m_ As Double, ByVal _Resistencia_máxima__ohm_km_ As Double, ByVal Coef_dilatación As Double, ByVal _Módulo_elástico__kN_ As Double, ByVal _Carga_rotura__kN_ As Double, ByVal Norma As String, ByVal Orígen_1 As String, ByVal Orígen_2 As String) As Conductores_y_cablesRow
            Dim rowConductores_y_cablesRow As Conductores_y_cablesRow = CType(Me.NewRow,Conductores_y_cablesRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material, _Sección__mm2_, _Diámetro_cable__m_, _Peso_lineal__kg_m_, _Resistencia_máxima__ohm_km_, Coef_dilatación, _Módulo_elástico__kN_, _Carga_rotura__kN_, Norma, Orígen_1, Orígen_2}
            rowConductores_y_cablesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductores_y_cablesRow)
            Return rowConductores_y_cablesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductores_y_cablesDataTable = CType(MyBase.Clone,Conductores_y_cablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductores_y_cablesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
            Me._columnSección__mm2_ = MyBase.Columns("Sección (mm2)")
            Me._columnDiámetro_cable__m_ = MyBase.Columns("Diámetro cable (m)")
            Me._columnPeso_lineal__kg_m_ = MyBase.Columns("Peso lineal (kg/m)")
            Me._columnResistencia_máxima__ohm_km_ = MyBase.Columns("Resistencia máxima (ohm/km)")
            Me.columnCoef_dilatación = MyBase.Columns("Coef dilatación")
            Me._columnMódulo_elástico__kN_ = MyBase.Columns("Módulo elástico (kN)")
            Me._columnCarga_rotura__kN_ = MyBase.Columns("Carga rotura (kN)")
            Me.columnNorma = MyBase.Columns("Norma")
            Me.columnOrígen_1 = MyBase.Columns("Orígen 1")
            Me.columnOrígen_2 = MyBase.Columns("Orígen 2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me._columnSección__mm2_ = New Global.System.Data.DataColumn("Sección (mm2)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSección__mm2_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSección__mm2_")
            Me._columnSección__mm2_.ExtendedProperties.Add("Generator_UserColumnName", "Sección (mm2)")
            MyBase.Columns.Add(Me._columnSección__mm2_)
            Me._columnDiámetro_cable__m_ = New Global.System.Data.DataColumn("Diámetro cable (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnDiámetro_cable__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDiámetro_cable__m_")
            Me._columnDiámetro_cable__m_.ExtendedProperties.Add("Generator_UserColumnName", "Diámetro cable (m)")
            MyBase.Columns.Add(Me._columnDiámetro_cable__m_)
            Me._columnPeso_lineal__kg_m_ = New Global.System.Data.DataColumn("Peso lineal (kg/m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPeso_lineal__kg_m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPeso_lineal__kg_m_")
            Me._columnPeso_lineal__kg_m_.ExtendedProperties.Add("Generator_UserColumnName", "Peso lineal (kg/m)")
            MyBase.Columns.Add(Me._columnPeso_lineal__kg_m_)
            Me._columnResistencia_máxima__ohm_km_ = New Global.System.Data.DataColumn("Resistencia máxima (ohm/km)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnResistencia_máxima__ohm_km_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnResistencia_máxima__ohm_km_")
            Me._columnResistencia_máxima__ohm_km_.ExtendedProperties.Add("Generator_UserColumnName", "Resistencia máxima (ohm/km)")
            MyBase.Columns.Add(Me._columnResistencia_máxima__ohm_km_)
            Me.columnCoef_dilatación = New Global.System.Data.DataColumn("Coef dilatación", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoef_dilatación)
            Me._columnMódulo_elástico__kN_ = New Global.System.Data.DataColumn("Módulo elástico (kN)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnMódulo_elástico__kN_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnMódulo_elástico__kN_")
            Me._columnMódulo_elástico__kN_.ExtendedProperties.Add("Generator_UserColumnName", "Módulo elástico (kN)")
            MyBase.Columns.Add(Me._columnMódulo_elástico__kN_)
            Me._columnCarga_rotura__kN_ = New Global.System.Data.DataColumn("Carga rotura (kN)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnCarga_rotura__kN_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCarga_rotura__kN_")
            Me._columnCarga_rotura__kN_.ExtendedProperties.Add("Generator_UserColumnName", "Carga rotura (kN)")
            MyBase.Columns.Add(Me._columnCarga_rotura__kN_)
            Me.columnNorma = New Global.System.Data.DataColumn("Norma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNorma)
            Me.columnOrígen_1 = New Global.System.Data.DataColumn("Orígen 1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrígen_1)
            Me.columnOrígen_2 = New Global.System.Data.DataColumn("Orígen 2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrígen_2)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
            Me.columnNorma.MaxLength = 255
            Me.columnOrígen_1.MaxLength = 255
            Me.columnOrígen_2.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductores_y_cablesRow() As Conductores_y_cablesRow
            Return CType(Me.NewRow,Conductores_y_cablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductores_y_cablesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductores_y_cablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductores_y_cablesRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowChanged(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductores_y_cablesRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowChanging(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductores_y_cablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowDeleted(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductores_y_cablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductores_y_cablesRowDeleting(Me, New Conductores_y_cablesRowChangeEvent(CType(e.Row,Conductores_y_cablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductores_y_cablesRow(ByVal row As Conductores_y_cablesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductores_y_cablesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosRow)
        
        Private columnNombre_catenaria As Global.System.Data.DataColumn
        
        Private columnSistema As Global.System.Data.DataColumn
        
        Private columnAltura_nominal As Global.System.Data.DataColumn
        
        Private columnAltura_mínima As Global.System.Data.DataColumn
        
        Private columnAltura_máxima As Global.System.Data.DataColumn
        
        Private columnAltura_catenaria As Global.System.Data.DataColumn
        
        Private columnDistancia_máx_entre_vanos As Global.System.Data.DataColumn
        
        Private columnDistancia_máx_del_cantón As Global.System.Data.DataColumn
        
        Private columnVano_máximo As Global.System.Data.DataColumn
        
        Private columnVano_máx_en_sec_mecánico As Global.System.Data.DataColumn
        
        Private columnVano_máx_en_sec_eléctrico As Global.System.Data.DataColumn
        
        Private columnVano_máx_en_túnel As Global.System.Data.DataColumn
        
        Private columnIncr_normalizado_de_vano As Global.System.Data.DataColumn
        
        Private columnIncr_máx_altura_HC As Global.System.Data.DataColumn
        
        Private columnNúm_mín__vanos_en_sec_mec As Global.System.Data.DataColumn
        
        Private columnNúm_mín_vanos_en_sec_eléct As Global.System.Data.DataColumn
        
        Private columnAncho_vía As Global.System.Data.DataColumn
        
        Private columnDescentramiento_máx_recta As Global.System.Data.DataColumn
        
        Private columnDescentramiento_máx_curva As Global.System.Data.DataColumn
        
        Private columnRadio_considerable_como_recta As Global.System.Data.DataColumn
        
        Private columnZona_trabajo_pantógrafo As Global.System.Data.DataColumn
        
        Private columnElevación_máx_pantógrafo As Global.System.Data.DataColumn
        
        Private columnVelocidad_viento As Global.System.Data.DataColumn
        
        Private columnFlecha_máx_centro_vano As Global.System.Data.DataColumn
        
        Private _columnDistancia_carril___poste As Global.System.Data.DataColumn
        
        Private _columnDistancia_base_poste___PMR As Global.System.Data.DataColumn
        
        Private columnDistancia_eléct_sec_mecánico As Global.System.Data.DataColumn
        
        Private columnDistancia_eléct_sec_eléctrico As Global.System.Data.DataColumn
        
        Private columnLong_zona_común_máx As Global.System.Data.DataColumn
        
        Private columnLong_zona_común_mín As Global.System.Data.DataColumn
        
        Private columnLong_Zona_Neutra As Global.System.Data.DataColumn
        
        Private columnHilo_de_Contacto As Global.System.Data.DataColumn
        
        Private columnSustentador As Global.System.Data.DataColumn
        
        Private columnC_de_Protección_Aérea As Global.System.Data.DataColumn
        
        Private columnCable_de_Tierra As Global.System.Data.DataColumn
        
        Private _columnFeeder__ As Global.System.Data.DataColumn
        
        Private __columnFeeder__ As Global.System.Data.DataColumn
        
        Private columnPunto_fijo As Global.System.Data.DataColumn
        
        Private columnPéndola As Global.System.Data.DataColumn
        
        Private columnAnclaje As Global.System.Data.DataColumn
        
        Private _columnPosición_Feeder__ As Global.System.Data.DataColumn
        
        Private __columnPosición_Feeder__ As Global.System.Data.DataColumn
        
        Private columnNúm_HC As Global.System.Data.DataColumn
        
        Private columnNúm_CdPA As Global.System.Data.DataColumn
        
        Private _columnNúm_Feeder__ As Global.System.Data.DataColumn
        
        Private __columnNúm_Feeder__ As Global.System.Data.DataColumn
        
        Private columnTensión_HC As Global.System.Data.DataColumn
        
        Private columnTensión_sustentador As Global.System.Data.DataColumn
        
        Private columnTensión_CdPA As Global.System.Data.DataColumn
        
        Private _columnTensión_Feeder__ As Global.System.Data.DataColumn
        
        Private __columnTensión_Feeder__ As Global.System.Data.DataColumn
        
        Private columnTensión_punto_fijo As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private _columnAdm_Línea As Global.System.Data.DataColumn
        
        Private columnCódigo As Global.System.Data.DataColumn
        
        Private columnNumeración As Global.System.Data.DataColumn
        
        Private columnTipo_macizo As Global.System.Data.DataColumn
        
        Private _columnAdm_Línea_postes As Global.System.Data.DataColumn
        
        Private columnTubo_de_ménsula As Global.System.Data.DataColumn
        
        Private columnTubo_tirante As Global.System.Data.DataColumn
        
        Private columnCola_de_anclaje As Global.System.Data.DataColumn
        
        Private _columnAislador_Feeder__ As Global.System.Data.DataColumn
        
        Private __columnAislador_Feeder__ As Global.System.Data.DataColumn
        
        Private columnDistancia_apoyo_y_1ª_péndola As Global.System.Data.DataColumn
        
        Private columnDistancia_1ª_y_2ª_péndola As Global.System.Data.DataColumn
        
        Private columnDistancia_máx_entre_péndolas As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Datos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_catenariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_catenaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SistemaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSistema
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Altura_nominalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAltura_nominal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Altura_mínimaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAltura_mínima
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Altura_máximaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAltura_máxima
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Altura_catenariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAltura_catenaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_máx_entre_vanosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_máx_entre_vanos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_máx_del_cantónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_máx_del_cantón
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vano_máximoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVano_máximo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vano_máx_en_sec_mecánicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVano_máx_en_sec_mecánico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vano_máx_en_sec_eléctricoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVano_máx_en_sec_eléctrico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vano_máx_en_túnelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVano_máx_en_túnel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Incr_normalizado_de_vanoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncr_normalizado_de_vano
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Incr_máx_altura_HCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncr_máx_altura_HC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Núm_mín__vanos_en_sec_mecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNúm_mín__vanos_en_sec_mec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Núm_mín_vanos_en_sec_eléctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNúm_mín_vanos_en_sec_eléct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ancho_víaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAncho_vía
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descentramiento_máx_rectaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescentramiento_máx_recta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descentramiento_máx_curvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescentramiento_máx_curva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Radio_considerable_como_rectaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRadio_considerable_como_recta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zona_trabajo_pantógrafoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZona_trabajo_pantógrafo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Elevación_máx_pantógrafoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElevación_máx_pantógrafo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Velocidad_vientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVelocidad_viento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flecha_máx_centro_vanoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlecha_máx_centro_vano
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Distancia_carril___posteColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnDistancia_carril___poste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Distancia_base_poste___PMRColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnDistancia_base_poste___PMR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_eléct_sec_mecánicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_eléct_sec_mecánico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_eléct_sec_eléctricoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_eléct_sec_eléctrico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Long_zona_común_máxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLong_zona_común_máx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Long_zona_común_mínColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLong_zona_común_mín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Long_Zona_NeutraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLong_Zona_Neutra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Hilo_de_ContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHilo_de_Contacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SustentadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSustentador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C_de_Protección_AéreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC_de_Protección_Aérea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cable_de_TierraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCable_de_Tierra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnFeeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me.__columnFeeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Punto_fijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPunto_fijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PéndolaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPéndola
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnclajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnclaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Posición_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPosición_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __Posición_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me.__columnPosición_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Núm_HCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNúm_HC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Núm_CdPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNúm_CdPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Núm_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnNúm_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __Núm_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me.__columnNúm_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tensión_HCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTensión_HC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tensión_sustentadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTensión_sustentador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tensión_CdPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTensión_CdPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Tensión_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnTensión_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __Tensión_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me.__columnTensión_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tensión_punto_fijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTensión_punto_fijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LíneaColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Línea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CódigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCódigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeraciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeración
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_macizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_macizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_Línea_postesColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Línea_postes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tubo_de_ménsulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTubo_de_ménsula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tubo_tiranteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTubo_tirante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cola_de_anclajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCola_de_anclaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Aislador_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnAislador_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __Aislador_Feeder__Column() As Global.System.Data.DataColumn
            Get
                Return Me.__columnAislador_Feeder__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_apoyo_y_1ª_péndolaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_apoyo_y_1ª_péndola
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_1ª_y_2ª_péndolaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_1ª_y_2ª_péndola
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Distancia_máx_entre_péndolasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistancia_máx_entre_péndolas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosRow
            Get
                Return CType(Me.Rows(index),DatosRow)
            End Get
        End Property
        
        Public Event DatosRowChanging As DatosRowChangeEventHandler
        
        Public Event DatosRowChanged As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleting As DatosRowChangeEventHandler
        
        Public Event DatosRowDeleted As DatosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosRow(ByVal row As DatosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosRow( _
                    ByVal Nombre_catenaria As String,  _
                    ByVal Sistema As String,  _
                    ByVal Altura_nominal As Double,  _
                    ByVal Altura_mínima As Double,  _
                    ByVal Altura_máxima As Double,  _
                    ByVal Altura_catenaria As Double,  _
                    ByVal Distancia_máx_entre_vanos As Double,  _
                    ByVal Distancia_máx_del_cantón As Double,  _
                    ByVal Vano_máximo As Double,  _
                    ByVal Vano_máx_en_sec_mecánico As Double,  _
                    ByVal Vano_máx_en_sec_eléctrico As Double,  _
                    ByVal Vano_máx_en_túnel As Double,  _
                    ByVal Incr_normalizado_de_vano As Double,  _
                    ByVal Incr_máx_altura_HC As Double,  _
                    ByVal Núm_mín__vanos_en_sec_mec As Double,  _
                    ByVal Núm_mín_vanos_en_sec_eléct As Double,  _
                    ByVal Ancho_vía As Double,  _
                    ByVal Descentramiento_máx_recta As Double,  _
                    ByVal Descentramiento_máx_curva As Double,  _
                    ByVal Radio_considerable_como_recta As Double,  _
                    ByVal Zona_trabajo_pantógrafo As Double,  _
                    ByVal Elevación_máx_pantógrafo As String,  _
                    ByVal Velocidad_viento As Double,  _
                    ByVal Flecha_máx_centro_vano As Double,  _
                    ByVal _Distancia_carril___poste As Double,  _
                    ByVal _Distancia_base_poste___PMR As Double,  _
                    ByVal Distancia_eléct_sec_mecánico As Double,  _
                    ByVal Distancia_eléct_sec_eléctrico As Double,  _
                    ByVal Long_zona_común_máx As Double,  _
                    ByVal Long_zona_común_mín As Double,  _
                    ByVal Long_Zona_Neutra As Double,  _
                    ByVal Hilo_de_Contacto As String,  _
                    ByVal Sustentador As String,  _
                    ByVal C_de_Protección_Aérea As String,  _
                    ByVal Cable_de_Tierra As String,  _
                    ByVal _Feeder__ As String,  _
                    ByVal __Feeder__ As String,  _
                    ByVal Punto_fijo As String,  _
                    ByVal Péndola As String,  _
                    ByVal Anclaje As String,  _
                    ByVal _Posición_Feeder__ As String,  _
                    ByVal __Posición_Feeder__ As String,  _
                    ByVal Núm_HC As Integer,  _
                    ByVal Núm_CdPA As Integer,  _
                    ByVal _Núm_Feeder__ As Integer,  _
                    ByVal __Núm_Feeder__ As Integer,  _
                    ByVal Tensión_HC As Double,  _
                    ByVal Tensión_sustentador As Double,  _
                    ByVal Tensión_CdPA As Double,  _
                    ByVal _Tensión_Feeder__ As Double,  _
                    ByVal __Tensión_Feeder__ As Double,  _
                    ByVal Tensión_punto_fijo As Double,  _
                    ByVal Tipo As String,  _
                    ByVal _Adm_Línea As String,  _
                    ByVal Código As String,  _
                    ByVal Numeración As String,  _
                    ByVal Tipo_macizo As String,  _
                    ByVal _Adm_Línea_postes As String,  _
                    ByVal Tubo_de_ménsula As String,  _
                    ByVal Tubo_tirante As String,  _
                    ByVal Cola_de_anclaje As String,  _
                    ByVal _Aislador_Feeder__ As String,  _
                    ByVal __Aislador_Feeder__ As String,  _
                    ByVal Distancia_apoyo_y_1ª_péndola As Double,  _
                    ByVal Distancia_1ª_y_2ª_péndola As Double,  _
                    ByVal Distancia_máx_entre_péndolas As Double) As DatosRow
            Dim rowDatosRow As DatosRow = CType(Me.NewRow,DatosRow)
            Dim columnValuesArray() As Object = New Object() {Nombre_catenaria, Sistema, Altura_nominal, Altura_mínima, Altura_máxima, Altura_catenaria, Distancia_máx_entre_vanos, Distancia_máx_del_cantón, Vano_máximo, Vano_máx_en_sec_mecánico, Vano_máx_en_sec_eléctrico, Vano_máx_en_túnel, Incr_normalizado_de_vano, Incr_máx_altura_HC, Núm_mín__vanos_en_sec_mec, Núm_mín_vanos_en_sec_eléct, Ancho_vía, Descentramiento_máx_recta, Descentramiento_máx_curva, Radio_considerable_como_recta, Zona_trabajo_pantógrafo, Elevación_máx_pantógrafo, Velocidad_viento, Flecha_máx_centro_vano, _Distancia_carril___poste, _Distancia_base_poste___PMR, Distancia_eléct_sec_mecánico, Distancia_eléct_sec_eléctrico, Long_zona_común_máx, Long_zona_común_mín, Long_Zona_Neutra, Hilo_de_Contacto, Sustentador, C_de_Protección_Aérea, Cable_de_Tierra, _Feeder__, __Feeder__, Punto_fijo, Péndola, Anclaje, _Posición_Feeder__, __Posición_Feeder__, Núm_HC, Núm_CdPA, _Núm_Feeder__, __Núm_Feeder__, Tensión_HC, Tensión_sustentador, Tensión_CdPA, _Tensión_Feeder__, __Tensión_Feeder__, Tensión_punto_fijo, Tipo, _Adm_Línea, Código, Numeración, Tipo_macizo, _Adm_Línea_postes, Tubo_de_ménsula, Tubo_tirante, Cola_de_anclaje, _Aislador_Feeder__, __Aislador_Feeder__, Distancia_apoyo_y_1ª_péndola, Distancia_1ª_y_2ª_péndola, Distancia_máx_entre_péndolas}
            rowDatosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosRow)
            Return rowDatosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNombre_catenaria(ByVal Nombre_catenaria As String) As DatosRow
            Return CType(Me.Rows.Find(New Object() {Nombre_catenaria}),DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosDataTable = CType(MyBase.Clone,DatosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombre_catenaria = MyBase.Columns("Nombre catenaria")
            Me.columnSistema = MyBase.Columns("Sistema")
            Me.columnAltura_nominal = MyBase.Columns("Altura nominal")
            Me.columnAltura_mínima = MyBase.Columns("Altura mínima")
            Me.columnAltura_máxima = MyBase.Columns("Altura máxima")
            Me.columnAltura_catenaria = MyBase.Columns("Altura catenaria")
            Me.columnDistancia_máx_entre_vanos = MyBase.Columns("Distancia máx entre vanos")
            Me.columnDistancia_máx_del_cantón = MyBase.Columns("Distancia máx del cantón")
            Me.columnVano_máximo = MyBase.Columns("Vano máximo")
            Me.columnVano_máx_en_sec_mecánico = MyBase.Columns("Vano máx en sec mecánico")
            Me.columnVano_máx_en_sec_eléctrico = MyBase.Columns("Vano máx en sec eléctrico")
            Me.columnVano_máx_en_túnel = MyBase.Columns("Vano máx en túnel")
            Me.columnIncr_normalizado_de_vano = MyBase.Columns("Incr normalizado de vano")
            Me.columnIncr_máx_altura_HC = MyBase.Columns("Incr máx altura HC")
            Me.columnNúm_mín__vanos_en_sec_mec = MyBase.Columns("Núm mín  vanos en sec mec")
            Me.columnNúm_mín_vanos_en_sec_eléct = MyBase.Columns("Núm mín vanos en sec eléct")
            Me.columnAncho_vía = MyBase.Columns("Ancho vía")
            Me.columnDescentramiento_máx_recta = MyBase.Columns("Descentramiento máx recta")
            Me.columnDescentramiento_máx_curva = MyBase.Columns("Descentramiento máx curva")
            Me.columnRadio_considerable_como_recta = MyBase.Columns("Radio considerable como recta")
            Me.columnZona_trabajo_pantógrafo = MyBase.Columns("Zona trabajo pantógrafo")
            Me.columnElevación_máx_pantógrafo = MyBase.Columns("Elevación máx pantógrafo")
            Me.columnVelocidad_viento = MyBase.Columns("Velocidad viento")
            Me.columnFlecha_máx_centro_vano = MyBase.Columns("Flecha máx centro vano")
            Me._columnDistancia_carril___poste = MyBase.Columns("Distancia carril - poste")
            Me._columnDistancia_base_poste___PMR = MyBase.Columns("Distancia base poste - PMR")
            Me.columnDistancia_eléct_sec_mecánico = MyBase.Columns("Distancia eléct sec mecánico")
            Me.columnDistancia_eléct_sec_eléctrico = MyBase.Columns("Distancia eléct sec eléctrico")
            Me.columnLong_zona_común_máx = MyBase.Columns("Long zona común máx")
            Me.columnLong_zona_común_mín = MyBase.Columns("Long zona común mín")
            Me.columnLong_Zona_Neutra = MyBase.Columns("Long Zona Neutra")
            Me.columnHilo_de_Contacto = MyBase.Columns("Hilo de Contacto")
            Me.columnSustentador = MyBase.Columns("Sustentador")
            Me.columnC_de_Protección_Aérea = MyBase.Columns("C de Protección Aérea")
            Me.columnCable_de_Tierra = MyBase.Columns("Cable de Tierra")
            Me._columnFeeder__ = MyBase.Columns("Feeder +")
            Me.__columnFeeder__ = MyBase.Columns("Feeder -")
            Me.columnPunto_fijo = MyBase.Columns("Punto fijo")
            Me.columnPéndola = MyBase.Columns("Péndola")
            Me.columnAnclaje = MyBase.Columns("Anclaje")
            Me._columnPosición_Feeder__ = MyBase.Columns("Posición Feeder +")
            Me.__columnPosición_Feeder__ = MyBase.Columns("Posición Feeder -")
            Me.columnNúm_HC = MyBase.Columns("Núm HC")
            Me.columnNúm_CdPA = MyBase.Columns("Núm CdPA")
            Me._columnNúm_Feeder__ = MyBase.Columns("Núm Feeder +")
            Me.__columnNúm_Feeder__ = MyBase.Columns("Núm Feeder -")
            Me.columnTensión_HC = MyBase.Columns("Tensión HC")
            Me.columnTensión_sustentador = MyBase.Columns("Tensión sustentador")
            Me.columnTensión_CdPA = MyBase.Columns("Tensión CdPA")
            Me._columnTensión_Feeder__ = MyBase.Columns("Tensión Feeder +")
            Me.__columnTensión_Feeder__ = MyBase.Columns("Tensión Feeder -")
            Me.columnTensión_punto_fijo = MyBase.Columns("Tensión punto fijo")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me._columnAdm_Línea = MyBase.Columns("Adm/Línea")
            Me.columnCódigo = MyBase.Columns("Código")
            Me.columnNumeración = MyBase.Columns("Numeración")
            Me.columnTipo_macizo = MyBase.Columns("Tipo macizo")
            Me._columnAdm_Línea_postes = MyBase.Columns("Adm/Línea postes")
            Me.columnTubo_de_ménsula = MyBase.Columns("Tubo de ménsula")
            Me.columnTubo_tirante = MyBase.Columns("Tubo tirante")
            Me.columnCola_de_anclaje = MyBase.Columns("Cola de anclaje")
            Me._columnAislador_Feeder__ = MyBase.Columns("Aislador Feeder +")
            Me.__columnAislador_Feeder__ = MyBase.Columns("Aislador Feeder -")
            Me.columnDistancia_apoyo_y_1ª_péndola = MyBase.Columns("Distancia apoyo y 1ª péndola")
            Me.columnDistancia_1ª_y_2ª_péndola = MyBase.Columns("Distancia 1ª y 2ª péndola")
            Me.columnDistancia_máx_entre_péndolas = MyBase.Columns("Distancia máx entre péndolas")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombre_catenaria = New Global.System.Data.DataColumn("Nombre catenaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_catenaria)
            Me.columnSistema = New Global.System.Data.DataColumn("Sistema", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSistema)
            Me.columnAltura_nominal = New Global.System.Data.DataColumn("Altura nominal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAltura_nominal)
            Me.columnAltura_mínima = New Global.System.Data.DataColumn("Altura mínima", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAltura_mínima)
            Me.columnAltura_máxima = New Global.System.Data.DataColumn("Altura máxima", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAltura_máxima)
            Me.columnAltura_catenaria = New Global.System.Data.DataColumn("Altura catenaria", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAltura_catenaria)
            Me.columnDistancia_máx_entre_vanos = New Global.System.Data.DataColumn("Distancia máx entre vanos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_máx_entre_vanos)
            Me.columnDistancia_máx_del_cantón = New Global.System.Data.DataColumn("Distancia máx del cantón", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_máx_del_cantón)
            Me.columnVano_máximo = New Global.System.Data.DataColumn("Vano máximo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVano_máximo)
            Me.columnVano_máx_en_sec_mecánico = New Global.System.Data.DataColumn("Vano máx en sec mecánico", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVano_máx_en_sec_mecánico)
            Me.columnVano_máx_en_sec_eléctrico = New Global.System.Data.DataColumn("Vano máx en sec eléctrico", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVano_máx_en_sec_eléctrico)
            Me.columnVano_máx_en_túnel = New Global.System.Data.DataColumn("Vano máx en túnel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVano_máx_en_túnel)
            Me.columnIncr_normalizado_de_vano = New Global.System.Data.DataColumn("Incr normalizado de vano", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncr_normalizado_de_vano)
            Me.columnIncr_máx_altura_HC = New Global.System.Data.DataColumn("Incr máx altura HC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncr_máx_altura_HC)
            Me.columnNúm_mín__vanos_en_sec_mec = New Global.System.Data.DataColumn("Núm mín  vanos en sec mec", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNúm_mín__vanos_en_sec_mec)
            Me.columnNúm_mín_vanos_en_sec_eléct = New Global.System.Data.DataColumn("Núm mín vanos en sec eléct", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNúm_mín_vanos_en_sec_eléct)
            Me.columnAncho_vía = New Global.System.Data.DataColumn("Ancho vía", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAncho_vía)
            Me.columnDescentramiento_máx_recta = New Global.System.Data.DataColumn("Descentramiento máx recta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescentramiento_máx_recta)
            Me.columnDescentramiento_máx_curva = New Global.System.Data.DataColumn("Descentramiento máx curva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescentramiento_máx_curva)
            Me.columnRadio_considerable_como_recta = New Global.System.Data.DataColumn("Radio considerable como recta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRadio_considerable_como_recta)
            Me.columnZona_trabajo_pantógrafo = New Global.System.Data.DataColumn("Zona trabajo pantógrafo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZona_trabajo_pantógrafo)
            Me.columnElevación_máx_pantógrafo = New Global.System.Data.DataColumn("Elevación máx pantógrafo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElevación_máx_pantógrafo)
            Me.columnVelocidad_viento = New Global.System.Data.DataColumn("Velocidad viento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVelocidad_viento)
            Me.columnFlecha_máx_centro_vano = New Global.System.Data.DataColumn("Flecha máx centro vano", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlecha_máx_centro_vano)
            Me._columnDistancia_carril___poste = New Global.System.Data.DataColumn("Distancia carril - poste", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnDistancia_carril___poste.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDistancia_carril___poste")
            Me._columnDistancia_carril___poste.ExtendedProperties.Add("Generator_UserColumnName", "Distancia carril - poste")
            MyBase.Columns.Add(Me._columnDistancia_carril___poste)
            Me._columnDistancia_base_poste___PMR = New Global.System.Data.DataColumn("Distancia base poste - PMR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnDistancia_base_poste___PMR.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDistancia_base_poste___PMR")
            Me._columnDistancia_base_poste___PMR.ExtendedProperties.Add("Generator_UserColumnName", "Distancia base poste - PMR")
            MyBase.Columns.Add(Me._columnDistancia_base_poste___PMR)
            Me.columnDistancia_eléct_sec_mecánico = New Global.System.Data.DataColumn("Distancia eléct sec mecánico", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_eléct_sec_mecánico)
            Me.columnDistancia_eléct_sec_eléctrico = New Global.System.Data.DataColumn("Distancia eléct sec eléctrico", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_eléct_sec_eléctrico)
            Me.columnLong_zona_común_máx = New Global.System.Data.DataColumn("Long zona común máx", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLong_zona_común_máx)
            Me.columnLong_zona_común_mín = New Global.System.Data.DataColumn("Long zona común mín", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLong_zona_común_mín)
            Me.columnLong_Zona_Neutra = New Global.System.Data.DataColumn("Long Zona Neutra", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLong_Zona_Neutra)
            Me.columnHilo_de_Contacto = New Global.System.Data.DataColumn("Hilo de Contacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHilo_de_Contacto)
            Me.columnSustentador = New Global.System.Data.DataColumn("Sustentador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSustentador)
            Me.columnC_de_Protección_Aérea = New Global.System.Data.DataColumn("C de Protección Aérea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC_de_Protección_Aérea)
            Me.columnCable_de_Tierra = New Global.System.Data.DataColumn("Cable de Tierra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCable_de_Tierra)
            Me._columnFeeder__ = New Global.System.Data.DataColumn("Feeder +", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnFeeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFeeder__")
            Me._columnFeeder__.ExtendedProperties.Add("Generator_UserColumnName", "Feeder +")
            MyBase.Columns.Add(Me._columnFeeder__)
            Me.__columnFeeder__ = New Global.System.Data.DataColumn("Feeder -", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.__columnFeeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "__columnFeeder__")
            Me.__columnFeeder__.ExtendedProperties.Add("Generator_UserColumnName", "Feeder -")
            MyBase.Columns.Add(Me.__columnFeeder__)
            Me.columnPunto_fijo = New Global.System.Data.DataColumn("Punto fijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPunto_fijo)
            Me.columnPéndola = New Global.System.Data.DataColumn("Péndola", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPéndola)
            Me.columnAnclaje = New Global.System.Data.DataColumn("Anclaje", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnclaje)
            Me._columnPosición_Feeder__ = New Global.System.Data.DataColumn("Posición Feeder +", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPosición_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPosición_Feeder__")
            Me._columnPosición_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Posición Feeder +")
            MyBase.Columns.Add(Me._columnPosición_Feeder__)
            Me.__columnPosición_Feeder__ = New Global.System.Data.DataColumn("Posición Feeder -", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.__columnPosición_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "__columnPosición_Feeder__")
            Me.__columnPosición_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Posición Feeder -")
            MyBase.Columns.Add(Me.__columnPosición_Feeder__)
            Me.columnNúm_HC = New Global.System.Data.DataColumn("Núm HC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNúm_HC)
            Me.columnNúm_CdPA = New Global.System.Data.DataColumn("Núm CdPA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNúm_CdPA)
            Me._columnNúm_Feeder__ = New Global.System.Data.DataColumn("Núm Feeder +", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnNúm_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnNúm_Feeder__")
            Me._columnNúm_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Núm Feeder +")
            MyBase.Columns.Add(Me._columnNúm_Feeder__)
            Me.__columnNúm_Feeder__ = New Global.System.Data.DataColumn("Núm Feeder -", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me.__columnNúm_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "__columnNúm_Feeder__")
            Me.__columnNúm_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Núm Feeder -")
            MyBase.Columns.Add(Me.__columnNúm_Feeder__)
            Me.columnTensión_HC = New Global.System.Data.DataColumn("Tensión HC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTensión_HC)
            Me.columnTensión_sustentador = New Global.System.Data.DataColumn("Tensión sustentador", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTensión_sustentador)
            Me.columnTensión_CdPA = New Global.System.Data.DataColumn("Tensión CdPA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTensión_CdPA)
            Me._columnTensión_Feeder__ = New Global.System.Data.DataColumn("Tensión Feeder +", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnTensión_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnTensión_Feeder__")
            Me._columnTensión_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Tensión Feeder +")
            MyBase.Columns.Add(Me._columnTensión_Feeder__)
            Me.__columnTensión_Feeder__ = New Global.System.Data.DataColumn("Tensión Feeder -", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me.__columnTensión_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "__columnTensión_Feeder__")
            Me.__columnTensión_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Tensión Feeder -")
            MyBase.Columns.Add(Me.__columnTensión_Feeder__)
            Me.columnTensión_punto_fijo = New Global.System.Data.DataColumn("Tensión punto fijo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTensión_punto_fijo)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me._columnAdm_Línea = New Global.System.Data.DataColumn("Adm/Línea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Línea.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Línea")
            Me._columnAdm_Línea.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Línea")
            MyBase.Columns.Add(Me._columnAdm_Línea)
            Me.columnCódigo = New Global.System.Data.DataColumn("Código", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCódigo)
            Me.columnNumeración = New Global.System.Data.DataColumn("Numeración", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeración)
            Me.columnTipo_macizo = New Global.System.Data.DataColumn("Tipo macizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_macizo)
            Me._columnAdm_Línea_postes = New Global.System.Data.DataColumn("Adm/Línea postes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Línea_postes.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Línea_postes")
            Me._columnAdm_Línea_postes.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Línea postes")
            MyBase.Columns.Add(Me._columnAdm_Línea_postes)
            Me.columnTubo_de_ménsula = New Global.System.Data.DataColumn("Tubo de ménsula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTubo_de_ménsula)
            Me.columnTubo_tirante = New Global.System.Data.DataColumn("Tubo tirante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTubo_tirante)
            Me.columnCola_de_anclaje = New Global.System.Data.DataColumn("Cola de anclaje", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCola_de_anclaje)
            Me._columnAislador_Feeder__ = New Global.System.Data.DataColumn("Aislador Feeder +", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAislador_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAislador_Feeder__")
            Me._columnAislador_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Aislador Feeder +")
            MyBase.Columns.Add(Me._columnAislador_Feeder__)
            Me.__columnAislador_Feeder__ = New Global.System.Data.DataColumn("Aislador Feeder -", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.__columnAislador_Feeder__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "__columnAislador_Feeder__")
            Me.__columnAislador_Feeder__.ExtendedProperties.Add("Generator_UserColumnName", "Aislador Feeder -")
            MyBase.Columns.Add(Me.__columnAislador_Feeder__)
            Me.columnDistancia_apoyo_y_1ª_péndola = New Global.System.Data.DataColumn("Distancia apoyo y 1ª péndola", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_apoyo_y_1ª_péndola)
            Me.columnDistancia_1ª_y_2ª_péndola = New Global.System.Data.DataColumn("Distancia 1ª y 2ª péndola", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_1ª_y_2ª_péndola)
            Me.columnDistancia_máx_entre_péndolas = New Global.System.Data.DataColumn("Distancia máx entre péndolas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistancia_máx_entre_péndolas)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNombre_catenaria}, true))
            Me.columnNombre_catenaria.AllowDBNull = false
            Me.columnNombre_catenaria.Unique = true
            Me.columnNombre_catenaria.MaxLength = 255
            Me.columnSistema.MaxLength = 255
            Me.columnElevación_máx_pantógrafo.MaxLength = 255
            Me.columnHilo_de_Contacto.MaxLength = 255
            Me.columnSustentador.MaxLength = 255
            Me.columnC_de_Protección_Aérea.MaxLength = 255
            Me.columnCable_de_Tierra.MaxLength = 255
            Me._columnFeeder__.MaxLength = 255
            Me.__columnFeeder__.MaxLength = 255
            Me.columnPunto_fijo.MaxLength = 255
            Me.columnPéndola.MaxLength = 255
            Me.columnAnclaje.MaxLength = 255
            Me._columnPosición_Feeder__.MaxLength = 255
            Me.__columnPosición_Feeder__.MaxLength = 255
            Me.columnTipo.MaxLength = 255
            Me._columnAdm_Línea.MaxLength = 255
            Me.columnCódigo.MaxLength = 255
            Me.columnNumeración.MaxLength = 255
            Me.columnTipo_macizo.MaxLength = 255
            Me._columnAdm_Línea_postes.MaxLength = 255
            Me.columnTubo_de_ménsula.MaxLength = 255
            Me.columnTubo_tirante.MaxLength = 255
            Me.columnCola_de_anclaje.MaxLength = 255
            Me._columnAislador_Feeder__.MaxLength = 255
            Me.__columnAislador_Feeder__.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosRow() As DatosRow
            Return CType(Me.NewRow,DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosRowChanged(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosRowChanging(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleted(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosRowDeleting(Me, New DatosRowChangeEvent(CType(e.Row,DatosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosRow(ByVal row As DatosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ElectrificaciónDataTable
        Inherits Global.System.Data.TypedTableBase(Of ElectrificaciónRow)
        
        Private columnAlimentación As Global.System.Data.DataColumn
        
        Private columnSistema As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Electrificación"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlimentaciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlimentación
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SistemaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSistema
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ElectrificaciónRow
            Get
                Return CType(Me.Rows(index),ElectrificaciónRow)
            End Get
        End Property
        
        Public Event ElectrificaciónRowChanging As ElectrificaciónRowChangeEventHandler
        
        Public Event ElectrificaciónRowChanged As ElectrificaciónRowChangeEventHandler
        
        Public Event ElectrificaciónRowDeleting As ElectrificaciónRowChangeEventHandler
        
        Public Event ElectrificaciónRowDeleted As ElectrificaciónRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddElectrificaciónRow(ByVal row As ElectrificaciónRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddElectrificaciónRow(ByVal Alimentación As String, ByVal Sistema As String) As ElectrificaciónRow
            Dim rowElectrificaciónRow As ElectrificaciónRow = CType(Me.NewRow,ElectrificaciónRow)
            Dim columnValuesArray() As Object = New Object() {Alimentación, Sistema}
            rowElectrificaciónRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowElectrificaciónRow)
            Return rowElectrificaciónRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ElectrificaciónDataTable = CType(MyBase.Clone,ElectrificaciónDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ElectrificaciónDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAlimentación = MyBase.Columns("Alimentación")
            Me.columnSistema = MyBase.Columns("Sistema")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAlimentación = New Global.System.Data.DataColumn("Alimentación", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlimentación)
            Me.columnSistema = New Global.System.Data.DataColumn("Sistema", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSistema)
            Me.columnAlimentación.MaxLength = 255
            Me.columnSistema.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewElectrificaciónRow() As ElectrificaciónRow
            Return CType(Me.NewRow,ElectrificaciónRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ElectrificaciónRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ElectrificaciónRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ElectrificaciónRowChangedEvent) Is Nothing) Then
                RaiseEvent ElectrificaciónRowChanged(Me, New ElectrificaciónRowChangeEvent(CType(e.Row,ElectrificaciónRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ElectrificaciónRowChangingEvent) Is Nothing) Then
                RaiseEvent ElectrificaciónRowChanging(Me, New ElectrificaciónRowChangeEvent(CType(e.Row,ElectrificaciónRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ElectrificaciónRowDeletedEvent) Is Nothing) Then
                RaiseEvent ElectrificaciónRowDeleted(Me, New ElectrificaciónRowChangeEvent(CType(e.Row,ElectrificaciónRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ElectrificaciónRowDeletingEvent) Is Nothing) Then
                RaiseEvent ElectrificaciónRowDeleting(Me, New ElectrificaciónRowChangeEvent(CType(e.Row,ElectrificaciónRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveElectrificaciónRow(ByVal row As ElectrificaciónRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ElectrificaciónDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MacizosDataTable
        Inherits Global.System.Data.TypedTableBase(Of MacizosRow)
        
        Private columnMacizo As Global.System.Data.DataColumn
        
        Private _columnAdm_Lín As Global.System.Data.DataColumn
        
        Private _columnD_T As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private _columna__m_ As Global.System.Data.DataColumn
        
        Private _columnb__m_ As Global.System.Data.DataColumn
        
        Private _columnd__m_ As Global.System.Data.DataColumn
        
        Private _columnh__m_ As Global.System.Data.DataColumn
        
        Private _columnVolúmen_macizo_1__m3_ As Global.System.Data.DataColumn
        
        Private _columnat__m_ As Global.System.Data.DataColumn
        
        Private _columnbt__m_ As Global.System.Data.DataColumn
        
        Private _columnht__m_ As Global.System.Data.DataColumn
        
        Private _columnVolúmen_macizo_2__m3_ As Global.System.Data.DataColumn
        
        Private _columnVolúmen_TOTAL__m3_ As Global.System.Data.DataColumn
        
        Private _columndiámetro__m_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Macizos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MacizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMacizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LínColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Lín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _D_TColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnD_T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _d__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnd__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _h__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnh__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Volúmen_macizo_1__m3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnVolúmen_macizo_1__m3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _at__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnat__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _bt__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnbt__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ht__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnht__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Volúmen_macizo_2__m3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnVolúmen_macizo_2__m3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Volúmen_TOTAL__m3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnVolúmen_TOTAL__m3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _diámetro__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columndiámetro__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MacizosRow
            Get
                Return CType(Me.Rows(index),MacizosRow)
            End Get
        End Property
        
        Public Event MacizosRowChanging As MacizosRowChangeEventHandler
        
        Public Event MacizosRowChanged As MacizosRowChangeEventHandler
        
        Public Event MacizosRowDeleting As MacizosRowChangeEventHandler
        
        Public Event MacizosRowDeleted As MacizosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMacizosRow(ByVal row As MacizosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMacizosRow(ByVal Macizo As String, ByVal _Adm_Lín As String, ByVal _D_T As String, ByVal Tipo As String, ByVal _a__m_ As Double, ByVal _b__m_ As Double, ByVal _d__m_ As Double, ByVal _h__m_ As Double, ByVal _Volúmen_macizo_1__m3_ As Double, ByVal _at__m_ As Double, ByVal _bt__m_ As Double, ByVal _ht__m_ As Double, ByVal _Volúmen_macizo_2__m3_ As Double, ByVal _Volúmen_TOTAL__m3_ As Double, ByVal _diámetro__m_ As Double) As MacizosRow
            Dim rowMacizosRow As MacizosRow = CType(Me.NewRow,MacizosRow)
            Dim columnValuesArray() As Object = New Object() {Macizo, _Adm_Lín, _D_T, Tipo, _a__m_, _b__m_, _d__m_, _h__m_, _Volúmen_macizo_1__m3_, _at__m_, _bt__m_, _ht__m_, _Volúmen_macizo_2__m3_, _Volúmen_TOTAL__m3_, _diámetro__m_}
            rowMacizosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMacizosRow)
            Return rowMacizosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MacizosDataTable = CType(MyBase.Clone,MacizosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MacizosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMacizo = MyBase.Columns("Macizo")
            Me._columnAdm_Lín = MyBase.Columns("Adm/Lín")
            Me._columnD_T = MyBase.Columns("D/T")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columnd__m_ = MyBase.Columns("d (m)")
            Me._columnh__m_ = MyBase.Columns("h (m)")
            Me._columnVolúmen_macizo_1__m3_ = MyBase.Columns("Volúmen macizo 1 (m3)")
            Me._columnat__m_ = MyBase.Columns("at (m)")
            Me._columnbt__m_ = MyBase.Columns("bt (m)")
            Me._columnht__m_ = MyBase.Columns("ht (m)")
            Me._columnVolúmen_macizo_2__m3_ = MyBase.Columns("Volúmen macizo 2 (m3)")
            Me._columnVolúmen_TOTAL__m3_ = MyBase.Columns("Volúmen TOTAL (m3)")
            Me._columndiámetro__m_ = MyBase.Columns("diámetro (m)")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMacizo = New Global.System.Data.DataColumn("Macizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMacizo)
            Me._columnAdm_Lín = New Global.System.Data.DataColumn("Adm/Lín", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Lín")
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Lín")
            MyBase.Columns.Add(Me._columnAdm_Lín)
            Me._columnD_T = New Global.System.Data.DataColumn("D/T", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnD_T.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnD_T")
            Me._columnD_T.ExtendedProperties.Add("Generator_UserColumnName", "D/T")
            MyBase.Columns.Add(Me._columnD_T)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me._columna__m_ = New Global.System.Data.DataColumn("a (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New Global.System.Data.DataColumn("b (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columnd__m_ = New Global.System.Data.DataColumn("d (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnd__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnd__m_")
            Me._columnd__m_.ExtendedProperties.Add("Generator_UserColumnName", "d (m)")
            MyBase.Columns.Add(Me._columnd__m_)
            Me._columnh__m_ = New Global.System.Data.DataColumn("h (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnh__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnh__m_")
            Me._columnh__m_.ExtendedProperties.Add("Generator_UserColumnName", "h (m)")
            MyBase.Columns.Add(Me._columnh__m_)
            Me._columnVolúmen_macizo_1__m3_ = New Global.System.Data.DataColumn("Volúmen macizo 1 (m3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnVolúmen_macizo_1__m3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVolúmen_macizo_1__m3_")
            Me._columnVolúmen_macizo_1__m3_.ExtendedProperties.Add("Generator_UserColumnName", "Volúmen macizo 1 (m3)")
            MyBase.Columns.Add(Me._columnVolúmen_macizo_1__m3_)
            Me._columnat__m_ = New Global.System.Data.DataColumn("at (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnat__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnat__m_")
            Me._columnat__m_.ExtendedProperties.Add("Generator_UserColumnName", "at (m)")
            MyBase.Columns.Add(Me._columnat__m_)
            Me._columnbt__m_ = New Global.System.Data.DataColumn("bt (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnbt__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnbt__m_")
            Me._columnbt__m_.ExtendedProperties.Add("Generator_UserColumnName", "bt (m)")
            MyBase.Columns.Add(Me._columnbt__m_)
            Me._columnht__m_ = New Global.System.Data.DataColumn("ht (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnht__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnht__m_")
            Me._columnht__m_.ExtendedProperties.Add("Generator_UserColumnName", "ht (m)")
            MyBase.Columns.Add(Me._columnht__m_)
            Me._columnVolúmen_macizo_2__m3_ = New Global.System.Data.DataColumn("Volúmen macizo 2 (m3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnVolúmen_macizo_2__m3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVolúmen_macizo_2__m3_")
            Me._columnVolúmen_macizo_2__m3_.ExtendedProperties.Add("Generator_UserColumnName", "Volúmen macizo 2 (m3)")
            MyBase.Columns.Add(Me._columnVolúmen_macizo_2__m3_)
            Me._columnVolúmen_TOTAL__m3_ = New Global.System.Data.DataColumn("Volúmen TOTAL (m3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnVolúmen_TOTAL__m3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVolúmen_TOTAL__m3_")
            Me._columnVolúmen_TOTAL__m3_.ExtendedProperties.Add("Generator_UserColumnName", "Volúmen TOTAL (m3)")
            MyBase.Columns.Add(Me._columnVolúmen_TOTAL__m3_)
            Me._columndiámetro__m_ = New Global.System.Data.DataColumn("diámetro (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columndiámetro__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columndiámetro__m_")
            Me._columndiámetro__m_.ExtendedProperties.Add("Generator_UserColumnName", "diámetro (m)")
            MyBase.Columns.Add(Me._columndiámetro__m_)
            Me.columnMacizo.MaxLength = 255
            Me._columnAdm_Lín.MaxLength = 255
            Me._columnD_T.MaxLength = 255
            Me.columnTipo.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMacizosRow() As MacizosRow
            Return CType(Me.NewRow,MacizosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MacizosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MacizosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MacizosRowChangedEvent) Is Nothing) Then
                RaiseEvent MacizosRowChanged(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MacizosRowChangingEvent) Is Nothing) Then
                RaiseEvent MacizosRowChanging(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MacizosRowDeletedEvent) Is Nothing) Then
                RaiseEvent MacizosRowDeleted(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MacizosRowDeletingEvent) Is Nothing) Then
                RaiseEvent MacizosRowDeleting(Me, New MacizosRowChangeEvent(CType(e.Row,MacizosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMacizosRow(ByVal row As MacizosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MacizosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PostesDataTable
        Inherits Global.System.Data.TypedTableBase(Of PostesRow)
        
        Private columnPoste As Global.System.Data.DataColumn
        
        Private _columnAdm_Lín As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private _columnt__m_ As Global.System.Data.DataColumn
        
        Private _columnb__m_ As Global.System.Data.DataColumn
        
        Private _columns__m_ As Global.System.Data.DataColumn
        
        Private columnPeso As Global.System.Data.DataColumn
        
        Private _columna__m_ As Global.System.Data.DataColumn
        
        Private _columnHtot__m_ As Global.System.Data.DataColumn
        
        Private _columnH__m_ As Global.System.Data.DataColumn
        
        Private columntg As Global.System.Data.DataColumn
        
        Private columnK As Global.System.Data.DataColumn
        
        Private _columnSep__m_ As Global.System.Data.DataColumn
        
        Private _columnWyy__cm3_ As Global.System.Data.DataColumn
        
        Private _columnWxx__cm3_ As Global.System.Data.DataColumn
        
        Private columnWr As Global.System.Data.DataColumn
        
        Private columnM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Postes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LínColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Lín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnt__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _s__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columns__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Htot__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnHtot__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _H__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnH__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Sep__m_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSep__m_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Wyy__cm3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnWyy__cm3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Wxx__cm3_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnWxx__cm3_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PostesRow
            Get
                Return CType(Me.Rows(index),PostesRow)
            End Get
        End Property
        
        Public Event PostesRowChanging As PostesRowChangeEventHandler
        
        Public Event PostesRowChanged As PostesRowChangeEventHandler
        
        Public Event PostesRowDeleting As PostesRowChangeEventHandler
        
        Public Event PostesRowDeleted As PostesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPostesRow(ByVal row As PostesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPostesRow( _
                    ByVal Poste As String,  _
                    ByVal _Adm_Lín As String,  _
                    ByVal Tipo As String,  _
                    ByVal _t__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _s__m_ As Double,  _
                    ByVal Peso As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _Htot__m_ As Double,  _
                    ByVal _H__m_ As Double,  _
                    ByVal tg As Double,  _
                    ByVal K As Double,  _
                    ByVal _Sep__m_ As Double,  _
                    ByVal _Wyy__cm3_ As Double,  _
                    ByVal _Wxx__cm3_ As Double,  _
                    ByVal Wr As Double,  _
                    ByVal M As Double) As PostesRow
            Dim rowPostesRow As PostesRow = CType(Me.NewRow,PostesRow)
            Dim columnValuesArray() As Object = New Object() {Poste, _Adm_Lín, Tipo, _t__m_, _b__m_, _s__m_, Peso, _a__m_, _Htot__m_, _H__m_, tg, K, _Sep__m_, _Wyy__cm3_, _Wxx__cm3_, Wr, M}
            rowPostesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPostesRow)
            Return rowPostesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PostesDataTable = CType(MyBase.Clone,PostesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PostesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPoste = MyBase.Columns("Poste")
            Me._columnAdm_Lín = MyBase.Columns("Adm/Lín")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me._columnt__m_ = MyBase.Columns("t (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columns__m_ = MyBase.Columns("s (m)")
            Me.columnPeso = MyBase.Columns("Peso")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnHtot__m_ = MyBase.Columns("Htot (m)")
            Me._columnH__m_ = MyBase.Columns("H (m)")
            Me.columntg = MyBase.Columns("tg")
            Me.columnK = MyBase.Columns("K")
            Me._columnSep__m_ = MyBase.Columns("Sep (m)")
            Me._columnWyy__cm3_ = MyBase.Columns("Wyy (cm3)")
            Me._columnWxx__cm3_ = MyBase.Columns("Wxx (cm3)")
            Me.columnWr = MyBase.Columns("Wr")
            Me.columnM = MyBase.Columns("M")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPoste = New Global.System.Data.DataColumn("Poste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoste)
            Me._columnAdm_Lín = New Global.System.Data.DataColumn("Adm/Lín", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Lín")
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Lín")
            MyBase.Columns.Add(Me._columnAdm_Lín)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me._columnt__m_ = New Global.System.Data.DataColumn("t (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnt__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__m_")
            Me._columnt__m_.ExtendedProperties.Add("Generator_UserColumnName", "t (m)")
            MyBase.Columns.Add(Me._columnt__m_)
            Me._columnb__m_ = New Global.System.Data.DataColumn("b (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columns__m_ = New Global.System.Data.DataColumn("s (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columns__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columns__m_")
            Me._columns__m_.ExtendedProperties.Add("Generator_UserColumnName", "s (m)")
            MyBase.Columns.Add(Me._columns__m_)
            Me.columnPeso = New Global.System.Data.DataColumn("Peso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeso)
            Me._columna__m_ = New Global.System.Data.DataColumn("a (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnHtot__m_ = New Global.System.Data.DataColumn("Htot (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnHtot__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnHtot__m_")
            Me._columnHtot__m_.ExtendedProperties.Add("Generator_UserColumnName", "Htot (m)")
            MyBase.Columns.Add(Me._columnHtot__m_)
            Me._columnH__m_ = New Global.System.Data.DataColumn("H (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnH__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnH__m_")
            Me._columnH__m_.ExtendedProperties.Add("Generator_UserColumnName", "H (m)")
            MyBase.Columns.Add(Me._columnH__m_)
            Me.columntg = New Global.System.Data.DataColumn("tg", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntg)
            Me.columnK = New Global.System.Data.DataColumn("K", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK)
            Me._columnSep__m_ = New Global.System.Data.DataColumn("Sep (m)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSep__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSep__m_")
            Me._columnSep__m_.ExtendedProperties.Add("Generator_UserColumnName", "Sep (m)")
            MyBase.Columns.Add(Me._columnSep__m_)
            Me._columnWyy__cm3_ = New Global.System.Data.DataColumn("Wyy (cm3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnWyy__cm3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnWyy__cm3_")
            Me._columnWyy__cm3_.ExtendedProperties.Add("Generator_UserColumnName", "Wyy (cm3)")
            MyBase.Columns.Add(Me._columnWyy__cm3_)
            Me._columnWxx__cm3_ = New Global.System.Data.DataColumn("Wxx (cm3)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnWxx__cm3_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnWxx__cm3_")
            Me._columnWxx__cm3_.ExtendedProperties.Add("Generator_UserColumnName", "Wxx (cm3)")
            MyBase.Columns.Add(Me._columnWxx__cm3_)
            Me.columnWr = New Global.System.Data.DataColumn("Wr", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWr)
            Me.columnM = New Global.System.Data.DataColumn("M", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM)
            Me.columnPoste.MaxLength = 255
            Me._columnAdm_Lín.MaxLength = 255
            Me.columnTipo.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPostesRow() As PostesRow
            Return CType(Me.NewRow,PostesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PostesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PostesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PostesRowChangedEvent) Is Nothing) Then
                RaiseEvent PostesRowChanged(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PostesRowChangingEvent) Is Nothing) Then
                RaiseEvent PostesRowChanging(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PostesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PostesRowDeleted(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PostesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PostesRowDeleting(Me, New PostesRowChangeEvent(CType(e.Row,PostesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePostesRow(ByVal row As PostesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PostesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_AnclajeDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_AnclajeRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor Anclaje"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_AnclajeRow
            Get
                Return CType(Me.Rows(index),Conductor_AnclajeRow)
            End Get
        End Property
        
        Public Event Conductor_AnclajeRowChanging As Conductor_AnclajeRowChangeEventHandler
        
        Public Event Conductor_AnclajeRowChanged As Conductor_AnclajeRowChangeEventHandler
        
        Public Event Conductor_AnclajeRowDeleting As Conductor_AnclajeRowChangeEventHandler
        
        Public Event Conductor_AnclajeRowDeleted As Conductor_AnclajeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_AnclajeRow(ByVal row As Conductor_AnclajeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_AnclajeRow(ByVal Tipo As String, ByVal Material As String) As Conductor_AnclajeRow
            Dim rowConductor_AnclajeRow As Conductor_AnclajeRow = CType(Me.NewRow,Conductor_AnclajeRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_AnclajeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_AnclajeRow)
            Return rowConductor_AnclajeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_AnclajeDataTable = CType(MyBase.Clone,Conductor_AnclajeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_AnclajeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_AnclajeRow() As Conductor_AnclajeRow
            Return CType(Me.NewRow,Conductor_AnclajeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_AnclajeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_AnclajeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_AnclajeRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_AnclajeRowChanged(Me, New Conductor_AnclajeRowChangeEvent(CType(e.Row,Conductor_AnclajeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_AnclajeRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_AnclajeRowChanging(Me, New Conductor_AnclajeRowChangeEvent(CType(e.Row,Conductor_AnclajeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_AnclajeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_AnclajeRowDeleted(Me, New Conductor_AnclajeRowChangeEvent(CType(e.Row,Conductor_AnclajeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_AnclajeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_AnclajeRowDeleting(Me, New Conductor_AnclajeRowChangeEvent(CType(e.Row,Conductor_AnclajeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_AnclajeRow(ByVal row As Conductor_AnclajeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_AnclajeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_Cable_de_TierraDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_Cable_de_TierraRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor Cable de Tierra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_Cable_de_TierraRow
            Get
                Return CType(Me.Rows(index),Conductor_Cable_de_TierraRow)
            End Get
        End Property
        
        Public Event Conductor_Cable_de_TierraRowChanging As Conductor_Cable_de_TierraRowChangeEventHandler
        
        Public Event Conductor_Cable_de_TierraRowChanged As Conductor_Cable_de_TierraRowChangeEventHandler
        
        Public Event Conductor_Cable_de_TierraRowDeleting As Conductor_Cable_de_TierraRowChangeEventHandler
        
        Public Event Conductor_Cable_de_TierraRowDeleted As Conductor_Cable_de_TierraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_Cable_de_TierraRow(ByVal row As Conductor_Cable_de_TierraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_Cable_de_TierraRow(ByVal Tipo As String, ByVal Material As String) As Conductor_Cable_de_TierraRow
            Dim rowConductor_Cable_de_TierraRow As Conductor_Cable_de_TierraRow = CType(Me.NewRow,Conductor_Cable_de_TierraRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_Cable_de_TierraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_Cable_de_TierraRow)
            Return rowConductor_Cable_de_TierraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_Cable_de_TierraDataTable = CType(MyBase.Clone,Conductor_Cable_de_TierraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_Cable_de_TierraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_Cable_de_TierraRow() As Conductor_Cable_de_TierraRow
            Return CType(Me.NewRow,Conductor_Cable_de_TierraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_Cable_de_TierraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_Cable_de_TierraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_Cable_de_TierraRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_Cable_de_TierraRowChanged(Me, New Conductor_Cable_de_TierraRowChangeEvent(CType(e.Row,Conductor_Cable_de_TierraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_Cable_de_TierraRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_Cable_de_TierraRowChanging(Me, New Conductor_Cable_de_TierraRowChangeEvent(CType(e.Row,Conductor_Cable_de_TierraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_Cable_de_TierraRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_Cable_de_TierraRowDeleted(Me, New Conductor_Cable_de_TierraRowChangeEvent(CType(e.Row,Conductor_Cable_de_TierraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_Cable_de_TierraRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_Cable_de_TierraRowDeleting(Me, New Conductor_Cable_de_TierraRowChangeEvent(CType(e.Row,Conductor_Cable_de_TierraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_Cable_de_TierraRow(ByVal row As Conductor_Cable_de_TierraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_Cable_de_TierraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_CDPADataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_CDPARow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor CDPA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_CDPARow
            Get
                Return CType(Me.Rows(index),Conductor_CDPARow)
            End Get
        End Property
        
        Public Event Conductor_CDPARowChanging As Conductor_CDPARowChangeEventHandler
        
        Public Event Conductor_CDPARowChanged As Conductor_CDPARowChangeEventHandler
        
        Public Event Conductor_CDPARowDeleting As Conductor_CDPARowChangeEventHandler
        
        Public Event Conductor_CDPARowDeleted As Conductor_CDPARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_CDPARow(ByVal row As Conductor_CDPARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_CDPARow(ByVal Tipo As String, ByVal Material As String) As Conductor_CDPARow
            Dim rowConductor_CDPARow As Conductor_CDPARow = CType(Me.NewRow,Conductor_CDPARow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_CDPARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_CDPARow)
            Return rowConductor_CDPARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_CDPADataTable = CType(MyBase.Clone,Conductor_CDPADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_CDPADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_CDPARow() As Conductor_CDPARow
            Return CType(Me.NewRow,Conductor_CDPARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_CDPARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_CDPARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_CDPARowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_CDPARowChanged(Me, New Conductor_CDPARowChangeEvent(CType(e.Row,Conductor_CDPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_CDPARowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_CDPARowChanging(Me, New Conductor_CDPARowChangeEvent(CType(e.Row,Conductor_CDPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_CDPARowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_CDPARowDeleted(Me, New Conductor_CDPARowChangeEvent(CType(e.Row,Conductor_CDPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_CDPARowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_CDPARowDeleting(Me, New Conductor_CDPARowChangeEvent(CType(e.Row,Conductor_CDPARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_CDPARow(ByVal row As Conductor_CDPARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_CDPADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _Conductor_Feeder__DataTable
        Inherits Global.System.Data.TypedTableBase(Of _Conductor_Feeder__Row)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor Feeder -"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _Conductor_Feeder__Row
            Get
                Return CType(Me.Rows(index),_Conductor_Feeder__Row)
            End Get
        End Property
        
        Public Event _Conductor_Feeder__RowChanging As _Conductor_Feeder__RowChangeEventHandler
        
        Public Event _Conductor_Feeder__RowChanged As _Conductor_Feeder__RowChangeEventHandler
        
        Public Event _Conductor_Feeder__RowDeleting As _Conductor_Feeder__RowChangeEventHandler
        
        Public Event _Conductor_Feeder__RowDeleted As _Conductor_Feeder__RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add_Conductor_Feeder__Row(ByVal row As _Conductor_Feeder__Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add_Conductor_Feeder__Row(ByVal Tipo As String, ByVal Material As String) As _Conductor_Feeder__Row
            Dim row_Conductor_Feeder__Row As _Conductor_Feeder__Row = CType(Me.NewRow,_Conductor_Feeder__Row)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            row_Conductor_Feeder__Row.ItemArray = columnValuesArray
            Me.Rows.Add(row_Conductor_Feeder__Row)
            Return row_Conductor_Feeder__Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _Conductor_Feeder__DataTable = CType(MyBase.Clone,_Conductor_Feeder__DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _Conductor_Feeder__DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tableConductor_Feeder__")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Conductor Feeder -")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New_Conductor_Feeder__Row() As _Conductor_Feeder__Row
            Return CType(Me.NewRow,_Conductor_Feeder__Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _Conductor_Feeder__Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_Conductor_Feeder__Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._Conductor_Feeder__RowChangedEvent) Is Nothing) Then
                RaiseEvent _Conductor_Feeder__RowChanged(Me, New _Conductor_Feeder__RowChangeEvent(CType(e.Row,_Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._Conductor_Feeder__RowChangingEvent) Is Nothing) Then
                RaiseEvent _Conductor_Feeder__RowChanging(Me, New _Conductor_Feeder__RowChangeEvent(CType(e.Row,_Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._Conductor_Feeder__RowDeletedEvent) Is Nothing) Then
                RaiseEvent _Conductor_Feeder__RowDeleted(Me, New _Conductor_Feeder__RowChangeEvent(CType(e.Row,_Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._Conductor_Feeder__RowDeletingEvent) Is Nothing) Then
                RaiseEvent _Conductor_Feeder__RowDeleting(Me, New _Conductor_Feeder__RowChangeEvent(CType(e.Row,_Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove_Conductor_Feeder__Row(ByVal row As _Conductor_Feeder__Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_Conductor_Feeder__DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class __Conductor_Feeder__DataTable
        Inherits Global.System.Data.TypedTableBase(Of __Conductor_Feeder__Row)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor Feeder +"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As __Conductor_Feeder__Row
            Get
                Return CType(Me.Rows(index),__Conductor_Feeder__Row)
            End Get
        End Property
        
        Public Event __Conductor_Feeder__RowChanging As __Conductor_Feeder__RowChangeEventHandler
        
        Public Event __Conductor_Feeder__RowChanged As __Conductor_Feeder__RowChangeEventHandler
        
        Public Event __Conductor_Feeder__RowDeleting As __Conductor_Feeder__RowChangeEventHandler
        
        Public Event __Conductor_Feeder__RowDeleted As __Conductor_Feeder__RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add__Conductor_Feeder__Row(ByVal row As __Conductor_Feeder__Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add__Conductor_Feeder__Row(ByVal Tipo As String, ByVal Material As String) As __Conductor_Feeder__Row
            Dim row__Conductor_Feeder__Row As __Conductor_Feeder__Row = CType(Me.NewRow,__Conductor_Feeder__Row)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            row__Conductor_Feeder__Row.ItemArray = columnValuesArray
            Me.Rows.Add(row__Conductor_Feeder__Row)
            Return row__Conductor_Feeder__Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As __Conductor_Feeder__DataTable = CType(MyBase.Clone,__Conductor_Feeder__DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New __Conductor_Feeder__DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
            Me.ExtendedProperties.Add("Generator_TableVarName", "__tableConductor_Feeder__")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Conductor Feeder +")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New__Conductor_Feeder__Row() As __Conductor_Feeder__Row
            Return CType(Me.NewRow,__Conductor_Feeder__Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New __Conductor_Feeder__Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(__Conductor_Feeder__Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.__Conductor_Feeder__RowChangedEvent) Is Nothing) Then
                RaiseEvent __Conductor_Feeder__RowChanged(Me, New __Conductor_Feeder__RowChangeEvent(CType(e.Row,__Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.__Conductor_Feeder__RowChangingEvent) Is Nothing) Then
                RaiseEvent __Conductor_Feeder__RowChanging(Me, New __Conductor_Feeder__RowChangeEvent(CType(e.Row,__Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.__Conductor_Feeder__RowDeletedEvent) Is Nothing) Then
                RaiseEvent __Conductor_Feeder__RowDeleted(Me, New __Conductor_Feeder__RowChangeEvent(CType(e.Row,__Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.__Conductor_Feeder__RowDeletingEvent) Is Nothing) Then
                RaiseEvent __Conductor_Feeder__RowDeleting(Me, New __Conductor_Feeder__RowChangeEvent(CType(e.Row,__Conductor_Feeder__Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove__Conductor_Feeder__Row(ByVal row As __Conductor_Feeder__Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "__Conductor_Feeder__DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_HCDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_HCRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor HC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_HCRow
            Get
                Return CType(Me.Rows(index),Conductor_HCRow)
            End Get
        End Property
        
        Public Event Conductor_HCRowChanging As Conductor_HCRowChangeEventHandler
        
        Public Event Conductor_HCRowChanged As Conductor_HCRowChangeEventHandler
        
        Public Event Conductor_HCRowDeleting As Conductor_HCRowChangeEventHandler
        
        Public Event Conductor_HCRowDeleted As Conductor_HCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_HCRow(ByVal row As Conductor_HCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_HCRow(ByVal Tipo As String, ByVal Material As String) As Conductor_HCRow
            Dim rowConductor_HCRow As Conductor_HCRow = CType(Me.NewRow,Conductor_HCRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_HCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_HCRow)
            Return rowConductor_HCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_HCDataTable = CType(MyBase.Clone,Conductor_HCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_HCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_HCRow() As Conductor_HCRow
            Return CType(Me.NewRow,Conductor_HCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_HCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_HCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_HCRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_HCRowChanged(Me, New Conductor_HCRowChangeEvent(CType(e.Row,Conductor_HCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_HCRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_HCRowChanging(Me, New Conductor_HCRowChangeEvent(CType(e.Row,Conductor_HCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_HCRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_HCRowDeleted(Me, New Conductor_HCRowChangeEvent(CType(e.Row,Conductor_HCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_HCRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_HCRowDeleting(Me, New Conductor_HCRowChangeEvent(CType(e.Row,Conductor_HCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_HCRow(ByVal row As Conductor_HCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_HCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_PendolaDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_PendolaRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor Pendola"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_PendolaRow
            Get
                Return CType(Me.Rows(index),Conductor_PendolaRow)
            End Get
        End Property
        
        Public Event Conductor_PendolaRowChanging As Conductor_PendolaRowChangeEventHandler
        
        Public Event Conductor_PendolaRowChanged As Conductor_PendolaRowChangeEventHandler
        
        Public Event Conductor_PendolaRowDeleting As Conductor_PendolaRowChangeEventHandler
        
        Public Event Conductor_PendolaRowDeleted As Conductor_PendolaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_PendolaRow(ByVal row As Conductor_PendolaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_PendolaRow(ByVal Tipo As String, ByVal Material As String) As Conductor_PendolaRow
            Dim rowConductor_PendolaRow As Conductor_PendolaRow = CType(Me.NewRow,Conductor_PendolaRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_PendolaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_PendolaRow)
            Return rowConductor_PendolaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_PendolaDataTable = CType(MyBase.Clone,Conductor_PendolaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_PendolaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_PendolaRow() As Conductor_PendolaRow
            Return CType(Me.NewRow,Conductor_PendolaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_PendolaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_PendolaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_PendolaRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_PendolaRowChanged(Me, New Conductor_PendolaRowChangeEvent(CType(e.Row,Conductor_PendolaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_PendolaRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_PendolaRowChanging(Me, New Conductor_PendolaRowChangeEvent(CType(e.Row,Conductor_PendolaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_PendolaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_PendolaRowDeleted(Me, New Conductor_PendolaRowChangeEvent(CType(e.Row,Conductor_PendolaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_PendolaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_PendolaRowDeleting(Me, New Conductor_PendolaRowChangeEvent(CType(e.Row,Conductor_PendolaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_PendolaRow(ByVal row As Conductor_PendolaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_PendolaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_punto_fijoDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_punto_fijoRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor punto fijo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_punto_fijoRow
            Get
                Return CType(Me.Rows(index),Conductor_punto_fijoRow)
            End Get
        End Property
        
        Public Event Conductor_punto_fijoRowChanging As Conductor_punto_fijoRowChangeEventHandler
        
        Public Event Conductor_punto_fijoRowChanged As Conductor_punto_fijoRowChangeEventHandler
        
        Public Event Conductor_punto_fijoRowDeleting As Conductor_punto_fijoRowChangeEventHandler
        
        Public Event Conductor_punto_fijoRowDeleted As Conductor_punto_fijoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_punto_fijoRow(ByVal row As Conductor_punto_fijoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_punto_fijoRow(ByVal Tipo As String, ByVal Material As String) As Conductor_punto_fijoRow
            Dim rowConductor_punto_fijoRow As Conductor_punto_fijoRow = CType(Me.NewRow,Conductor_punto_fijoRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_punto_fijoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_punto_fijoRow)
            Return rowConductor_punto_fijoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_punto_fijoDataTable = CType(MyBase.Clone,Conductor_punto_fijoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_punto_fijoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_punto_fijoRow() As Conductor_punto_fijoRow
            Return CType(Me.NewRow,Conductor_punto_fijoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_punto_fijoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_punto_fijoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_punto_fijoRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_punto_fijoRowChanged(Me, New Conductor_punto_fijoRowChangeEvent(CType(e.Row,Conductor_punto_fijoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_punto_fijoRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_punto_fijoRowChanging(Me, New Conductor_punto_fijoRowChangeEvent(CType(e.Row,Conductor_punto_fijoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_punto_fijoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_punto_fijoRowDeleted(Me, New Conductor_punto_fijoRowChangeEvent(CType(e.Row,Conductor_punto_fijoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_punto_fijoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_punto_fijoRowDeleting(Me, New Conductor_punto_fijoRowChangeEvent(CType(e.Row,Conductor_punto_fijoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_punto_fijoRow(ByVal row As Conductor_punto_fijoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_punto_fijoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Conductor_SustentadorDataTable
        Inherits Global.System.Data.TypedTableBase(Of Conductor_SustentadorRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Conductor Sustentador"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Conductor_SustentadorRow
            Get
                Return CType(Me.Rows(index),Conductor_SustentadorRow)
            End Get
        End Property
        
        Public Event Conductor_SustentadorRowChanging As Conductor_SustentadorRowChangeEventHandler
        
        Public Event Conductor_SustentadorRowChanged As Conductor_SustentadorRowChangeEventHandler
        
        Public Event Conductor_SustentadorRowDeleting As Conductor_SustentadorRowChangeEventHandler
        
        Public Event Conductor_SustentadorRowDeleted As Conductor_SustentadorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConductor_SustentadorRow(ByVal row As Conductor_SustentadorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConductor_SustentadorRow(ByVal Tipo As String, ByVal Material As String) As Conductor_SustentadorRow
            Dim rowConductor_SustentadorRow As Conductor_SustentadorRow = CType(Me.NewRow,Conductor_SustentadorRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Material}
            rowConductor_SustentadorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConductor_SustentadorRow)
            Return rowConductor_SustentadorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Conductor_SustentadorDataTable = CType(MyBase.Clone,Conductor_SustentadorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Conductor_SustentadorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMaterial = MyBase.Columns("Material")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnTipo.MaxLength = 255
            Me.columnMaterial.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConductor_SustentadorRow() As Conductor_SustentadorRow
            Return CType(Me.NewRow,Conductor_SustentadorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Conductor_SustentadorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Conductor_SustentadorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Conductor_SustentadorRowChangedEvent) Is Nothing) Then
                RaiseEvent Conductor_SustentadorRowChanged(Me, New Conductor_SustentadorRowChangeEvent(CType(e.Row,Conductor_SustentadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Conductor_SustentadorRowChangingEvent) Is Nothing) Then
                RaiseEvent Conductor_SustentadorRowChanging(Me, New Conductor_SustentadorRowChangeEvent(CType(e.Row,Conductor_SustentadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Conductor_SustentadorRowDeletedEvent) Is Nothing) Then
                RaiseEvent Conductor_SustentadorRowDeleted(Me, New Conductor_SustentadorRowChangeEvent(CType(e.Row,Conductor_SustentadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Conductor_SustentadorRowDeletingEvent) Is Nothing) Then
                RaiseEvent Conductor_SustentadorRowDeleting(Me, New Conductor_SustentadorRowChangeEvent(CType(e.Row,Conductor_SustentadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConductor_SustentadorRow(ByVal row As Conductor_SustentadorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Conductor_SustentadorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Electrificación_ConsultaDataTable
        Inherits Global.System.Data.TypedTableBase(Of Electrificación_ConsultaRow)
        
        Private columnSistema As Global.System.Data.DataColumn
        
        Private columnAlimentación As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Electrificación Consulta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SistemaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSistema
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlimentaciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlimentación
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Electrificación_ConsultaRow
            Get
                Return CType(Me.Rows(index),Electrificación_ConsultaRow)
            End Get
        End Property
        
        Public Event Electrificación_ConsultaRowChanging As Electrificación_ConsultaRowChangeEventHandler
        
        Public Event Electrificación_ConsultaRowChanged As Electrificación_ConsultaRowChangeEventHandler
        
        Public Event Electrificación_ConsultaRowDeleting As Electrificación_ConsultaRowChangeEventHandler
        
        Public Event Electrificación_ConsultaRowDeleted As Electrificación_ConsultaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddElectrificación_ConsultaRow(ByVal row As Electrificación_ConsultaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddElectrificación_ConsultaRow(ByVal Sistema As String, ByVal Alimentación As String) As Electrificación_ConsultaRow
            Dim rowElectrificación_ConsultaRow As Electrificación_ConsultaRow = CType(Me.NewRow,Electrificación_ConsultaRow)
            Dim columnValuesArray() As Object = New Object() {Sistema, Alimentación}
            rowElectrificación_ConsultaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowElectrificación_ConsultaRow)
            Return rowElectrificación_ConsultaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Electrificación_ConsultaDataTable = CType(MyBase.Clone,Electrificación_ConsultaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Electrificación_ConsultaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSistema = MyBase.Columns("Sistema")
            Me.columnAlimentación = MyBase.Columns("Alimentación")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSistema = New Global.System.Data.DataColumn("Sistema", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSistema)
            Me.columnAlimentación = New Global.System.Data.DataColumn("Alimentación", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlimentación)
            Me.columnSistema.MaxLength = 255
            Me.columnAlimentación.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewElectrificación_ConsultaRow() As Electrificación_ConsultaRow
            Return CType(Me.NewRow,Electrificación_ConsultaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Electrificación_ConsultaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Electrificación_ConsultaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Electrificación_ConsultaRowChangedEvent) Is Nothing) Then
                RaiseEvent Electrificación_ConsultaRowChanged(Me, New Electrificación_ConsultaRowChangeEvent(CType(e.Row,Electrificación_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Electrificación_ConsultaRowChangingEvent) Is Nothing) Then
                RaiseEvent Electrificación_ConsultaRowChanging(Me, New Electrificación_ConsultaRowChangeEvent(CType(e.Row,Electrificación_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Electrificación_ConsultaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Electrificación_ConsultaRowDeleted(Me, New Electrificación_ConsultaRowChangeEvent(CType(e.Row,Electrificación_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Electrificación_ConsultaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Electrificación_ConsultaRowDeleting(Me, New Electrificación_ConsultaRowChangeEvent(CType(e.Row,Electrificación_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveElectrificación_ConsultaRow(ByVal row As Electrificación_ConsultaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Electrificación_ConsultaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Macizos_ConsultaDataTable
        Inherits Global.System.Data.TypedTableBase(Of Macizos_ConsultaRow)
        
        Private columnMacizo As Global.System.Data.DataColumn
        
        Private _columnAdm_Lín As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Macizos Consulta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MacizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMacizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LínColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Lín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Macizos_ConsultaRow
            Get
                Return CType(Me.Rows(index),Macizos_ConsultaRow)
            End Get
        End Property
        
        Public Event Macizos_ConsultaRowChanging As Macizos_ConsultaRowChangeEventHandler
        
        Public Event Macizos_ConsultaRowChanged As Macizos_ConsultaRowChangeEventHandler
        
        Public Event Macizos_ConsultaRowDeleting As Macizos_ConsultaRowChangeEventHandler
        
        Public Event Macizos_ConsultaRowDeleted As Macizos_ConsultaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMacizos_ConsultaRow(ByVal row As Macizos_ConsultaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMacizos_ConsultaRow(ByVal Macizo As String, ByVal _Adm_Lín As String) As Macizos_ConsultaRow
            Dim rowMacizos_ConsultaRow As Macizos_ConsultaRow = CType(Me.NewRow,Macizos_ConsultaRow)
            Dim columnValuesArray() As Object = New Object() {Macizo, _Adm_Lín}
            rowMacizos_ConsultaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMacizos_ConsultaRow)
            Return rowMacizos_ConsultaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Macizos_ConsultaDataTable = CType(MyBase.Clone,Macizos_ConsultaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Macizos_ConsultaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMacizo = MyBase.Columns("Macizo")
            Me._columnAdm_Lín = MyBase.Columns("Adm/Lín")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMacizo = New Global.System.Data.DataColumn("Macizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMacizo)
            Me._columnAdm_Lín = New Global.System.Data.DataColumn("Adm/Lín", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Lín")
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Lín")
            MyBase.Columns.Add(Me._columnAdm_Lín)
            Me.columnMacizo.MaxLength = 255
            Me._columnAdm_Lín.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMacizos_ConsultaRow() As Macizos_ConsultaRow
            Return CType(Me.NewRow,Macizos_ConsultaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Macizos_ConsultaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Macizos_ConsultaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Macizos_ConsultaRowChangedEvent) Is Nothing) Then
                RaiseEvent Macizos_ConsultaRowChanged(Me, New Macizos_ConsultaRowChangeEvent(CType(e.Row,Macizos_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Macizos_ConsultaRowChangingEvent) Is Nothing) Then
                RaiseEvent Macizos_ConsultaRowChanging(Me, New Macizos_ConsultaRowChangeEvent(CType(e.Row,Macizos_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Macizos_ConsultaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Macizos_ConsultaRowDeleted(Me, New Macizos_ConsultaRowChangeEvent(CType(e.Row,Macizos_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Macizos_ConsultaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Macizos_ConsultaRowDeleting(Me, New Macizos_ConsultaRowChangeEvent(CType(e.Row,Macizos_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMacizos_ConsultaRow(ByVal row As Macizos_ConsultaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Macizos_ConsultaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Postes_ConsultaDataTable
        Inherits Global.System.Data.TypedTableBase(Of Postes_ConsultaRow)
        
        Private _columnAdm_Lín As Global.System.Data.DataColumn
        
        Private columnPoste As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Postes Consulta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Adm_LínColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAdm_Lín
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Postes_ConsultaRow
            Get
                Return CType(Me.Rows(index),Postes_ConsultaRow)
            End Get
        End Property
        
        Public Event Postes_ConsultaRowChanging As Postes_ConsultaRowChangeEventHandler
        
        Public Event Postes_ConsultaRowChanged As Postes_ConsultaRowChangeEventHandler
        
        Public Event Postes_ConsultaRowDeleting As Postes_ConsultaRowChangeEventHandler
        
        Public Event Postes_ConsultaRowDeleted As Postes_ConsultaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPostes_ConsultaRow(ByVal row As Postes_ConsultaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPostes_ConsultaRow(ByVal _Adm_Lín As String, ByVal Poste As String) As Postes_ConsultaRow
            Dim rowPostes_ConsultaRow As Postes_ConsultaRow = CType(Me.NewRow,Postes_ConsultaRow)
            Dim columnValuesArray() As Object = New Object() {_Adm_Lín, Poste}
            rowPostes_ConsultaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPostes_ConsultaRow)
            Return rowPostes_ConsultaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Postes_ConsultaDataTable = CType(MyBase.Clone,Postes_ConsultaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Postes_ConsultaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columnAdm_Lín = MyBase.Columns("Adm/Lín")
            Me.columnPoste = MyBase.Columns("Poste")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columnAdm_Lín = New Global.System.Data.DataColumn("Adm/Lín", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAdm_Lín")
            Me._columnAdm_Lín.ExtendedProperties.Add("Generator_UserColumnName", "Adm/Lín")
            MyBase.Columns.Add(Me._columnAdm_Lín)
            Me.columnPoste = New Global.System.Data.DataColumn("Poste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoste)
            Me._columnAdm_Lín.MaxLength = 255
            Me.columnPoste.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPostes_ConsultaRow() As Postes_ConsultaRow
            Return CType(Me.NewRow,Postes_ConsultaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Postes_ConsultaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Postes_ConsultaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Postes_ConsultaRowChangedEvent) Is Nothing) Then
                RaiseEvent Postes_ConsultaRowChanged(Me, New Postes_ConsultaRowChangeEvent(CType(e.Row,Postes_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Postes_ConsultaRowChangingEvent) Is Nothing) Then
                RaiseEvent Postes_ConsultaRowChanging(Me, New Postes_ConsultaRowChangeEvent(CType(e.Row,Postes_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Postes_ConsultaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Postes_ConsultaRowDeleted(Me, New Postes_ConsultaRowChangeEvent(CType(e.Row,Postes_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Postes_ConsultaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Postes_ConsultaRowDeleting(Me, New Postes_ConsultaRowChangeEvent(CType(e.Row,Postes_ConsultaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePostes_ConsultaRow(ByVal row As Postes_ConsultaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base_de_datosDataSet = New Base_de_datosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Postes_ConsultaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductores_y_cablesRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductores_y_cables As Conductores_y_cablesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductores_y_cables = CType(Me.Table,Conductores_y_cablesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Sección__mm2_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Sección__mm2_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sección (mm2)' de la tabla 'Conductores y cables' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Sección__mm2_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Diámetro_cable__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Diámetro_cable__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Diámetro cable (m)' de la tabla 'Conductores y cables' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Diámetro_cable__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Peso_lineal__kg_m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Peso lineal (kg/m)' de la tabla 'Conductores y cables' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Resistencia_máxima__ohm_km_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resistencia máxima (ohm/km)' de la tabla 'Conductores y c"& _ 
                            "ables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coef_dilatación() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Coef_dilataciónColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Coef dilatación' de la tabla 'Conductores y cables' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Coef_dilataciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Módulo_elástico__kN_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Módulo_elástico__kN_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Módulo elástico (kN)' de la tabla 'Conductores y cables' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Módulo_elástico__kN_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Carga_rotura__kN_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables._Carga_rotura__kN_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Carga rotura (kN)' de la tabla 'Conductores y cables' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables._Carga_rotura__kN_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Norma() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.NormaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Norma' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.NormaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orígen_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Orígen_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Orígen 1' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Orígen_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orígen_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductores_y_cables.Orígen_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Orígen 2' de la tabla 'Conductores y cables' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductores_y_cables.Orígen_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductores_y_cables.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductores_y_cables.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Sección__mm2_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Sección__mm2_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Sección__mm2_Null()
            Me(Me.tableConductores_y_cables._Sección__mm2_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Diámetro_cable__m_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Diámetro_cable__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Diámetro_cable__m_Null()
            Me(Me.tableConductores_y_cables._Diámetro_cable__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Peso_lineal__kg_m_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Peso_lineal__kg_m_Null()
            Me(Me.tableConductores_y_cables._Peso_lineal__kg_m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Resistencia_máxima__ohm_km_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Resistencia_máxima__ohm_km_Null()
            Me(Me.tableConductores_y_cables._Resistencia_máxima__ohm_km_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoef_dilataciónNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Coef_dilataciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoef_dilataciónNull()
            Me(Me.tableConductores_y_cables.Coef_dilataciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Módulo_elástico__kN_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Módulo_elástico__kN_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Módulo_elástico__kN_Null()
            Me(Me.tableConductores_y_cables._Módulo_elástico__kN_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Carga_rotura__kN_Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables._Carga_rotura__kN_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Carga_rotura__kN_Null()
            Me(Me.tableConductores_y_cables._Carga_rotura__kN_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNormaNull() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.NormaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNormaNull()
            Me(Me.tableConductores_y_cables.NormaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrígen_1Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Orígen_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrígen_1Null()
            Me(Me.tableConductores_y_cables.Orígen_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrígen_2Null() As Boolean
            Return Me.IsNull(Me.tableConductores_y_cables.Orígen_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrígen_2Null()
            Me(Me.tableConductores_y_cables.Orígen_2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatos As DatosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatos = CType(Me.Table,DatosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_catenaria() As String
            Get
                Return CType(Me(Me.tableDatos.Nombre_catenariaColumn),String)
            End Get
            Set
                Me(Me.tableDatos.Nombre_catenariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sistema() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SistemaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sistema' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SistemaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Altura_nominal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Altura_nominalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Altura nominal' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Altura_nominalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Altura_mínima() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Altura_mínimaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Altura mínima' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Altura_mínimaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Altura_máxima() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Altura_máximaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Altura máxima' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Altura_máximaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Altura_catenaria() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Altura_catenariaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Altura catenaria' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Altura_catenariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_máx_entre_vanos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_máx_entre_vanosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia máx entre vanos' de la tabla 'Datos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_máx_entre_vanosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_máx_del_cantón() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_máx_del_cantónColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia máx del cantón' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_máx_del_cantónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vano_máximo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Vano_máximoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vano máximo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Vano_máximoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vano_máx_en_sec_mecánico() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Vano_máx_en_sec_mecánicoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vano máx en sec mecánico' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Vano_máx_en_sec_mecánicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vano_máx_en_sec_eléctrico() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Vano_máx_en_sec_eléctricoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vano máx en sec eléctrico' de la tabla 'Datos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Vano_máx_en_sec_eléctricoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vano_máx_en_túnel() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Vano_máx_en_túnelColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vano máx en túnel' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Vano_máx_en_túnelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Incr_normalizado_de_vano() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Incr_normalizado_de_vanoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Incr normalizado de vano' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Incr_normalizado_de_vanoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Incr_máx_altura_HC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Incr_máx_altura_HCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Incr máx altura HC' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Incr_máx_altura_HCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Núm_mín__vanos_en_sec_mec() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Núm_mín__vanos_en_sec_mecColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Núm mín  vanos en sec mec' de la tabla 'Datos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Núm_mín__vanos_en_sec_mecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Núm_mín_vanos_en_sec_eléct() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Núm_mín_vanos_en_sec_eléctColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Núm mín vanos en sec eléct' de la tabla 'Datos' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Núm_mín_vanos_en_sec_eléctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ancho_vía() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Ancho_víaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ancho vía' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Ancho_víaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descentramiento_máx_recta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Descentramiento_máx_rectaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descentramiento máx recta' de la tabla 'Datos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Descentramiento_máx_rectaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descentramiento_máx_curva() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Descentramiento_máx_curvaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descentramiento máx curva' de la tabla 'Datos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Descentramiento_máx_curvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Radio_considerable_como_recta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Radio_considerable_como_rectaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Radio considerable como recta' de la tabla 'Datos' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Radio_considerable_como_rectaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zona_trabajo_pantógrafo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Zona_trabajo_pantógrafoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Zona trabajo pantógrafo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Zona_trabajo_pantógrafoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Elevación_máx_pantógrafo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Elevación_máx_pantógrafoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Elevación máx pantógrafo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Elevación_máx_pantógrafoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Velocidad_viento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Velocidad_vientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Velocidad viento' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Velocidad_vientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flecha_máx_centro_vano() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Flecha_máx_centro_vanoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Flecha máx centro vano' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Flecha_máx_centro_vanoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Distancia_carril___poste() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Distancia_carril___posteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia carril - poste' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Distancia_carril___posteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Distancia_base_poste___PMR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Distancia_base_poste___PMRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia base poste - PMR' de la tabla 'Datos' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Distancia_base_poste___PMRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_eléct_sec_mecánico() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_eléct_sec_mecánicoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia eléct sec mecánico' de la tabla 'Datos' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_eléct_sec_mecánicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_eléct_sec_eléctrico() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_eléct_sec_eléctricoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia eléct sec eléctrico' de la tabla 'Datos' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_eléct_sec_eléctricoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Long_zona_común_máx() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Long_zona_común_máxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Long zona común máx' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Long_zona_común_máxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Long_zona_común_mín() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Long_zona_común_mínColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Long zona común mín' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Long_zona_común_mínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Long_Zona_Neutra() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Long_Zona_NeutraColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Long Zona Neutra' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Long_Zona_NeutraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hilo_de_Contacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Hilo_de_ContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Hilo de Contacto' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Hilo_de_ContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sustentador() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.SustentadorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sustentador' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.SustentadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C_de_Protección_Aérea() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.C_de_Protección_AéreaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'C de Protección Aérea' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.C_de_Protección_AéreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cable_de_Tierra() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Cable_de_TierraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cable de Tierra' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Cable_de_TierraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Feeder__() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Feeder__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Feeder +' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __Feeder__() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.__Feeder__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Feeder -' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.__Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Punto_fijo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Punto_fijoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Punto fijo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Punto_fijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Péndola() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.PéndolaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Péndola' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.PéndolaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anclaje() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.AnclajeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Anclaje' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.AnclajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Posición_Feeder__() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Posición_Feeder__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Posición Feeder +' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Posición_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __Posición_Feeder__() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.__Posición_Feeder__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Posición Feeder -' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.__Posición_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Núm_HC() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Núm_HCColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Núm HC' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Núm_HCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Núm_CdPA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Núm_CdPAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Núm CdPA' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Núm_CdPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Núm_Feeder__() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Núm_Feeder__Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Núm Feeder +' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Núm_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __Núm_Feeder__() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatos.__Núm_Feeder__Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Núm Feeder -' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.__Núm_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tensión_HC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tensión_HCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tensión HC' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tensión_HCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tensión_sustentador() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tensión_sustentadorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tensión sustentador' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tensión_sustentadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tensión_CdPA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tensión_CdPAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tensión CdPA' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tensión_CdPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Tensión_Feeder__() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Tensión_Feeder__Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tensión Feeder +' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Tensión_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __Tensión_Feeder__() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.__Tensión_Feeder__Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tensión Feeder -' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.__Tensión_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tensión_punto_fijo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tensión_punto_fijoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tensión punto fijo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tensión_punto_fijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Línea() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Adm_LíneaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Línea' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Adm_LíneaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Código() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.CódigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Código' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.CódigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numeración() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.NumeraciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Numeración' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.NumeraciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_macizo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tipo_macizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo macizo' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tipo_macizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Línea_postes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Adm_Línea_postesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Línea postes' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Adm_Línea_postesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tubo_de_ménsula() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tubo_de_ménsulaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tubo de ménsula' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tubo_de_ménsulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tubo_tirante() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Tubo_tiranteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tubo tirante' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Tubo_tiranteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cola_de_anclaje() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Cola_de_anclajeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cola de anclaje' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Cola_de_anclajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Aislador_Feeder__() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos._Aislador_Feeder__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Aislador Feeder +' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos._Aislador_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __Aislador_Feeder__() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatos.__Aislador_Feeder__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Aislador Feeder -' de la tabla 'Datos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.__Aislador_Feeder__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_apoyo_y_1ª_péndola() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_apoyo_y_1ª_péndolaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia apoyo y 1ª péndola' de la tabla 'Datos' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_apoyo_y_1ª_péndolaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_1ª_y_2ª_péndola() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_1ª_y_2ª_péndolaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia 1ª y 2ª péndola' de la tabla 'Datos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_1ª_y_2ª_péndolaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distancia_máx_entre_péndolas() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatos.Distancia_máx_entre_péndolasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Distancia máx entre péndolas' de la tabla 'Datos' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatos.Distancia_máx_entre_péndolasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSistemaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SistemaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSistemaNull()
            Me(Me.tableDatos.SistemaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAltura_nominalNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Altura_nominalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAltura_nominalNull()
            Me(Me.tableDatos.Altura_nominalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAltura_mínimaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Altura_mínimaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAltura_mínimaNull()
            Me(Me.tableDatos.Altura_mínimaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAltura_máximaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Altura_máximaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAltura_máximaNull()
            Me(Me.tableDatos.Altura_máximaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAltura_catenariaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Altura_catenariaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAltura_catenariaNull()
            Me(Me.tableDatos.Altura_catenariaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_máx_entre_vanosNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_máx_entre_vanosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_máx_entre_vanosNull()
            Me(Me.tableDatos.Distancia_máx_entre_vanosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_máx_del_cantónNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_máx_del_cantónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_máx_del_cantónNull()
            Me(Me.tableDatos.Distancia_máx_del_cantónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVano_máximoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Vano_máximoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVano_máximoNull()
            Me(Me.tableDatos.Vano_máximoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVano_máx_en_sec_mecánicoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Vano_máx_en_sec_mecánicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVano_máx_en_sec_mecánicoNull()
            Me(Me.tableDatos.Vano_máx_en_sec_mecánicoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVano_máx_en_sec_eléctricoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Vano_máx_en_sec_eléctricoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVano_máx_en_sec_eléctricoNull()
            Me(Me.tableDatos.Vano_máx_en_sec_eléctricoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVano_máx_en_túnelNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Vano_máx_en_túnelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVano_máx_en_túnelNull()
            Me(Me.tableDatos.Vano_máx_en_túnelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncr_normalizado_de_vanoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Incr_normalizado_de_vanoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncr_normalizado_de_vanoNull()
            Me(Me.tableDatos.Incr_normalizado_de_vanoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncr_máx_altura_HCNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Incr_máx_altura_HCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncr_máx_altura_HCNull()
            Me(Me.tableDatos.Incr_máx_altura_HCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNúm_mín__vanos_en_sec_mecNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Núm_mín__vanos_en_sec_mecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNúm_mín__vanos_en_sec_mecNull()
            Me(Me.tableDatos.Núm_mín__vanos_en_sec_mecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNúm_mín_vanos_en_sec_eléctNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Núm_mín_vanos_en_sec_eléctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNúm_mín_vanos_en_sec_eléctNull()
            Me(Me.tableDatos.Núm_mín_vanos_en_sec_eléctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAncho_víaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Ancho_víaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAncho_víaNull()
            Me(Me.tableDatos.Ancho_víaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescentramiento_máx_rectaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Descentramiento_máx_rectaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescentramiento_máx_rectaNull()
            Me(Me.tableDatos.Descentramiento_máx_rectaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescentramiento_máx_curvaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Descentramiento_máx_curvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescentramiento_máx_curvaNull()
            Me(Me.tableDatos.Descentramiento_máx_curvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRadio_considerable_como_rectaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Radio_considerable_como_rectaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRadio_considerable_como_rectaNull()
            Me(Me.tableDatos.Radio_considerable_como_rectaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZona_trabajo_pantógrafoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Zona_trabajo_pantógrafoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZona_trabajo_pantógrafoNull()
            Me(Me.tableDatos.Zona_trabajo_pantógrafoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsElevación_máx_pantógrafoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Elevación_máx_pantógrafoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetElevación_máx_pantógrafoNull()
            Me(Me.tableDatos.Elevación_máx_pantógrafoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVelocidad_vientoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Velocidad_vientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVelocidad_vientoNull()
            Me(Me.tableDatos.Velocidad_vientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlecha_máx_centro_vanoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Flecha_máx_centro_vanoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlecha_máx_centro_vanoNull()
            Me(Me.tableDatos.Flecha_máx_centro_vanoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Distancia_carril___posteNull() As Boolean
            Return Me.IsNull(Me.tableDatos._Distancia_carril___posteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Distancia_carril___posteNull()
            Me(Me.tableDatos._Distancia_carril___posteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Distancia_base_poste___PMRNull() As Boolean
            Return Me.IsNull(Me.tableDatos._Distancia_base_poste___PMRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Distancia_base_poste___PMRNull()
            Me(Me.tableDatos._Distancia_base_poste___PMRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_eléct_sec_mecánicoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_eléct_sec_mecánicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_eléct_sec_mecánicoNull()
            Me(Me.tableDatos.Distancia_eléct_sec_mecánicoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_eléct_sec_eléctricoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_eléct_sec_eléctricoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_eléct_sec_eléctricoNull()
            Me(Me.tableDatos.Distancia_eléct_sec_eléctricoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLong_zona_común_máxNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Long_zona_común_máxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLong_zona_común_máxNull()
            Me(Me.tableDatos.Long_zona_común_máxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLong_zona_común_mínNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Long_zona_común_mínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLong_zona_común_mínNull()
            Me(Me.tableDatos.Long_zona_común_mínColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLong_Zona_NeutraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Long_Zona_NeutraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLong_Zona_NeutraNull()
            Me(Me.tableDatos.Long_Zona_NeutraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHilo_de_ContactoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Hilo_de_ContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHilo_de_ContactoNull()
            Me(Me.tableDatos.Hilo_de_ContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSustentadorNull() As Boolean
            Return Me.IsNull(Me.tableDatos.SustentadorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSustentadorNull()
            Me(Me.tableDatos.SustentadorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC_de_Protección_AéreaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.C_de_Protección_AéreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC_de_Protección_AéreaNull()
            Me(Me.tableDatos.C_de_Protección_AéreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCable_de_TierraNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Cable_de_TierraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCable_de_TierraNull()
            Me(Me.tableDatos.Cable_de_TierraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos._Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Feeder__Null()
            Me(Me.tableDatos._Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos.__Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__Feeder__Null()
            Me(Me.tableDatos.__Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPunto_fijoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Punto_fijoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPunto_fijoNull()
            Me(Me.tableDatos.Punto_fijoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPéndolaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.PéndolaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPéndolaNull()
            Me(Me.tableDatos.PéndolaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnclajeNull() As Boolean
            Return Me.IsNull(Me.tableDatos.AnclajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnclajeNull()
            Me(Me.tableDatos.AnclajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Posición_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos._Posición_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Posición_Feeder__Null()
            Me(Me.tableDatos._Posición_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__Posición_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos.__Posición_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__Posición_Feeder__Null()
            Me(Me.tableDatos.__Posición_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNúm_HCNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Núm_HCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNúm_HCNull()
            Me(Me.tableDatos.Núm_HCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNúm_CdPANull() As Boolean
            Return Me.IsNull(Me.tableDatos.Núm_CdPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNúm_CdPANull()
            Me(Me.tableDatos.Núm_CdPAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Núm_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos._Núm_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Núm_Feeder__Null()
            Me(Me.tableDatos._Núm_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__Núm_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos.__Núm_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__Núm_Feeder__Null()
            Me(Me.tableDatos.__Núm_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTensión_HCNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tensión_HCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTensión_HCNull()
            Me(Me.tableDatos.Tensión_HCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTensión_sustentadorNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tensión_sustentadorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTensión_sustentadorNull()
            Me(Me.tableDatos.Tensión_sustentadorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTensión_CdPANull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tensión_CdPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTensión_CdPANull()
            Me(Me.tableDatos.Tensión_CdPAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Tensión_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos._Tensión_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Tensión_Feeder__Null()
            Me(Me.tableDatos._Tensión_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__Tensión_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos.__Tensión_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__Tensión_Feeder__Null()
            Me(Me.tableDatos.__Tensión_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTensión_punto_fijoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tensión_punto_fijoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTensión_punto_fijoNull()
            Me(Me.tableDatos.Tensión_punto_fijoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableDatos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LíneaNull() As Boolean
            Return Me.IsNull(Me.tableDatos._Adm_LíneaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LíneaNull()
            Me(Me.tableDatos._Adm_LíneaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCódigoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.CódigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCódigoNull()
            Me(Me.tableDatos.CódigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeraciónNull() As Boolean
            Return Me.IsNull(Me.tableDatos.NumeraciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeraciónNull()
            Me(Me.tableDatos.NumeraciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_macizoNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tipo_macizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_macizoNull()
            Me(Me.tableDatos.Tipo_macizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_Línea_postesNull() As Boolean
            Return Me.IsNull(Me.tableDatos._Adm_Línea_postesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_Línea_postesNull()
            Me(Me.tableDatos._Adm_Línea_postesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTubo_de_ménsulaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tubo_de_ménsulaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTubo_de_ménsulaNull()
            Me(Me.tableDatos.Tubo_de_ménsulaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTubo_tiranteNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Tubo_tiranteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTubo_tiranteNull()
            Me(Me.tableDatos.Tubo_tiranteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCola_de_anclajeNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Cola_de_anclajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCola_de_anclajeNull()
            Me(Me.tableDatos.Cola_de_anclajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Aislador_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos._Aislador_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Aislador_Feeder__Null()
            Me(Me.tableDatos._Aislador_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__Aislador_Feeder__Null() As Boolean
            Return Me.IsNull(Me.tableDatos.__Aislador_Feeder__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__Aislador_Feeder__Null()
            Me(Me.tableDatos.__Aislador_Feeder__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_apoyo_y_1ª_péndolaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_apoyo_y_1ª_péndolaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_apoyo_y_1ª_péndolaNull()
            Me(Me.tableDatos.Distancia_apoyo_y_1ª_péndolaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_1ª_y_2ª_péndolaNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_1ª_y_2ª_péndolaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_1ª_y_2ª_péndolaNull()
            Me(Me.tableDatos.Distancia_1ª_y_2ª_péndolaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistancia_máx_entre_péndolasNull() As Boolean
            Return Me.IsNull(Me.tableDatos.Distancia_máx_entre_péndolasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistancia_máx_entre_péndolasNull()
            Me(Me.tableDatos.Distancia_máx_entre_péndolasColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ElectrificaciónRow
        Inherits Global.System.Data.DataRow
        
        Private tableElectrificación As ElectrificaciónDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableElectrificación = CType(Me.Table,ElectrificaciónDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Alimentación() As String
            Get
                Try 
                    Return CType(Me(Me.tableElectrificación.AlimentaciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Alimentación' de la tabla 'Electrificación' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableElectrificación.AlimentaciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sistema() As String
            Get
                Try 
                    Return CType(Me(Me.tableElectrificación.SistemaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sistema' de la tabla 'Electrificación' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableElectrificación.SistemaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlimentaciónNull() As Boolean
            Return Me.IsNull(Me.tableElectrificación.AlimentaciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlimentaciónNull()
            Me(Me.tableElectrificación.AlimentaciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSistemaNull() As Boolean
            Return Me.IsNull(Me.tableElectrificación.SistemaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSistemaNull()
            Me(Me.tableElectrificación.SistemaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MacizosRow
        Inherits Global.System.Data.DataRow
        
        Private tableMacizos As MacizosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMacizos = CType(Me.Table,MacizosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Macizo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos.MacizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Macizo' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos.MacizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Lín() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Adm_LínColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Lín' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Adm_LínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _D_T() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._D_TColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'D/T' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._D_TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._a__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'a (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._a__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._b__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'b (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._b__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _d__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._d__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'd (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._d__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _h__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._h__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'h (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._h__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Volúmen_macizo_1__m3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Volúmen_macizo_1__m3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Volúmen macizo 1 (m3)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Volúmen_macizo_1__m3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _at__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._at__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'at (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._at__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _bt__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._bt__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'bt (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._bt__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ht__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._ht__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ht (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._ht__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Volúmen_macizo_2__m3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Volúmen_macizo_2__m3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Volúmen macizo 2 (m3)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Volúmen_macizo_2__m3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Volúmen_TOTAL__m3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._Volúmen_TOTAL__m3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Volúmen TOTAL (m3)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._Volúmen_TOTAL__m3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _diámetro__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMacizos._diámetro__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'diámetro (m)' de la tabla 'Macizos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos._diámetro__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMacizoNull() As Boolean
            Return Me.IsNull(Me.tableMacizos.MacizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMacizoNull()
            Me(Me.tableMacizos.MacizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LínNull() As Boolean
            Return Me.IsNull(Me.tableMacizos._Adm_LínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LínNull()
            Me(Me.tableMacizos._Adm_LínColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_D_TNull() As Boolean
            Return Me.IsNull(Me.tableMacizos._D_TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_D_TNull()
            Me(Me.tableMacizos._D_TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMacizos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMacizos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._a__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tableMacizos._a__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._b__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tableMacizos._b__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_d__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._d__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_d__m_Null()
            Me(Me.tableMacizos._d__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_h__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._h__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_h__m_Null()
            Me(Me.tableMacizos._h__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Volúmen_macizo_1__m3_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._Volúmen_macizo_1__m3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Volúmen_macizo_1__m3_Null()
            Me(Me.tableMacizos._Volúmen_macizo_1__m3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_at__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._at__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_at__m_Null()
            Me(Me.tableMacizos._at__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_bt__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._bt__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_bt__m_Null()
            Me(Me.tableMacizos._bt__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ht__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._ht__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ht__m_Null()
            Me(Me.tableMacizos._ht__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Volúmen_macizo_2__m3_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._Volúmen_macizo_2__m3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Volúmen_macizo_2__m3_Null()
            Me(Me.tableMacizos._Volúmen_macizo_2__m3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Volúmen_TOTAL__m3_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._Volúmen_TOTAL__m3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Volúmen_TOTAL__m3_Null()
            Me(Me.tableMacizos._Volúmen_TOTAL__m3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_diámetro__m_Null() As Boolean
            Return Me.IsNull(Me.tableMacizos._diámetro__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_diámetro__m_Null()
            Me(Me.tableMacizos._diámetro__m_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PostesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePostes As PostesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePostes = CType(Me.Table,PostesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poste() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes.PosteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Poste' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.PosteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Lín() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Adm_LínColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Lín' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Adm_LínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._t__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 't (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._t__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._b__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'b (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._b__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _s__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._s__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 's (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._s__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Peso() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.PesoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Peso' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.PesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._a__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'a (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._a__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Htot__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Htot__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Htot (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Htot__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _H__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._H__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'H (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._H__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tg() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.tgColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tg' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.tgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property K() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.KColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'K' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.KColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Sep__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Sep__m_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sep (m)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Sep__m_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Wyy__cm3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Wyy__cm3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Wyy (cm3)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Wyy__cm3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Wxx__cm3_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes._Wxx__cm3_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Wxx (cm3)' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes._Wxx__cm3_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wr() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.WrColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Wr' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.WrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePostes.MColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'M' de la tabla 'Postes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes.MColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosteNull() As Boolean
            Return Me.IsNull(Me.tablePostes.PosteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosteNull()
            Me(Me.tablePostes.PosteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LínNull() As Boolean
            Return Me.IsNull(Me.tablePostes._Adm_LínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LínNull()
            Me(Me.tablePostes._Adm_LínColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablePostes.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablePostes.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._t__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__m_Null()
            Me(Me.tablePostes._t__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._b__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tablePostes._b__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_s__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._s__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_s__m_Null()
            Me(Me.tablePostes._s__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPesoNull() As Boolean
            Return Me.IsNull(Me.tablePostes.PesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPesoNull()
            Me(Me.tablePostes.PesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._a__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tablePostes._a__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Htot__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Htot__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Htot__m_Null()
            Me(Me.tablePostes._Htot__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_H__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._H__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_H__m_Null()
            Me(Me.tablePostes._H__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstgNull() As Boolean
            Return Me.IsNull(Me.tablePostes.tgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettgNull()
            Me(Me.tablePostes.tgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKNull() As Boolean
            Return Me.IsNull(Me.tablePostes.KColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKNull()
            Me(Me.tablePostes.KColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Sep__m_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Sep__m_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Sep__m_Null()
            Me(Me.tablePostes._Sep__m_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Wyy__cm3_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Wyy__cm3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Wyy__cm3_Null()
            Me(Me.tablePostes._Wyy__cm3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Wxx__cm3_Null() As Boolean
            Return Me.IsNull(Me.tablePostes._Wxx__cm3_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Wxx__cm3_Null()
            Me(Me.tablePostes._Wxx__cm3_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWrNull() As Boolean
            Return Me.IsNull(Me.tablePostes.WrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWrNull()
            Me(Me.tablePostes.WrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNull() As Boolean
            Return Me.IsNull(Me.tablePostes.MColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNull()
            Me(Me.tablePostes.MColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_AnclajeRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_Anclaje As Conductor_AnclajeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_Anclaje = CType(Me.Table,Conductor_AnclajeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Anclaje.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor Anclaje' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Anclaje.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Anclaje.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor Anclaje' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Anclaje.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Anclaje.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_Anclaje.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Anclaje.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_Anclaje.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_Cable_de_TierraRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_Cable_de_Tierra As Conductor_Cable_de_TierraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_Cable_de_Tierra = CType(Me.Table,Conductor_Cable_de_TierraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Cable_de_Tierra.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor Cable de Tierra' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Cable_de_Tierra.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Cable_de_Tierra.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor Cable de Tierra' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Cable_de_Tierra.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Cable_de_Tierra.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_Cable_de_Tierra.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Cable_de_Tierra.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_Cable_de_Tierra.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_CDPARow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_CDPA As Conductor_CDPADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_CDPA = CType(Me.Table,Conductor_CDPADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_CDPA.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor CDPA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_CDPA.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_CDPA.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor CDPA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_CDPA.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_CDPA.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_CDPA.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_CDPA.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_CDPA.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class _Conductor_Feeder__Row
        Inherits Global.System.Data.DataRow
        
        Private _tableConductor_Feeder__ As _Conductor_Feeder__DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tableConductor_Feeder__ = CType(Me.Table,_Conductor_Feeder__DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me._tableConductor_Feeder__.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor Feeder -' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableConductor_Feeder__.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me._tableConductor_Feeder__.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor Feeder -' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableConductor_Feeder__.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me._tableConductor_Feeder__.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me._tableConductor_Feeder__.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me._tableConductor_Feeder__.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me._tableConductor_Feeder__.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class __Conductor_Feeder__Row
        Inherits Global.System.Data.DataRow
        
        Private __tableConductor_Feeder__ As __Conductor_Feeder__DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.__tableConductor_Feeder__ = CType(Me.Table,__Conductor_Feeder__DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.__tableConductor_Feeder__.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor Feeder +' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.__tableConductor_Feeder__.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.__tableConductor_Feeder__.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor Feeder +' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.__tableConductor_Feeder__.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.__tableConductor_Feeder__.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.__tableConductor_Feeder__.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.__tableConductor_Feeder__.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.__tableConductor_Feeder__.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_HCRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_HC As Conductor_HCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_HC = CType(Me.Table,Conductor_HCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_HC.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor HC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_HC.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_HC.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor HC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_HC.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_HC.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_HC.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_HC.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_HC.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_PendolaRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_Pendola As Conductor_PendolaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_Pendola = CType(Me.Table,Conductor_PendolaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Pendola.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor Pendola' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Pendola.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Pendola.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor Pendola' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Pendola.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Pendola.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_Pendola.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Pendola.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_Pendola.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_punto_fijoRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_punto_fijo As Conductor_punto_fijoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_punto_fijo = CType(Me.Table,Conductor_punto_fijoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_punto_fijo.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor punto fijo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_punto_fijo.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_punto_fijo.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor punto fijo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_punto_fijo.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_punto_fijo.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_punto_fijo.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_punto_fijo.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_punto_fijo.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Conductor_SustentadorRow
        Inherits Global.System.Data.DataRow
        
        Private tableConductor_Sustentador As Conductor_SustentadorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConductor_Sustentador = CType(Me.Table,Conductor_SustentadorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Sustentador.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'Conductor Sustentador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Sustentador.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableConductor_Sustentador.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Material' de la tabla 'Conductor Sustentador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConductor_Sustentador.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Sustentador.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableConductor_Sustentador.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableConductor_Sustentador.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableConductor_Sustentador.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Electrificación_ConsultaRow
        Inherits Global.System.Data.DataRow
        
        Private tableElectrificación_Consulta As Electrificación_ConsultaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableElectrificación_Consulta = CType(Me.Table,Electrificación_ConsultaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sistema() As String
            Get
                Try 
                    Return CType(Me(Me.tableElectrificación_Consulta.SistemaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sistema' de la tabla 'Electrificación Consulta' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableElectrificación_Consulta.SistemaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Alimentación() As String
            Get
                Try 
                    Return CType(Me(Me.tableElectrificación_Consulta.AlimentaciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Alimentación' de la tabla 'Electrificación Consulta' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableElectrificación_Consulta.AlimentaciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSistemaNull() As Boolean
            Return Me.IsNull(Me.tableElectrificación_Consulta.SistemaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSistemaNull()
            Me(Me.tableElectrificación_Consulta.SistemaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlimentaciónNull() As Boolean
            Return Me.IsNull(Me.tableElectrificación_Consulta.AlimentaciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlimentaciónNull()
            Me(Me.tableElectrificación_Consulta.AlimentaciónColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Macizos_ConsultaRow
        Inherits Global.System.Data.DataRow
        
        Private tableMacizos_Consulta As Macizos_ConsultaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMacizos_Consulta = CType(Me.Table,Macizos_ConsultaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Macizo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos_Consulta.MacizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Macizo' de la tabla 'Macizos Consulta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos_Consulta.MacizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Lín() As String
            Get
                Try 
                    Return CType(Me(Me.tableMacizos_Consulta._Adm_LínColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Lín' de la tabla 'Macizos Consulta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMacizos_Consulta._Adm_LínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMacizoNull() As Boolean
            Return Me.IsNull(Me.tableMacizos_Consulta.MacizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMacizoNull()
            Me(Me.tableMacizos_Consulta.MacizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LínNull() As Boolean
            Return Me.IsNull(Me.tableMacizos_Consulta._Adm_LínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LínNull()
            Me(Me.tableMacizos_Consulta._Adm_LínColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Postes_ConsultaRow
        Inherits Global.System.Data.DataRow
        
        Private tablePostes_Consulta As Postes_ConsultaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePostes_Consulta = CType(Me.Table,Postes_ConsultaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Adm_Lín() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes_Consulta._Adm_LínColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adm/Lín' de la tabla 'Postes Consulta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes_Consulta._Adm_LínColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poste() As String
            Get
                Try 
                    Return CType(Me(Me.tablePostes_Consulta.PosteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Poste' de la tabla 'Postes Consulta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePostes_Consulta.PosteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Adm_LínNull() As Boolean
            Return Me.IsNull(Me.tablePostes_Consulta._Adm_LínColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Adm_LínNull()
            Me(Me.tablePostes_Consulta._Adm_LínColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosteNull() As Boolean
            Return Me.IsNull(Me.tablePostes_Consulta.PosteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosteNull()
            Me(Me.tablePostes_Consulta.PosteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductores_y_cablesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductores_y_cablesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductores_y_cablesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductores_y_cablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ElectrificaciónRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ElectrificaciónRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ElectrificaciónRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ElectrificaciónRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MacizosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MacizosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MacizosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MacizosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PostesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PostesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PostesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PostesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_AnclajeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_AnclajeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_AnclajeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_AnclajeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_Cable_de_TierraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_Cable_de_TierraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_Cable_de_TierraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_Cable_de_TierraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_CDPARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_CDPARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_CDPARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_CDPARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class _Conductor_Feeder__RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _Conductor_Feeder__Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As _Conductor_Feeder__Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As _Conductor_Feeder__Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class __Conductor_Feeder__RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As __Conductor_Feeder__Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As __Conductor_Feeder__Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As __Conductor_Feeder__Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_HCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_HCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_HCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_HCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_PendolaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_PendolaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_PendolaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_PendolaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_punto_fijoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_punto_fijoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_punto_fijoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_punto_fijoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Conductor_SustentadorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Conductor_SustentadorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Conductor_SustentadorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Conductor_SustentadorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Electrificación_ConsultaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Electrificación_ConsultaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Electrificación_ConsultaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Electrificación_ConsultaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Macizos_ConsultaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Macizos_ConsultaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Macizos_ConsultaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Macizos_ConsultaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Postes_ConsultaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Postes_ConsultaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Postes_ConsultaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Postes_ConsultaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Base_de_datosDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductores_y_cablesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductores y cables"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            tableMapping.ColumnMappings.Add("Sección (mm2)", "Sección (mm2)")
            tableMapping.ColumnMappings.Add("Diámetro cable (m)", "Diámetro cable (m)")
            tableMapping.ColumnMappings.Add("Peso lineal (kg/m)", "Peso lineal (kg/m)")
            tableMapping.ColumnMappings.Add("Resistencia máxima (ohm/km)", "Resistencia máxima (ohm/km)")
            tableMapping.ColumnMappings.Add("Coef dilatación", "Coef dilatación")
            tableMapping.ColumnMappings.Add("Módulo elástico (kN)", "Módulo elástico (kN)")
            tableMapping.ColumnMappings.Add("Carga rotura (kN)", "Carga rotura (kN)")
            tableMapping.ColumnMappings.Add("Norma", "Norma")
            tableMapping.ColumnMappings.Add("Orígen 1", "Orígen 1")
            tableMapping.ColumnMappings.Add("Orígen 2", "Orígen 2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Conductores y cables` (`Tipo`, `Material`, `Sección (mm2)`, `Diámetr"& _ 
                "o cable (m)`, `Peso lineal (kg/m)`, `Resistencia máxima (ohm/km)`, `Coef dilatac"& _ 
                "ión`, `Módulo elástico (kN)`, `Carga rotura (kN)`, `Norma`, `Orígen 1`, `Orígen "& _ 
                "2`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Material", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Material", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sección_(mm2)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sección (mm2)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Diámetro_cable_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Diámetro cable (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Peso_lineal_(kg/m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Peso lineal (kg/m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Resistencia_máxima_(ohm/km)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Resistencia máxima (ohm/km)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Coef_dilatación", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Coef dilatación", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Módulo_elástico_(kN)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Módulo elástico (kN)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Carga_rotura_(kN)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Carga rotura (kN)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Norma", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Norma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Orígen_1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Orígen 1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Orígen_2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Orígen 2", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material, [Sección (mm2)], [Diámetro cable (m)], [Peso lineal (kg/m)"& _ 
                "], [Resistencia máxima (ohm/km)], [Coef dilatación], [Módulo elástico (kN)], [Ca"& _ 
                "rga rotura (kN)], Norma, [Orígen 1], [Orígen 2] FROM [Conductores y cables]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductores_y_cablesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductores_y_cablesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductores_y_cablesDataTable = New Base_de_datosDataSet.Conductores_y_cablesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.Conductores_y_cablesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Conductores y cables")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Tipo As String, ByVal Material As String, ByVal _Sección__mm2_ As Global.System.Nullable(Of Double), ByVal _Diámetro_cable__m_ As Global.System.Nullable(Of Double), ByVal _Peso_lineal__kg_m_ As Global.System.Nullable(Of Double), ByVal _Resistencia_máxima__ohm_km_ As Global.System.Nullable(Of Double), ByVal Coef_dilatación As Global.System.Nullable(Of Double), ByVal _Módulo_elástico__kN_ As Global.System.Nullable(Of Double), ByVal _Carga_rotura__kN_ As Global.System.Nullable(Of Double), ByVal Norma As String, ByVal Orígen_1 As String, ByVal Orígen_2 As String) As Integer
            If (Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Tipo,String)
            End If
            If (Material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Material,String)
            End If
            If (_Sección__mm2_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_Sección__mm2_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_Diámetro_cable__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_Diámetro_cable__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_Peso_lineal__kg_m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_Peso_lineal__kg_m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_Resistencia_máxima__ohm_km_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_Resistencia_máxima__ohm_km_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Coef_dilatación.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Coef_dilatación.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_Módulo_elástico__kN_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_Módulo_elástico__kN_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_Carga_rotura__kN_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_Carga_rotura__kN_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Norma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Norma,String)
            End If
            If (Orígen_1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Orígen_1,String)
            End If
            If (Orígen_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Orígen_2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DatosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Datos"
            tableMapping.ColumnMappings.Add("Nombre catenaria", "Nombre catenaria")
            tableMapping.ColumnMappings.Add("Sistema", "Sistema")
            tableMapping.ColumnMappings.Add("Altura nominal", "Altura nominal")
            tableMapping.ColumnMappings.Add("Altura mínima", "Altura mínima")
            tableMapping.ColumnMappings.Add("Altura máxima", "Altura máxima")
            tableMapping.ColumnMappings.Add("Altura catenaria", "Altura catenaria")
            tableMapping.ColumnMappings.Add("Distancia máx entre vanos", "Distancia máx entre vanos")
            tableMapping.ColumnMappings.Add("Distancia máx del cantón", "Distancia máx del cantón")
            tableMapping.ColumnMappings.Add("Vano máximo", "Vano máximo")
            tableMapping.ColumnMappings.Add("Vano máx en sec mecánico", "Vano máx en sec mecánico")
            tableMapping.ColumnMappings.Add("Vano máx en sec eléctrico", "Vano máx en sec eléctrico")
            tableMapping.ColumnMappings.Add("Vano máx en túnel", "Vano máx en túnel")
            tableMapping.ColumnMappings.Add("Incr normalizado de vano", "Incr normalizado de vano")
            tableMapping.ColumnMappings.Add("Incr máx altura HC", "Incr máx altura HC")
            tableMapping.ColumnMappings.Add("Núm mín  vanos en sec mec", "Núm mín  vanos en sec mec")
            tableMapping.ColumnMappings.Add("Núm mín vanos en sec eléct", "Núm mín vanos en sec eléct")
            tableMapping.ColumnMappings.Add("Ancho vía", "Ancho vía")
            tableMapping.ColumnMappings.Add("Descentramiento máx recta", "Descentramiento máx recta")
            tableMapping.ColumnMappings.Add("Descentramiento máx curva", "Descentramiento máx curva")
            tableMapping.ColumnMappings.Add("Radio considerable como recta", "Radio considerable como recta")
            tableMapping.ColumnMappings.Add("Zona trabajo pantógrafo", "Zona trabajo pantógrafo")
            tableMapping.ColumnMappings.Add("Elevación máx pantógrafo", "Elevación máx pantógrafo")
            tableMapping.ColumnMappings.Add("Velocidad viento", "Velocidad viento")
            tableMapping.ColumnMappings.Add("Flecha máx centro vano", "Flecha máx centro vano")
            tableMapping.ColumnMappings.Add("Distancia carril - poste", "Distancia carril - poste")
            tableMapping.ColumnMappings.Add("Distancia base poste - PMR", "Distancia base poste - PMR")
            tableMapping.ColumnMappings.Add("Distancia eléct sec mecánico", "Distancia eléct sec mecánico")
            tableMapping.ColumnMappings.Add("Distancia eléct sec eléctrico", "Distancia eléct sec eléctrico")
            tableMapping.ColumnMappings.Add("Long zona común máx", "Long zona común máx")
            tableMapping.ColumnMappings.Add("Long zona común mín", "Long zona común mín")
            tableMapping.ColumnMappings.Add("Long Zona Neutra", "Long Zona Neutra")
            tableMapping.ColumnMappings.Add("Hilo de Contacto", "Hilo de Contacto")
            tableMapping.ColumnMappings.Add("Sustentador", "Sustentador")
            tableMapping.ColumnMappings.Add("C de Protección Aérea", "C de Protección Aérea")
            tableMapping.ColumnMappings.Add("Cable de Tierra", "Cable de Tierra")
            tableMapping.ColumnMappings.Add("Feeder +", "Feeder +")
            tableMapping.ColumnMappings.Add("Feeder -", "Feeder -")
            tableMapping.ColumnMappings.Add("Punto fijo", "Punto fijo")
            tableMapping.ColumnMappings.Add("Péndola", "Péndola")
            tableMapping.ColumnMappings.Add("Anclaje", "Anclaje")
            tableMapping.ColumnMappings.Add("Posición Feeder +", "Posición Feeder +")
            tableMapping.ColumnMappings.Add("Posición Feeder -", "Posición Feeder -")
            tableMapping.ColumnMappings.Add("Núm HC", "Núm HC")
            tableMapping.ColumnMappings.Add("Núm CdPA", "Núm CdPA")
            tableMapping.ColumnMappings.Add("Núm Feeder +", "Núm Feeder +")
            tableMapping.ColumnMappings.Add("Núm Feeder -", "Núm Feeder -")
            tableMapping.ColumnMappings.Add("Tensión HC", "Tensión HC")
            tableMapping.ColumnMappings.Add("Tensión sustentador", "Tensión sustentador")
            tableMapping.ColumnMappings.Add("Tensión CdPA", "Tensión CdPA")
            tableMapping.ColumnMappings.Add("Tensión Feeder +", "Tensión Feeder +")
            tableMapping.ColumnMappings.Add("Tensión Feeder -", "Tensión Feeder -")
            tableMapping.ColumnMappings.Add("Tensión punto fijo", "Tensión punto fijo")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Adm/Línea", "Adm/Línea")
            tableMapping.ColumnMappings.Add("Código", "Código")
            tableMapping.ColumnMappings.Add("Numeración", "Numeración")
            tableMapping.ColumnMappings.Add("Tipo macizo", "Tipo macizo")
            tableMapping.ColumnMappings.Add("Adm/Línea postes", "Adm/Línea postes")
            tableMapping.ColumnMappings.Add("Tubo de ménsula", "Tubo de ménsula")
            tableMapping.ColumnMappings.Add("Tubo tirante", "Tubo tirante")
            tableMapping.ColumnMappings.Add("Cola de anclaje", "Cola de anclaje")
            tableMapping.ColumnMappings.Add("Aislador Feeder +", "Aislador Feeder +")
            tableMapping.ColumnMappings.Add("Aislador Feeder -", "Aislador Feeder -")
            tableMapping.ColumnMappings.Add("Distancia apoyo y 1ª péndola", "Distancia apoyo y 1ª péndola")
            tableMapping.ColumnMappings.Add("Distancia 1ª y 2ª péndola", "Distancia 1ª y 2ª péndola")
            tableMapping.ColumnMappings.Add("Distancia máx entre péndolas", "Distancia máx entre péndolas")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Datos` WHERE ((`Nombre catenaria` = ?) AND ((? = 1 AND `Sistema` IS "& _ 
                "NULL) OR (`Sistema` = ?)) AND ((? = 1 AND `Altura nominal` IS NULL) OR (`Altura "& _ 
                "nominal` = ?)) AND ((? = 1 AND `Altura mínima` IS NULL) OR (`Altura mínima` = ?)"& _ 
                ") AND ((? = 1 AND `Altura máxima` IS NULL) OR (`Altura máxima` = ?)) AND ((? = 1"& _ 
                " AND `Altura catenaria` IS NULL) OR (`Altura catenaria` = ?)) AND ((? = 1 AND `D"& _ 
                "istancia máx entre vanos` IS NULL) OR (`Distancia máx entre vanos` = ?)) AND ((?"& _ 
                " = 1 AND `Distancia máx del cantón` IS NULL) OR (`Distancia máx del cantón` = ?)"& _ 
                ") AND ((? = 1 AND `Vano máximo` IS NULL) OR (`Vano máximo` = ?)) AND ((? = 1 AND"& _ 
                " `Vano máx en sec mecánico` IS NULL) OR (`Vano máx en sec mecánico` = ?)) AND (("& _ 
                "? = 1 AND `Vano máx en sec eléctrico` IS NULL) OR (`Vano máx en sec eléctrico` ="& _ 
                " ?)) AND ((? = 1 AND `Vano máx en túnel` IS NULL) OR (`Vano máx en túnel` = ?)) "& _ 
                "AND ((? = 1 AND `Incr normalizado de vano` IS NULL) OR (`Incr normalizado de van"& _ 
                "o` = ?)) AND ((? = 1 AND `Incr máx altura HC` IS NULL) OR (`Incr máx altura HC` "& _ 
                "= ?)) AND ((? = 1 AND `Núm mín  vanos en sec mec` IS NULL) OR (`Núm mín  vanos e"& _ 
                "n sec mec` = ?)) AND ((? = 1 AND `Núm mín vanos en sec eléct` IS NULL) OR (`Núm "& _ 
                "mín vanos en sec eléct` = ?)) AND ((? = 1 AND `Ancho vía` IS NULL) OR (`Ancho ví"& _ 
                "a` = ?)) AND ((? = 1 AND `Descentramiento máx recta` IS NULL) OR (`Descentramien"& _ 
                "to máx recta` = ?)) AND ((? = 1 AND `Descentramiento máx curva` IS NULL) OR (`De"& _ 
                "scentramiento máx curva` = ?)) AND ((? = 1 AND `Radio considerable como recta` I"& _ 
                "S NULL) OR (`Radio considerable como recta` = ?)) AND ((? = 1 AND `Zona trabajo "& _ 
                "pantógrafo` IS NULL) OR (`Zona trabajo pantógrafo` = ?)) AND ((? = 1 AND `Elevac"& _ 
                "ión máx pantógrafo` IS NULL) OR (`Elevación máx pantógrafo` = ?)) AND ((? = 1 AN"& _ 
                "D `Velocidad viento` IS NULL) OR (`Velocidad viento` = ?)) AND ((? = 1 AND `Flec"& _ 
                "ha máx centro vano` IS NULL) OR (`Flecha máx centro vano` = ?)) AND ((? = 1 AND "& _ 
                "`Distancia carril - poste` IS NULL) OR (`Distancia carril - poste` = ?)) AND ((?"& _ 
                " = 1 AND `Distancia base poste - PMR` IS NULL) OR (`Distancia base poste - PMR` "& _ 
                "= ?)) AND ((? = 1 AND `Distancia eléct sec mecánico` IS NULL) OR (`Distancia elé"& _ 
                "ct sec mecánico` = ?)) AND ((? = 1 AND `Distancia eléct sec eléctrico` IS NULL) "& _ 
                "OR (`Distancia eléct sec eléctrico` = ?)) AND ((? = 1 AND `Long zona común máx` "& _ 
                "IS NULL) OR (`Long zona común máx` = ?)) AND ((? = 1 AND `Long zona común mín` I"& _ 
                "S NULL) OR (`Long zona común mín` = ?)) AND ((? = 1 AND `Long Zona Neutra` IS NU"& _ 
                "LL) OR (`Long Zona Neutra` = ?)) AND ((? = 1 AND `Hilo de Contacto` IS NULL) OR "& _ 
                "(`Hilo de Contacto` = ?)) AND ((? = 1 AND `Sustentador` IS NULL) OR (`Sustentado"& _ 
                "r` = ?)) AND ((? = 1 AND `C de Protección Aérea` IS NULL) OR (`C de Protección A"& _ 
                "érea` = ?)) AND ((? = 1 AND `Cable de Tierra` IS NULL) OR (`Cable de Tierra` = ?"& _ 
                ")) AND ((? = 1 AND `Feeder +` IS NULL) OR (`Feeder +` = ?)) AND ((? = 1 AND `Fee"& _ 
                "der -` IS NULL) OR (`Feeder -` = ?)) AND ((? = 1 AND `Punto fijo` IS NULL) OR (`"& _ 
                "Punto fijo` = ?)) AND ((? = 1 AND `Péndola` IS NULL) OR (`Péndola` = ?)) AND ((?"& _ 
                " = 1 AND `Anclaje` IS NULL) OR (`Anclaje` = ?)) AND ((? = 1 AND `Posición Feeder"& _ 
                " +` IS NULL) OR (`Posición Feeder +` = ?)) AND ((? = 1 AND `Posición Feeder -` I"& _ 
                "S NULL) OR (`Posición Feeder -` = ?)) AND ((? = 1 AND `Núm HC` IS NULL) OR (`Núm"& _ 
                " HC` = ?)) AND ((? = 1 AND `Núm CdPA` IS NULL) OR (`Núm CdPA` = ?)) AND ((? = 1 "& _ 
                "AND `Núm Feeder +` IS NULL) OR (`Núm Feeder +` = ?)) AND ((? = 1 AND `Núm Feeder"& _ 
                " -` IS NULL) OR (`Núm Feeder -` = ?)) AND ((? = 1 AND `Tensión HC` IS NULL) OR ("& _ 
                "`Tensión HC` = ?)) AND ((? = 1 AND `Tensión sustentador` IS NULL) OR (`Tensión s"& _ 
                "ustentador` = ?)) AND ((? = 1 AND `Tensión CdPA` IS NULL) OR (`Tensión CdPA` = ?"& _ 
                ")) AND ((? = 1 AND `Tensión Feeder +` IS NULL) OR (`Tensión Feeder +` = ?)) AND "& _ 
                "((? = 1 AND `Tensión Feeder -` IS NULL) OR (`Tensión Feeder -` = ?)) AND ((? = 1"& _ 
                " AND `Tensión punto fijo` IS NULL) OR (`Tensión punto fijo` = ?)) AND ((? = 1 AN"& _ 
                "D `Tipo` IS NULL) OR (`Tipo` = ?)) AND ((? = 1 AND `Adm/Línea` IS NULL) OR (`Adm"& _ 
                "/Línea` = ?)) AND ((? = 1 AND `Código` IS NULL) OR (`Código` = ?)) AND ((? = 1 A"& _ 
                "ND `Numeración` IS NULL) OR (`Numeración` = ?)) AND ((? = 1 AND `Tipo macizo` IS"& _ 
                " NULL) OR (`Tipo macizo` = ?)) AND ((? = 1 AND `Adm/Línea postes` IS NULL) OR (`"& _ 
                "Adm/Línea postes` = ?)) AND ((? = 1 AND `Tubo de ménsula` IS NULL) OR (`Tubo de "& _ 
                "ménsula` = ?)) AND ((? = 1 AND `Tubo tirante` IS NULL) OR (`Tubo tirante` = ?)) "& _ 
                "AND ((? = 1 AND `Cola de anclaje` IS NULL) OR (`Cola de anclaje` = ?)) AND ((? ="& _ 
                " 1 AND `Aislador Feeder +` IS NULL) OR (`Aislador Feeder +` = ?)) AND ((? = 1 AN"& _ 
                "D `Aislador Feeder -` IS NULL) OR (`Aislador Feeder -` = ?)) AND ((? = 1 AND `Di"& _ 
                "stancia apoyo y 1ª péndola` IS NULL) OR (`Distancia apoyo y 1ª péndola` = ?)) AN"& _ 
                "D ((? = 1 AND `Distancia 1ª y 2ª péndola` IS NULL) OR (`Distancia 1ª y 2ª péndol"& _ 
                "a` = ?)) AND ((? = 1 AND `Distancia máx entre péndolas` IS NULL) OR (`Distancia "& _ 
                "máx entre péndolas` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Nombre_catenaria", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nombre catenaria", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Sistema", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Sistema", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_nominal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura nominal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_nominal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura nominal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_mínima", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura mínima", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_mínima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura mínima", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_máxima", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura máxima", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_máxima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura máxima", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_catenaria", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura catenaria", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_catenaria", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura catenaria", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_máx_entre_vanos", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre vanos", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_máx_entre_vanos", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre vanos", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_máx_del_cantón", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx del cantón", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_máx_del_cantón", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx del cantón", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máximo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máximo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máximo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máximo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máx_en_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec mecánico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máx_en_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec mecánico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máx_en_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec eléctrico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máx_en_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec eléctrico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máx_en_túnel", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en túnel", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máx_en_túnel", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en túnel", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Incr_normalizado_de_vano", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr normalizado de vano", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Incr_normalizado_de_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr normalizado de vano", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Incr_máx_altura_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr máx altura HC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Incr_máx_altura_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr máx altura HC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_mín__vanos_en_sec_mec", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín  vanos en sec mec", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_mín__vanos_en_sec_mec", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín  vanos en sec mec", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_mín_vanos_en_sec_eléct", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín vanos en sec eléct", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_mín_vanos_en_sec_eléct", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín vanos en sec eléct", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Ancho_vía", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ancho vía", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Ancho_vía", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ancho vía", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Descentramiento_máx_recta", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx recta", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Descentramiento_máx_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx recta", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Descentramiento_máx_curva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx curva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Descentramiento_máx_curva", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx curva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Radio_considerable_como_recta", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Radio considerable como recta", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Radio_considerable_como_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Radio considerable como recta", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Zona_trabajo_pantógrafo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Zona trabajo pantógrafo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Zona_trabajo_pantógrafo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Zona trabajo pantógrafo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Elevación_máx_pantógrafo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Elevación máx pantógrafo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Elevación_máx_pantógrafo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Elevación máx pantógrafo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Velocidad_viento", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Velocidad viento", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Velocidad_viento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Velocidad viento", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Flecha_máx_centro_vano", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flecha máx centro vano", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Flecha_máx_centro_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flecha máx centro vano", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_carril_-_poste", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia carril - poste", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_carril_-_poste", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia carril - poste", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_base_poste_-_PMR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia base poste - PMR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_base_poste_-_PMR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia base poste - PMR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_eléct_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec mecánico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_eléct_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec mecánico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_eléct_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec eléctrico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_eléct_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec eléctrico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Long_zona_común_máx", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común máx", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Long_zona_común_máx", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común máx", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Long_zona_común_mín", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común mín", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Long_zona_común_mín", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común mín", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Long_Zona_Neutra", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long Zona Neutra", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Long_Zona_Neutra", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long Zona Neutra", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Hilo_de_Contacto", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Hilo de Contacto", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Hilo_de_Contacto", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Hilo de Contacto", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Sustentador", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sustentador", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Sustentador", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sustentador", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_C_de_Protección_Aérea", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C de Protección Aérea", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_C_de_Protección_Aérea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C de Protección Aérea", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Cable_de_Tierra", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cable de Tierra", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Cable_de_Tierra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cable de Tierra", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Punto_fijo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Punto fijo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Punto_fijo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Punto fijo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Péndola", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Péndola", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Péndola", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Péndola", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Anclaje", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Anclaje", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Anclaje", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Posición_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Posición_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Posición_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Posición_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm HC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm HC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm CdPA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm CdPA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión HC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión HC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_sustentador", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión sustentador", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_sustentador", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión sustentador", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión CdPA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_CdPA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión CdPA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_Feeder_+", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_Feeder_-", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_punto_fijo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión punto fijo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_punto_fijo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión punto fijo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tipo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Adm/Línea", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Adm/Línea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Código", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Código", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Código", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Código", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Numeración", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Numeración", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Numeración", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Numeración", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tipo_macizo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo macizo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tipo_macizo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo macizo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Adm/Línea_postes", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea postes", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Adm/Línea_postes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea postes", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tubo_de_ménsula", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo de ménsula", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tubo_de_ménsula", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo de ménsula", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tubo_tirante", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo tirante", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tubo_tirante", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo tirante", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Cola_de_anclaje", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cola de anclaje", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Cola_de_anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cola de anclaje", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Aislador_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Aislador_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Aislador_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Aislador_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_apoyo_y_1ª_péndola", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia apoyo y 1ª péndola", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_apoyo_y_1ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia apoyo y 1ª péndola", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_1ª_y_2ª_péndola", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia 1ª y 2ª péndola", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_1ª_y_2ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia 1ª y 2ª péndola", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_máx_entre_péndolas", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre péndolas", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_máx_entre_péndolas", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre péndolas", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Datos` (`Nombre catenaria`, `Sistema`, `Altura nominal`, `Altura mín"& _ 
                "ima`, `Altura máxima`, `Altura catenaria`, `Distancia máx entre vanos`, `Distanc"& _ 
                "ia máx del cantón`, `Vano máximo`, `Vano máx en sec mecánico`, `Vano máx en sec "& _ 
                "eléctrico`, `Vano máx en túnel`, `Incr normalizado de vano`, `Incr máx altura HC"& _ 
                "`, `Núm mín  vanos en sec mec`, `Núm mín vanos en sec eléct`, `Ancho vía`, `Desc"& _ 
                "entramiento máx recta`, `Descentramiento máx curva`, `Radio considerable como re"& _ 
                "cta`, `Zona trabajo pantógrafo`, `Elevación máx pantógrafo`, `Velocidad viento`,"& _ 
                " `Flecha máx centro vano`, `Distancia carril - poste`, `Distancia base poste - P"& _ 
                "MR`, `Distancia eléct sec mecánico`, `Distancia eléct sec eléctrico`, `Long zona"& _ 
                " común máx`, `Long zona común mín`, `Long Zona Neutra`, `Hilo de Contacto`, `Sus"& _ 
                "tentador`, `C de Protección Aérea`, `Cable de Tierra`, `Feeder +`, `Feeder -`, `"& _ 
                "Punto fijo`, `Péndola`, `Anclaje`, `Posición Feeder +`, `Posición Feeder -`, `Nú"& _ 
                "m HC`, `Núm CdPA`, `Núm Feeder +`, `Núm Feeder -`, `Tensión HC`, `Tensión susten"& _ 
                "tador`, `Tensión CdPA`, `Tensión Feeder +`, `Tensión Feeder -`, `Tensión punto f"& _ 
                "ijo`, `Tipo`, `Adm/Línea`, `Código`, `Numeración`, `Tipo macizo`, `Adm/Línea pos"& _ 
                "tes`, `Tubo de ménsula`, `Tubo tirante`, `Cola de anclaje`, `Aislador Feeder +`,"& _ 
                " `Aislador Feeder -`, `Distancia apoyo y 1ª péndola`, `Distancia 1ª y 2ª péndola"& _ 
                "`, `Distancia máx entre péndolas`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Nombre_catenaria", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nombre catenaria", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sistema", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_nominal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura nominal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_mínima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura mínima", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_máxima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura máxima", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_catenaria", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura catenaria", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_máx_entre_vanos", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre vanos", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_máx_del_cantón", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx del cantón", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máximo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máximo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máx_en_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec mecánico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máx_en_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec eléctrico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máx_en_túnel", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en túnel", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Incr_normalizado_de_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr normalizado de vano", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Incr_máx_altura_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr máx altura HC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_mín__vanos_en_sec_mec", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín  vanos en sec mec", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_mín_vanos_en_sec_eléct", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín vanos en sec eléct", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Ancho_vía", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ancho vía", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descentramiento_máx_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx recta", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descentramiento_máx_curva", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx curva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Radio_considerable_como_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Radio considerable como recta", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Zona_trabajo_pantógrafo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Zona trabajo pantógrafo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Elevación_máx_pantógrafo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Elevación máx pantógrafo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Velocidad_viento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Velocidad viento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Flecha_máx_centro_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flecha máx centro vano", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_carril_-_poste", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia carril - poste", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_base_poste_-_PMR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia base poste - PMR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_eléct_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec mecánico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_eléct_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec eléctrico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Long_zona_común_máx", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común máx", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Long_zona_común_mín", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común mín", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Long_Zona_Neutra", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long Zona Neutra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Hilo_de_Contacto", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Hilo de Contacto", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sustentador", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sustentador", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("C_de_Protección_Aérea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C de Protección Aérea", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cable_de_Tierra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cable de Tierra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Punto_fijo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Punto fijo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Péndola", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Péndola", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Anclaje", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Posición_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Posición_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm HC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm CdPA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión HC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_sustentador", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión sustentador", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_CdPA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión CdPA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_Feeder_+", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_Feeder_-", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_punto_fijo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión punto fijo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Línea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Código", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Código", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Numeración", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Numeración", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo_macizo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo macizo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Línea_postes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea postes", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tubo_de_ménsula", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo de ménsula", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tubo_tirante", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo tirante", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cola_de_anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cola de anclaje", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Aislador_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Aislador_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_apoyo_y_1ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia apoyo y 1ª péndola", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_1ª_y_2ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia 1ª y 2ª péndola", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_máx_entre_péndolas", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre péndolas", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Datos` SET `Nombre catenaria` = ?, `Sistema` = ?, `Altura nominal` = ?, `"& _ 
                "Altura mínima` = ?, `Altura máxima` = ?, `Altura catenaria` = ?, `Distancia máx "& _ 
                "entre vanos` = ?, `Distancia máx del cantón` = ?, `Vano máximo` = ?, `Vano máx e"& _ 
                "n sec mecánico` = ?, `Vano máx en sec eléctrico` = ?, `Vano máx en túnel` = ?, `"& _ 
                "Incr normalizado de vano` = ?, `Incr máx altura HC` = ?, `Núm mín  vanos en sec "& _ 
                "mec` = ?, `Núm mín vanos en sec eléct` = ?, `Ancho vía` = ?, `Descentramiento má"& _ 
                "x recta` = ?, `Descentramiento máx curva` = ?, `Radio considerable como recta` ="& _ 
                " ?, `Zona trabajo pantógrafo` = ?, `Elevación máx pantógrafo` = ?, `Velocidad vi"& _ 
                "ento` = ?, `Flecha máx centro vano` = ?, `Distancia carril - poste` = ?, `Distan"& _ 
                "cia base poste - PMR` = ?, `Distancia eléct sec mecánico` = ?, `Distancia eléct "& _ 
                "sec eléctrico` = ?, `Long zona común máx` = ?, `Long zona común mín` = ?, `Long "& _ 
                "Zona Neutra` = ?, `Hilo de Contacto` = ?, `Sustentador` = ?, `C de Protección Aé"& _ 
                "rea` = ?, `Cable de Tierra` = ?, `Feeder +` = ?, `Feeder -` = ?, `Punto fijo` = "& _ 
                "?, `Péndola` = ?, `Anclaje` = ?, `Posición Feeder +` = ?, `Posición Feeder -` = "& _ 
                "?, `Núm HC` = ?, `Núm CdPA` = ?, `Núm Feeder +` = ?, `Núm Feeder -` = ?, `Tensió"& _ 
                "n HC` = ?, `Tensión sustentador` = ?, `Tensión CdPA` = ?, `Tensión Feeder +` = ?"& _ 
                ", `Tensión Feeder -` = ?, `Tensión punto fijo` = ?, `Tipo` = ?, `Adm/Línea` = ?,"& _ 
                " `Código` = ?, `Numeración` = ?, `Tipo macizo` = ?, `Adm/Línea postes` = ?, `Tub"& _ 
                "o de ménsula` = ?, `Tubo tirante` = ?, `Cola de anclaje` = ?, `Aislador Feeder +"& _ 
                "` = ?, `Aislador Feeder -` = ?, `Distancia apoyo y 1ª péndola` = ?, `Distancia 1"& _ 
                "ª y 2ª péndola` = ?, `Distancia máx entre péndolas` = ? WHERE ((`Nombre catenari"& _ 
                "a` = ?) AND ((? = 1 AND `Sistema` IS NULL) OR (`Sistema` = ?)) AND ((? = 1 AND `"& _ 
                "Altura nominal` IS NULL) OR (`Altura nominal` = ?)) AND ((? = 1 AND `Altura míni"& _ 
                "ma` IS NULL) OR (`Altura mínima` = ?)) AND ((? = 1 AND `Altura máxima` IS NULL) "& _ 
                "OR (`Altura máxima` = ?)) AND ((? = 1 AND `Altura catenaria` IS NULL) OR (`Altur"& _ 
                "a catenaria` = ?)) AND ((? = 1 AND `Distancia máx entre vanos` IS NULL) OR (`Dis"& _ 
                "tancia máx entre vanos` = ?)) AND ((? = 1 AND `Distancia máx del cantón` IS NULL"& _ 
                ") OR (`Distancia máx del cantón` = ?)) AND ((? = 1 AND `Vano máximo` IS NULL) OR"& _ 
                " (`Vano máximo` = ?)) AND ((? = 1 AND `Vano máx en sec mecánico` IS NULL) OR (`V"& _ 
                "ano máx en sec mecánico` = ?)) AND ((? = 1 AND `Vano máx en sec eléctrico` IS NU"& _ 
                "LL) OR (`Vano máx en sec eléctrico` = ?)) AND ((? = 1 AND `Vano máx en túnel` IS"& _ 
                " NULL) OR (`Vano máx en túnel` = ?)) AND ((? = 1 AND `Incr normalizado de vano` "& _ 
                "IS NULL) OR (`Incr normalizado de vano` = ?)) AND ((? = 1 AND `Incr máx altura H"& _ 
                "C` IS NULL) OR (`Incr máx altura HC` = ?)) AND ((? = 1 AND `Núm mín  vanos en se"& _ 
                "c mec` IS NULL) OR (`Núm mín  vanos en sec mec` = ?)) AND ((? = 1 AND `Núm mín v"& _ 
                "anos en sec eléct` IS NULL) OR (`Núm mín vanos en sec eléct` = ?)) AND ((? = 1 A"& _ 
                "ND `Ancho vía` IS NULL) OR (`Ancho vía` = ?)) AND ((? = 1 AND `Descentramiento m"& _ 
                "áx recta` IS NULL) OR (`Descentramiento máx recta` = ?)) AND ((? = 1 AND `Descen"& _ 
                "tramiento máx curva` IS NULL) OR (`Descentramiento máx curva` = ?)) AND ((? = 1 "& _ 
                "AND `Radio considerable como recta` IS NULL) OR (`Radio considerable como recta`"& _ 
                " = ?)) AND ((? = 1 AND `Zona trabajo pantógrafo` IS NULL) OR (`Zona trabajo pant"& _ 
                "ógrafo` = ?)) AND ((? = 1 AND `Elevación máx pantógrafo` IS NULL) OR (`Elevación"& _ 
                " máx pantógrafo` = ?)) AND ((? = 1 AND `Velocidad viento` IS NULL) OR (`Velocida"& _ 
                "d viento` = ?)) AND ((? = 1 AND `Flecha máx centro vano` IS NULL) OR (`Flecha má"& _ 
                "x centro vano` = ?)) AND ((? = 1 AND `Distancia carril - poste` IS NULL) OR (`Di"& _ 
                "stancia carril - poste` = ?)) AND ((? = 1 AND `Distancia base poste - PMR` IS NU"& _ 
                "LL) OR (`Distancia base poste - PMR` = ?)) AND ((? = 1 AND `Distancia eléct sec "& _ 
                "mecánico` IS NULL) OR (`Distancia eléct sec mecánico` = ?)) AND ((? = 1 AND `Dis"& _ 
                "tancia eléct sec eléctrico` IS NULL) OR (`Distancia eléct sec eléctrico` = ?)) A"& _ 
                "ND ((? = 1 AND `Long zona común máx` IS NULL) OR (`Long zona común máx` = ?)) AN"& _ 
                "D ((? = 1 AND `Long zona común mín` IS NULL) OR (`Long zona común mín` = ?)) AND"& _ 
                " ((? = 1 AND `Long Zona Neutra` IS NULL) OR (`Long Zona Neutra` = ?)) AND ((? = "& _ 
                "1 AND `Hilo de Contacto` IS NULL) OR (`Hilo de Contacto` = ?)) AND ((? = 1 AND `"& _ 
                "Sustentador` IS NULL) OR (`Sustentador` = ?)) AND ((? = 1 AND `C de Protección A"& _ 
                "érea` IS NULL) OR (`C de Protección Aérea` = ?)) AND ((? = 1 AND `Cable de Tierr"& _ 
                "a` IS NULL) OR (`Cable de Tierra` = ?)) AND ((? = 1 AND `Feeder +` IS NULL) OR ("& _ 
                "`Feeder +` = ?)) AND ((? = 1 AND `Feeder -` IS NULL) OR (`Feeder -` = ?)) AND (("& _ 
                "? = 1 AND `Punto fijo` IS NULL) OR (`Punto fijo` = ?)) AND ((? = 1 AND `Péndola`"& _ 
                " IS NULL) OR (`Péndola` = ?)) AND ((? = 1 AND `Anclaje` IS NULL) OR (`Anclaje` ="& _ 
                " ?)) AND ((? = 1 AND `Posición Feeder +` IS NULL) OR (`Posición Feeder +` = ?)) "& _ 
                "AND ((? = 1 AND `Posición Feeder -` IS NULL) OR (`Posición Feeder -` = ?)) AND ("& _ 
                "(? = 1 AND `Núm HC` IS NULL) OR (`Núm HC` = ?)) AND ((? = 1 AND `Núm CdPA` IS NU"& _ 
                "LL) OR (`Núm CdPA` = ?)) AND ((? = 1 AND `Núm Feeder +` IS NULL) OR (`Núm Feeder"& _ 
                " +` = ?)) AND ((? = 1 AND `Núm Feeder -` IS NULL) OR (`Núm Feeder -` = ?)) AND ("& _ 
                "(? = 1 AND `Tensión HC` IS NULL) OR (`Tensión HC` = ?)) AND ((? = 1 AND `Tensión"& _ 
                " sustentador` IS NULL) OR (`Tensión sustentador` = ?)) AND ((? = 1 AND `Tensión "& _ 
                "CdPA` IS NULL) OR (`Tensión CdPA` = ?)) AND ((? = 1 AND `Tensión Feeder +` IS NU"& _ 
                "LL) OR (`Tensión Feeder +` = ?)) AND ((? = 1 AND `Tensión Feeder -` IS NULL) OR "& _ 
                "(`Tensión Feeder -` = ?)) AND ((? = 1 AND `Tensión punto fijo` IS NULL) OR (`Ten"& _ 
                "sión punto fijo` = ?)) AND ((? = 1 AND `Tipo` IS NULL) OR (`Tipo` = ?)) AND ((? "& _ 
                "= 1 AND `Adm/Línea` IS NULL) OR (`Adm/Línea` = ?)) AND ((? = 1 AND `Código` IS N"& _ 
                "ULL) OR (`Código` = ?)) AND ((? = 1 AND `Numeración` IS NULL) OR (`Numeración` ="& _ 
                " ?)) AND ((? = 1 AND `Tipo macizo` IS NULL) OR (`Tipo macizo` = ?)) AND ((? = 1 "& _ 
                "AND `Adm/Línea postes` IS NULL) OR (`Adm/Línea postes` = ?)) AND ((? = 1 AND `Tu"& _ 
                "bo de ménsula` IS NULL) OR (`Tubo de ménsula` = ?)) AND ((? = 1 AND `Tubo tirant"& _ 
                "e` IS NULL) OR (`Tubo tirante` = ?)) AND ((? = 1 AND `Cola de anclaje` IS NULL) "& _ 
                "OR (`Cola de anclaje` = ?)) AND ((? = 1 AND `Aislador Feeder +` IS NULL) OR (`Ai"& _ 
                "slador Feeder +` = ?)) AND ((? = 1 AND `Aislador Feeder -` IS NULL) OR (`Aislado"& _ 
                "r Feeder -` = ?)) AND ((? = 1 AND `Distancia apoyo y 1ª péndola` IS NULL) OR (`D"& _ 
                "istancia apoyo y 1ª péndola` = ?)) AND ((? = 1 AND `Distancia 1ª y 2ª péndola` I"& _ 
                "S NULL) OR (`Distancia 1ª y 2ª péndola` = ?)) AND ((? = 1 AND `Distancia máx ent"& _ 
                "re péndolas` IS NULL) OR (`Distancia máx entre péndolas` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Nombre_catenaria", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nombre catenaria", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sistema", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_nominal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura nominal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_mínima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura mínima", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_máxima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura máxima", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Altura_catenaria", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura catenaria", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_máx_entre_vanos", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre vanos", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_máx_del_cantón", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx del cantón", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máximo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máximo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máx_en_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec mecánico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máx_en_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec eléctrico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Vano_máx_en_túnel", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en túnel", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Incr_normalizado_de_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr normalizado de vano", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Incr_máx_altura_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr máx altura HC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_mín__vanos_en_sec_mec", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín  vanos en sec mec", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_mín_vanos_en_sec_eléct", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín vanos en sec eléct", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Ancho_vía", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ancho vía", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descentramiento_máx_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx recta", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descentramiento_máx_curva", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx curva", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Radio_considerable_como_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Radio considerable como recta", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Zona_trabajo_pantógrafo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Zona trabajo pantógrafo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Elevación_máx_pantógrafo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Elevación máx pantógrafo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Velocidad_viento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Velocidad viento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Flecha_máx_centro_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flecha máx centro vano", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_carril_-_poste", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia carril - poste", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_base_poste_-_PMR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia base poste - PMR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_eléct_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec mecánico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_eléct_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec eléctrico", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Long_zona_común_máx", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común máx", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Long_zona_común_mín", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común mín", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Long_Zona_Neutra", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long Zona Neutra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Hilo_de_Contacto", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Hilo de Contacto", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sustentador", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sustentador", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("C_de_Protección_Aérea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C de Protección Aérea", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cable_de_Tierra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cable de Tierra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Punto_fijo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Punto fijo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Péndola", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Péndola", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Anclaje", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Posición_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Posición_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm HC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm CdPA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Núm_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión HC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_sustentador", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión sustentador", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_CdPA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión CdPA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_Feeder_+", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_Feeder_-", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tensión_punto_fijo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión punto fijo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Línea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Código", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Código", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Numeración", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Numeración", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo_macizo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo macizo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Línea_postes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea postes", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tubo_de_ménsula", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo de ménsula", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tubo_tirante", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo tirante", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cola_de_anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cola de anclaje", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Aislador_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder +", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Aislador_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder -", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_apoyo_y_1ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia apoyo y 1ª péndola", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_1ª_y_2ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia 1ª y 2ª péndola", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Distancia_máx_entre_péndolas", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre péndolas", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Nombre_catenaria", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nombre catenaria", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Sistema", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Sistema", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_nominal", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura nominal", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_nominal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura nominal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_mínima", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura mínima", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_mínima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura mínima", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_máxima", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura máxima", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_máxima", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura máxima", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Altura_catenaria", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura catenaria", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Altura_catenaria", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Altura catenaria", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_máx_entre_vanos", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre vanos", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_máx_entre_vanos", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre vanos", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_máx_del_cantón", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx del cantón", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_máx_del_cantón", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx del cantón", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máximo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máximo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máximo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máximo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máx_en_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec mecánico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máx_en_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec mecánico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máx_en_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec eléctrico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máx_en_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en sec eléctrico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Vano_máx_en_túnel", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en túnel", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Vano_máx_en_túnel", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Vano máx en túnel", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Incr_normalizado_de_vano", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr normalizado de vano", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Incr_normalizado_de_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr normalizado de vano", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Incr_máx_altura_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr máx altura HC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Incr_máx_altura_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Incr máx altura HC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_mín__vanos_en_sec_mec", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín  vanos en sec mec", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_mín__vanos_en_sec_mec", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín  vanos en sec mec", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_mín_vanos_en_sec_eléct", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín vanos en sec eléct", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_mín_vanos_en_sec_eléct", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm mín vanos en sec eléct", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Ancho_vía", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ancho vía", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Ancho_vía", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ancho vía", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Descentramiento_máx_recta", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx recta", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Descentramiento_máx_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx recta", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Descentramiento_máx_curva", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx curva", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Descentramiento_máx_curva", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descentramiento máx curva", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Radio_considerable_como_recta", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Radio considerable como recta", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Radio_considerable_como_recta", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Radio considerable como recta", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Zona_trabajo_pantógrafo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Zona trabajo pantógrafo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Zona_trabajo_pantógrafo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Zona trabajo pantógrafo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Elevación_máx_pantógrafo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Elevación máx pantógrafo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Elevación_máx_pantógrafo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Elevación máx pantógrafo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Velocidad_viento", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Velocidad viento", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Velocidad_viento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Velocidad viento", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Flecha_máx_centro_vano", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flecha máx centro vano", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Flecha_máx_centro_vano", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flecha máx centro vano", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_carril_-_poste", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia carril - poste", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_carril_-_poste", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia carril - poste", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_base_poste_-_PMR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia base poste - PMR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_base_poste_-_PMR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia base poste - PMR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_eléct_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec mecánico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_eléct_sec_mecánico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec mecánico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_eléct_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec eléctrico", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_eléct_sec_eléctrico", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia eléct sec eléctrico", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Long_zona_común_máx", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común máx", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Long_zona_común_máx", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común máx", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Long_zona_común_mín", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común mín", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Long_zona_común_mín", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long zona común mín", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Long_Zona_Neutra", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long Zona Neutra", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Long_Zona_Neutra", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Long Zona Neutra", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Hilo_de_Contacto", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Hilo de Contacto", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Hilo_de_Contacto", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Hilo de Contacto", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Sustentador", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sustentador", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Sustentador", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sustentador", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_C_de_Protección_Aérea", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C de Protección Aérea", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_C_de_Protección_Aérea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "C de Protección Aérea", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Cable_de_Tierra", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cable de Tierra", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Cable_de_Tierra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cable de Tierra", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Punto_fijo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Punto fijo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Punto_fijo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Punto fijo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Péndola", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Péndola", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Péndola", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Péndola", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Anclaje", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Anclaje", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Anclaje", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Posición_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Posición_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Posición_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Posición_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Posición Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm HC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm HC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm CdPA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm CdPA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Núm_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Núm_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Núm Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_HC", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión HC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_HC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión HC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_sustentador", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión sustentador", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_sustentador", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión sustentador", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_CdPA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión CdPA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_CdPA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión CdPA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_Feeder_+", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_Feeder_-", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tensión_punto_fijo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión punto fijo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tensión_punto_fijo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tensión punto fijo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tipo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Adm/Línea", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Adm/Línea", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Código", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Código", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Código", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Código", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Numeración", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Numeración", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Numeración", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Numeración", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tipo_macizo", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo macizo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tipo_macizo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo macizo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Adm/Línea_postes", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea postes", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Adm/Línea_postes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Línea postes", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tubo_de_ménsula", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo de ménsula", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tubo_de_ménsula", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo de ménsula", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Tubo_tirante", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo tirante", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Tubo_tirante", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tubo tirante", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Cola_de_anclaje", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cola de anclaje", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Cola_de_anclaje", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cola de anclaje", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Aislador_Feeder_+", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder +", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Aislador_Feeder_+", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder +", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Aislador_Feeder_-", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder -", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Aislador_Feeder_-", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Aislador Feeder -", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_apoyo_y_1ª_péndola", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia apoyo y 1ª péndola", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_apoyo_y_1ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia apoyo y 1ª péndola", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_1ª_y_2ª_péndola", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia 1ª y 2ª péndola", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_1ª_y_2ª_péndola", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia 1ª y 2ª péndola", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Distancia_máx_entre_péndolas", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre péndolas", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Distancia_máx_entre_péndolas", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Distancia máx entre péndolas", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Nombre catenaria], Sistema, [Altura nominal], [Altura mínima], [Altura má"& _ 
                "xima], [Altura catenaria], [Distancia máx entre vanos], [Distancia máx del cantó"& _ 
                "n], [Vano máximo], [Vano máx en sec mecánico], [Vano máx en sec eléctrico], [Van"& _ 
                "o máx en túnel], [Incr normalizado de vano], [Incr máx altura HC], [Núm mín  van"& _ 
                "os en sec mec], [Núm mín vanos en sec eléct], [Ancho vía], [Descentramiento máx "& _ 
                "recta], [Descentramiento máx curva], [Radio considerable como recta], [Zona trab"& _ 
                "ajo pantógrafo], [Elevación máx pantógrafo], [Velocidad viento], [Flecha máx cen"& _ 
                "tro vano], [Distancia carril - poste], [Distancia base poste - PMR], [Distancia "& _ 
                "eléct sec mecánico], [Distancia eléct sec eléctrico], [Long zona común máx], [Lo"& _ 
                "ng zona común mín], [Long Zona Neutra], [Hilo de Contacto], Sustentador, [C de P"& _ 
                "rotección Aérea], [Cable de Tierra], [Feeder +], [Feeder -], [Punto fijo], Péndo"& _ 
                "la, Anclaje, [Posición Feeder +], [Posición Feeder -], [Núm HC], [Núm CdPA], [Nú"& _ 
                "m Feeder +], [Núm Feeder -], [Tensión HC], [Tensión sustentador], [Tensión CdPA]"& _ 
                ", [Tensión Feeder +], [Tensión Feeder -], [Tensión punto fijo], Tipo, [Adm/Línea"& _ 
                "], Código, Numeración, [Tipo macizo], [Adm/Línea postes], [Tubo de ménsula], [Tu"& _ 
                "bo tirante], [Cola de anclaje], [Aislador Feeder +], [Aislador Feeder -], [Dista"& _ 
                "ncia apoyo y 1ª péndola], [Distancia 1ª y 2ª péndola], [Distancia máx entre pénd"& _ 
                "olas] FROM Datos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.DatosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.DatosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.DatosDataTable = New Base_de_datosDataSet.DatosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.DatosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Datos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Nombre_catenaria As String,  _
                    ByVal Original_Sistema As String,  _
                    ByVal Original_Altura_nominal As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_mínima As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_máxima As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_catenaria As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_entre_vanos As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_del_cantón As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máximo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_túnel As Global.System.Nullable(Of Double),  _
                    ByVal Original_Incr_normalizado_de_vano As Global.System.Nullable(Of Double),  _
                    ByVal Original_Incr_máx_altura_HC As Global.System.Nullable(Of Double),  _
                    ByVal Original_Núm_mín__vanos_en_sec_mec As Global.System.Nullable(Of Double),  _
                    ByVal Original_Núm_mín_vanos_en_sec_eléct As Global.System.Nullable(Of Double),  _
                    ByVal Original_Ancho_vía As Global.System.Nullable(Of Double),  _
                    ByVal Original_Descentramiento_máx_recta As Global.System.Nullable(Of Double),  _
                    ByVal Original_Descentramiento_máx_curva As Global.System.Nullable(Of Double),  _
                    ByVal Original_Radio_considerable_como_recta As Global.System.Nullable(Of Double),  _
                    ByVal Original_Zona_trabajo_pantógrafo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Elevación_máx_pantógrafo As String,  _
                    ByVal Original_Velocidad_viento As Global.System.Nullable(Of Double),  _
                    ByVal Original_Flecha_máx_centro_vano As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Distancia_carril___poste As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Distancia_base_poste___PMR As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_eléct_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_eléct_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_zona_común_máx As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_zona_común_mín As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_Zona_Neutra As Global.System.Nullable(Of Double),  _
                    ByVal Original_Hilo_de_Contacto As String,  _
                    ByVal Original_Sustentador As String,  _
                    ByVal Original_C_de_Protección_Aérea As String,  _
                    ByVal Original_Cable_de_Tierra As String,  _
                    ByVal _Original_Feeder__ As String,  _
                    ByVal _Original_Feeder__1 As String,  _
                    ByVal Original_Punto_fijo As String,  _
                    ByVal Original_Péndola As String,  _
                    ByVal Original_Anclaje As String,  _
                    ByVal _Original_Posición_Feeder__ As String,  _
                    ByVal _Original_Posición_Feeder__1 As String,  _
                    ByVal Original_Núm_HC As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Núm_CdPA As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_Núm_Feeder__ As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_Núm_Feeder__1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Tensión_HC As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_sustentador As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_CdPA As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Tensión_Feeder__ As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Tensión_Feeder__1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_punto_fijo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tipo As String,  _
                    ByVal _Original_Adm_Línea As String,  _
                    ByVal Original_Código As String,  _
                    ByVal Original_Numeración As String,  _
                    ByVal Original_Tipo_macizo As String,  _
                    ByVal _Original_Adm_Línea_postes As String,  _
                    ByVal Original_Tubo_de_ménsula As String,  _
                    ByVal Original_Tubo_tirante As String,  _
                    ByVal Original_Cola_de_anclaje As String,  _
                    ByVal _Original_Aislador_Feeder__ As String,  _
                    ByVal _Original_Aislador_Feeder__1 As String,  _
                    ByVal Original_Distancia_apoyo_y_1ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_1ª_y_2ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_entre_péndolas As Global.System.Nullable(Of Double)) As Integer
            If (Original_Nombre_catenaria Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Nombre_catenaria,String)
            End If
            If (Original_Sistema Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Sistema,String)
            End If
            If (Original_Altura_nominal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Altura_nominal.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Altura_mínima.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Altura_mínima.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Altura_máxima.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Altura_máxima.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Altura_catenaria.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Altura_catenaria.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_máx_entre_vanos.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Distancia_máx_entre_vanos.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_máx_del_cantón.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Distancia_máx_del_cantón.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máximo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Vano_máximo.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máx_en_sec_mecánico.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Vano_máx_en_sec_mecánico.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máx_en_sec_eléctrico.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Vano_máx_en_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máx_en_túnel.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Vano_máx_en_túnel.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Incr_normalizado_de_vano.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Incr_normalizado_de_vano.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Incr_máx_altura_HC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Incr_máx_altura_HC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Núm_mín__vanos_en_sec_mec.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Núm_mín__vanos_en_sec_mec.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Núm_mín_vanos_en_sec_eléct.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Núm_mín_vanos_en_sec_eléct.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Ancho_vía.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Ancho_vía.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_Descentramiento_máx_recta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Descentramiento_máx_recta.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_Descentramiento_máx_curva.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_Descentramiento_máx_curva.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Radio_considerable_como_recta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Radio_considerable_como_recta.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Zona_trabajo_pantógrafo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_Zona_trabajo_pantógrafo.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Elevación_máx_pantógrafo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Elevación_máx_pantógrafo,String)
            End If
            If (Original_Velocidad_viento.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_Velocidad_viento.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_Flecha_máx_centro_vano.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_Flecha_máx_centro_vano.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (_Original_Distancia_carril___poste.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(_Original_Distancia_carril___poste.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (_Original_Distancia_base_poste___PMR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(_Original_Distancia_base_poste___PMR.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_eléct_sec_mecánico.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_Distancia_eléct_sec_mecánico.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_eléct_sec_eléctrico.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_Distancia_eléct_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_Long_zona_común_máx.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_Long_zona_común_máx.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_Long_zona_común_mín.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_Long_zona_común_mín.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_Long_Zona_Neutra.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_Long_Zona_Neutra.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_Hilo_de_Contacto Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_Hilo_de_Contacto,String)
            End If
            If (Original_Sustentador Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_Sustentador,String)
            End If
            If (Original_C_de_Protección_Aérea Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_C_de_Protección_Aérea,String)
            End If
            If (Original_Cable_de_Tierra Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_Cable_de_Tierra,String)
            End If
            If (_Original_Feeder__ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(_Original_Feeder__,String)
            End If
            If (_Original_Feeder__1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(_Original_Feeder__1,String)
            End If
            If (Original_Punto_fijo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_Punto_fijo,String)
            End If
            If (Original_Péndola Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_Péndola,String)
            End If
            If (Original_Anclaje Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_Anclaje,String)
            End If
            If (_Original_Posición_Feeder__ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(_Original_Posición_Feeder__,String)
            End If
            If (_Original_Posición_Feeder__1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(_Original_Posición_Feeder__1,String)
            End If
            If (Original_Núm_HC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_Núm_HC.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_Núm_CdPA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_Núm_CdPA.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (_Original_Núm_Feeder__.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(_Original_Núm_Feeder__.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (_Original_Núm_Feeder__1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(_Original_Núm_Feeder__1.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_HC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_Tensión_HC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_sustentador.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_Tensión_sustentador.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_CdPA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_Tensión_CdPA.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (_Original_Tensión_Feeder__.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(_Original_Tensión_Feeder__.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (_Original_Tensión_Feeder__1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(_Original_Tensión_Feeder__1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_punto_fijo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_Tensión_punto_fijo.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_Tipo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(Original_Tipo,String)
            End If
            If (_Original_Adm_Línea Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(_Original_Adm_Línea,String)
            End If
            If (Original_Código Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(Original_Código,String)
            End If
            If (Original_Numeración Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_Numeración,String)
            End If
            If (Original_Tipo_macizo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(Original_Tipo_macizo,String)
            End If
            If (_Original_Adm_Línea_postes Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(_Original_Adm_Línea_postes,String)
            End If
            If (Original_Tubo_de_ménsula Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(Original_Tubo_de_ménsula,String)
            End If
            If (Original_Tubo_tirante Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(Original_Tubo_tirante,String)
            End If
            If (Original_Cola_de_anclaje Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(Original_Cola_de_anclaje,String)
            End If
            If (_Original_Aislador_Feeder__ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(_Original_Aislador_Feeder__,String)
            End If
            If (_Original_Aislador_Feeder__1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(_Original_Aislador_Feeder__1,String)
            End If
            If (Original_Distancia_apoyo_y_1ª_péndola.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(Original_Distancia_apoyo_y_1ª_péndola.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_1ª_y_2ª_péndola.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(Original_Distancia_1ª_y_2ª_péndola.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_máx_entre_péndolas.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(Original_Distancia_máx_entre_péndolas.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Nombre_catenaria As String,  _
                    ByVal Sistema As String,  _
                    ByVal Altura_nominal As Global.System.Nullable(Of Double),  _
                    ByVal Altura_mínima As Global.System.Nullable(Of Double),  _
                    ByVal Altura_máxima As Global.System.Nullable(Of Double),  _
                    ByVal Altura_catenaria As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_entre_vanos As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_del_cantón As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máximo As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_túnel As Global.System.Nullable(Of Double),  _
                    ByVal Incr_normalizado_de_vano As Global.System.Nullable(Of Double),  _
                    ByVal Incr_máx_altura_HC As Global.System.Nullable(Of Double),  _
                    ByVal Núm_mín__vanos_en_sec_mec As Global.System.Nullable(Of Double),  _
                    ByVal Núm_mín_vanos_en_sec_eléct As Global.System.Nullable(Of Double),  _
                    ByVal Ancho_vía As Global.System.Nullable(Of Double),  _
                    ByVal Descentramiento_máx_recta As Global.System.Nullable(Of Double),  _
                    ByVal Descentramiento_máx_curva As Global.System.Nullable(Of Double),  _
                    ByVal Radio_considerable_como_recta As Global.System.Nullable(Of Double),  _
                    ByVal Zona_trabajo_pantógrafo As Global.System.Nullable(Of Double),  _
                    ByVal Elevación_máx_pantógrafo As String,  _
                    ByVal Velocidad_viento As Global.System.Nullable(Of Double),  _
                    ByVal Flecha_máx_centro_vano As Global.System.Nullable(Of Double),  _
                    ByVal _Distancia_carril___poste As Global.System.Nullable(Of Double),  _
                    ByVal _Distancia_base_poste___PMR As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_eléct_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_eléct_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Long_zona_común_máx As Global.System.Nullable(Of Double),  _
                    ByVal Long_zona_común_mín As Global.System.Nullable(Of Double),  _
                    ByVal Long_Zona_Neutra As Global.System.Nullable(Of Double),  _
                    ByVal Hilo_de_Contacto As String,  _
                    ByVal Sustentador As String,  _
                    ByVal C_de_Protección_Aérea As String,  _
                    ByVal Cable_de_Tierra As String,  _
                    ByVal _Feeder__ As String,  _
                    ByVal _Feeder__1 As String,  _
                    ByVal Punto_fijo As String,  _
                    ByVal Péndola As String,  _
                    ByVal Anclaje As String,  _
                    ByVal _Posición_Feeder__ As String,  _
                    ByVal _Posición_Feeder__1 As String,  _
                    ByVal Núm_HC As Global.System.Nullable(Of Integer),  _
                    ByVal Núm_CdPA As Global.System.Nullable(Of Integer),  _
                    ByVal _Núm_Feeder__ As Global.System.Nullable(Of Integer),  _
                    ByVal _Núm_Feeder__1 As Global.System.Nullable(Of Integer),  _
                    ByVal Tensión_HC As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_sustentador As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_CdPA As Global.System.Nullable(Of Double),  _
                    ByVal _Tensión_Feeder__ As Global.System.Nullable(Of Double),  _
                    ByVal _Tensión_Feeder__1 As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_punto_fijo As Global.System.Nullable(Of Double),  _
                    ByVal Tipo As String,  _
                    ByVal _Adm_Línea As String,  _
                    ByVal Código As String,  _
                    ByVal Numeración As String,  _
                    ByVal Tipo_macizo As String,  _
                    ByVal _Adm_Línea_postes As String,  _
                    ByVal Tubo_de_ménsula As String,  _
                    ByVal Tubo_tirante As String,  _
                    ByVal Cola_de_anclaje As String,  _
                    ByVal _Aislador_Feeder__ As String,  _
                    ByVal _Aislador_Feeder__1 As String,  _
                    ByVal Distancia_apoyo_y_1ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_1ª_y_2ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_entre_péndolas As Global.System.Nullable(Of Double)) As Integer
            If (Nombre_catenaria Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Nombre_catenaria,String)
            End If
            If (Sistema Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Sistema,String)
            End If
            If (Altura_nominal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Altura_nominal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Altura_mínima.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Altura_mínima.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Altura_máxima.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Altura_máxima.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Altura_catenaria.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Altura_catenaria.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Distancia_máx_entre_vanos.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Distancia_máx_entre_vanos.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Distancia_máx_del_cantón.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Distancia_máx_del_cantón.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Vano_máximo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Vano_máximo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Vano_máx_en_sec_mecánico.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Vano_máx_en_sec_mecánico.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Vano_máx_en_sec_eléctrico.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Vano_máx_en_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Vano_máx_en_túnel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Vano_máx_en_túnel.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Incr_normalizado_de_vano.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Incr_normalizado_de_vano.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Incr_máx_altura_HC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Incr_máx_altura_HC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Núm_mín__vanos_en_sec_mec.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Núm_mín__vanos_en_sec_mec.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Núm_mín_vanos_en_sec_eléct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Núm_mín_vanos_en_sec_eléct.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Ancho_vía.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Ancho_vía.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Descentramiento_máx_recta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Descentramiento_máx_recta.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Descentramiento_máx_curva.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Descentramiento_máx_curva.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Radio_considerable_como_recta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Radio_considerable_como_recta.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Zona_trabajo_pantógrafo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Zona_trabajo_pantógrafo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Elevación_máx_pantógrafo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Elevación_máx_pantógrafo,String)
            End If
            If (Velocidad_viento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Velocidad_viento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Flecha_máx_centro_vano.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Flecha_máx_centro_vano.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (_Distancia_carril___poste.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(_Distancia_carril___poste.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (_Distancia_base_poste___PMR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(_Distancia_base_poste___PMR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Distancia_eléct_sec_mecánico.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Distancia_eléct_sec_mecánico.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Distancia_eléct_sec_eléctrico.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Distancia_eléct_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Long_zona_común_máx.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Long_zona_común_máx.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Long_zona_común_mín.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Long_zona_común_mín.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Long_Zona_Neutra.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Long_Zona_Neutra.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Hilo_de_Contacto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Hilo_de_Contacto,String)
            End If
            If (Sustentador Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Sustentador,String)
            End If
            If (C_de_Protección_Aérea Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(C_de_Protección_Aérea,String)
            End If
            If (Cable_de_Tierra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Cable_de_Tierra,String)
            End If
            If (_Feeder__ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(_Feeder__,String)
            End If
            If (_Feeder__1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(_Feeder__1,String)
            End If
            If (Punto_fijo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Punto_fijo,String)
            End If
            If (Péndola Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Péndola,String)
            End If
            If (Anclaje Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(Anclaje,String)
            End If
            If (_Posición_Feeder__ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(_Posición_Feeder__,String)
            End If
            If (_Posición_Feeder__1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(_Posición_Feeder__1,String)
            End If
            If (Núm_HC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(Núm_HC.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Núm_CdPA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(Núm_CdPA.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (_Núm_Feeder__.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(_Núm_Feeder__.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (_Núm_Feeder__1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(_Núm_Feeder__1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Tensión_HC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Tensión_HC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Tensión_sustentador.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(Tensión_sustentador.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Tensión_CdPA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Tensión_CdPA.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (_Tensión_Feeder__.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(_Tensión_Feeder__.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (_Tensión_Feeder__1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(_Tensión_Feeder__1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Tensión_punto_fijo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(Tensión_punto_fijo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(Tipo,String)
            End If
            If (_Adm_Línea Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(_Adm_Línea,String)
            End If
            If (Código Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(Código,String)
            End If
            If (Numeración Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(Numeración,String)
            End If
            If (Tipo_macizo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(Tipo_macizo,String)
            End If
            If (_Adm_Línea_postes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(_Adm_Línea_postes,String)
            End If
            If (Tubo_de_ménsula Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(Tubo_de_ménsula,String)
            End If
            If (Tubo_tirante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(Tubo_tirante,String)
            End If
            If (Cola_de_anclaje Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(Cola_de_anclaje,String)
            End If
            If (_Aislador_Feeder__ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(_Aislador_Feeder__,String)
            End If
            If (_Aislador_Feeder__1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(_Aislador_Feeder__1,String)
            End If
            If (Distancia_apoyo_y_1ª_péndola.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(Distancia_apoyo_y_1ª_péndola.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Distancia_1ª_y_2ª_péndola.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(Distancia_1ª_y_2ª_péndola.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Distancia_máx_entre_péndolas.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(Distancia_máx_entre_péndolas.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Nombre_catenaria As String,  _
                    ByVal Sistema As String,  _
                    ByVal Altura_nominal As Global.System.Nullable(Of Double),  _
                    ByVal Altura_mínima As Global.System.Nullable(Of Double),  _
                    ByVal Altura_máxima As Global.System.Nullable(Of Double),  _
                    ByVal Altura_catenaria As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_entre_vanos As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_del_cantón As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máximo As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_túnel As Global.System.Nullable(Of Double),  _
                    ByVal Incr_normalizado_de_vano As Global.System.Nullable(Of Double),  _
                    ByVal Incr_máx_altura_HC As Global.System.Nullable(Of Double),  _
                    ByVal Núm_mín__vanos_en_sec_mec As Global.System.Nullable(Of Double),  _
                    ByVal Núm_mín_vanos_en_sec_eléct As Global.System.Nullable(Of Double),  _
                    ByVal Ancho_vía As Global.System.Nullable(Of Double),  _
                    ByVal Descentramiento_máx_recta As Global.System.Nullable(Of Double),  _
                    ByVal Descentramiento_máx_curva As Global.System.Nullable(Of Double),  _
                    ByVal Radio_considerable_como_recta As Global.System.Nullable(Of Double),  _
                    ByVal Zona_trabajo_pantógrafo As Global.System.Nullable(Of Double),  _
                    ByVal Elevación_máx_pantógrafo As String,  _
                    ByVal Velocidad_viento As Global.System.Nullable(Of Double),  _
                    ByVal Flecha_máx_centro_vano As Global.System.Nullable(Of Double),  _
                    ByVal _Distancia_carril___poste As Global.System.Nullable(Of Double),  _
                    ByVal _Distancia_base_poste___PMR As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_eléct_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_eléct_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Long_zona_común_máx As Global.System.Nullable(Of Double),  _
                    ByVal Long_zona_común_mín As Global.System.Nullable(Of Double),  _
                    ByVal Long_Zona_Neutra As Global.System.Nullable(Of Double),  _
                    ByVal Hilo_de_Contacto As String,  _
                    ByVal Sustentador As String,  _
                    ByVal C_de_Protección_Aérea As String,  _
                    ByVal Cable_de_Tierra As String,  _
                    ByVal _Feeder__ As String,  _
                    ByVal _Feeder__1 As String,  _
                    ByVal Punto_fijo As String,  _
                    ByVal Péndola As String,  _
                    ByVal Anclaje As String,  _
                    ByVal _Posición_Feeder__ As String,  _
                    ByVal _Posición_Feeder__1 As String,  _
                    ByVal Núm_HC As Global.System.Nullable(Of Integer),  _
                    ByVal Núm_CdPA As Global.System.Nullable(Of Integer),  _
                    ByVal _Núm_Feeder__ As Global.System.Nullable(Of Integer),  _
                    ByVal _Núm_Feeder__1 As Global.System.Nullable(Of Integer),  _
                    ByVal Tensión_HC As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_sustentador As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_CdPA As Global.System.Nullable(Of Double),  _
                    ByVal _Tensión_Feeder__ As Global.System.Nullable(Of Double),  _
                    ByVal _Tensión_Feeder__1 As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_punto_fijo As Global.System.Nullable(Of Double),  _
                    ByVal Tipo As String,  _
                    ByVal _Adm_Línea As String,  _
                    ByVal Código As String,  _
                    ByVal Numeración As String,  _
                    ByVal Tipo_macizo As String,  _
                    ByVal _Adm_Línea_postes As String,  _
                    ByVal Tubo_de_ménsula As String,  _
                    ByVal Tubo_tirante As String,  _
                    ByVal Cola_de_anclaje As String,  _
                    ByVal _Aislador_Feeder__ As String,  _
                    ByVal _Aislador_Feeder__1 As String,  _
                    ByVal Distancia_apoyo_y_1ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_1ª_y_2ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_entre_péndolas As Global.System.Nullable(Of Double),  _
                    ByVal Original_Nombre_catenaria As String,  _
                    ByVal Original_Sistema As String,  _
                    ByVal Original_Altura_nominal As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_mínima As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_máxima As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_catenaria As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_entre_vanos As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_del_cantón As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máximo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_túnel As Global.System.Nullable(Of Double),  _
                    ByVal Original_Incr_normalizado_de_vano As Global.System.Nullable(Of Double),  _
                    ByVal Original_Incr_máx_altura_HC As Global.System.Nullable(Of Double),  _
                    ByVal Original_Núm_mín__vanos_en_sec_mec As Global.System.Nullable(Of Double),  _
                    ByVal Original_Núm_mín_vanos_en_sec_eléct As Global.System.Nullable(Of Double),  _
                    ByVal Original_Ancho_vía As Global.System.Nullable(Of Double),  _
                    ByVal Original_Descentramiento_máx_recta As Global.System.Nullable(Of Double),  _
                    ByVal Original_Descentramiento_máx_curva As Global.System.Nullable(Of Double),  _
                    ByVal Original_Radio_considerable_como_recta As Global.System.Nullable(Of Double),  _
                    ByVal Original_Zona_trabajo_pantógrafo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Elevación_máx_pantógrafo As String,  _
                    ByVal Original_Velocidad_viento As Global.System.Nullable(Of Double),  _
                    ByVal Original_Flecha_máx_centro_vano As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Distancia_carril___poste As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Distancia_base_poste___PMR As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_eléct_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_eléct_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_zona_común_máx As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_zona_común_mín As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_Zona_Neutra As Global.System.Nullable(Of Double),  _
                    ByVal Original_Hilo_de_Contacto As String,  _
                    ByVal Original_Sustentador As String,  _
                    ByVal Original_C_de_Protección_Aérea As String,  _
                    ByVal Original_Cable_de_Tierra As String,  _
                    ByVal _Original_Feeder__ As String,  _
                    ByVal _Original_Feeder__1 As String,  _
                    ByVal Original_Punto_fijo As String,  _
                    ByVal Original_Péndola As String,  _
                    ByVal Original_Anclaje As String,  _
                    ByVal _Original_Posición_Feeder__ As String,  _
                    ByVal _Original_Posición_Feeder__1 As String,  _
                    ByVal Original_Núm_HC As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Núm_CdPA As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_Núm_Feeder__ As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_Núm_Feeder__1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Tensión_HC As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_sustentador As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_CdPA As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Tensión_Feeder__ As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Tensión_Feeder__1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_punto_fijo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tipo As String,  _
                    ByVal _Original_Adm_Línea As String,  _
                    ByVal Original_Código As String,  _
                    ByVal Original_Numeración As String,  _
                    ByVal Original_Tipo_macizo As String,  _
                    ByVal _Original_Adm_Línea_postes As String,  _
                    ByVal Original_Tubo_de_ménsula As String,  _
                    ByVal Original_Tubo_tirante As String,  _
                    ByVal Original_Cola_de_anclaje As String,  _
                    ByVal _Original_Aislador_Feeder__ As String,  _
                    ByVal _Original_Aislador_Feeder__1 As String,  _
                    ByVal Original_Distancia_apoyo_y_1ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_1ª_y_2ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_entre_péndolas As Global.System.Nullable(Of Double)) As Integer
            If (Nombre_catenaria Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Nombre_catenaria,String)
            End If
            If (Sistema Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Sistema,String)
            End If
            If (Altura_nominal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Altura_nominal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Altura_mínima.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Altura_mínima.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Altura_máxima.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Altura_máxima.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Altura_catenaria.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Altura_catenaria.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Distancia_máx_entre_vanos.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Distancia_máx_entre_vanos.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Distancia_máx_del_cantón.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Distancia_máx_del_cantón.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Vano_máximo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Vano_máximo.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Vano_máx_en_sec_mecánico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Vano_máx_en_sec_mecánico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Vano_máx_en_sec_eléctrico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Vano_máx_en_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Vano_máx_en_túnel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Vano_máx_en_túnel.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Incr_normalizado_de_vano.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Incr_normalizado_de_vano.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Incr_máx_altura_HC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Incr_máx_altura_HC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Núm_mín__vanos_en_sec_mec.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Núm_mín__vanos_en_sec_mec.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Núm_mín_vanos_en_sec_eléct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Núm_mín_vanos_en_sec_eléct.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Ancho_vía.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Ancho_vía.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Descentramiento_máx_recta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Descentramiento_máx_recta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Descentramiento_máx_curva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Descentramiento_máx_curva.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Radio_considerable_como_recta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Radio_considerable_como_recta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Zona_trabajo_pantógrafo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Zona_trabajo_pantógrafo.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Elevación_máx_pantógrafo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Elevación_máx_pantógrafo,String)
            End If
            If (Velocidad_viento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Velocidad_viento.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Flecha_máx_centro_vano.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Flecha_máx_centro_vano.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (_Distancia_carril___poste.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(_Distancia_carril___poste.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (_Distancia_base_poste___PMR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(_Distancia_base_poste___PMR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Distancia_eléct_sec_mecánico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Distancia_eléct_sec_mecánico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Distancia_eléct_sec_eléctrico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Distancia_eléct_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Long_zona_común_máx.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Long_zona_común_máx.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Long_zona_común_mín.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Long_zona_común_mín.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Long_Zona_Neutra.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Long_Zona_Neutra.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Hilo_de_Contacto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Hilo_de_Contacto,String)
            End If
            If (Sustentador Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Sustentador,String)
            End If
            If (C_de_Protección_Aérea Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(C_de_Protección_Aérea,String)
            End If
            If (Cable_de_Tierra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Cable_de_Tierra,String)
            End If
            If (_Feeder__ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(_Feeder__,String)
            End If
            If (_Feeder__1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(_Feeder__1,String)
            End If
            If (Punto_fijo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Punto_fijo,String)
            End If
            If (Péndola Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Péndola,String)
            End If
            If (Anclaje Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Anclaje,String)
            End If
            If (_Posición_Feeder__ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(_Posición_Feeder__,String)
            End If
            If (_Posición_Feeder__1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(_Posición_Feeder__1,String)
            End If
            If (Núm_HC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Núm_HC.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Núm_CdPA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Núm_CdPA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (_Núm_Feeder__.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(_Núm_Feeder__.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (_Núm_Feeder__1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(_Núm_Feeder__1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Tensión_HC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Tensión_HC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Tensión_sustentador.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Tensión_sustentador.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Tensión_CdPA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Tensión_CdPA.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (_Tensión_Feeder__.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(_Tensión_Feeder__.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (_Tensión_Feeder__1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(_Tensión_Feeder__1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Tensión_punto_fijo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Tensión_punto_fijo.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Tipo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Tipo,String)
            End If
            If (_Adm_Línea Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(_Adm_Línea,String)
            End If
            If (Código Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Código,String)
            End If
            If (Numeración Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Numeración,String)
            End If
            If (Tipo_macizo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Tipo_macizo,String)
            End If
            If (_Adm_Línea_postes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(_Adm_Línea_postes,String)
            End If
            If (Tubo_de_ménsula Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Tubo_de_ménsula,String)
            End If
            If (Tubo_tirante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Tubo_tirante,String)
            End If
            If (Cola_de_anclaje Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Cola_de_anclaje,String)
            End If
            If (_Aislador_Feeder__ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(_Aislador_Feeder__,String)
            End If
            If (_Aislador_Feeder__1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(_Aislador_Feeder__1,String)
            End If
            If (Distancia_apoyo_y_1ª_péndola.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Distancia_apoyo_y_1ª_péndola.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Distancia_1ª_y_2ª_péndola.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Distancia_1ª_y_2ª_péndola.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Distancia_máx_entre_péndolas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Distancia_máx_entre_péndolas.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_Nombre_catenaria Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_Nombre_catenaria,String)
            End If
            If (Original_Sistema Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_Sistema,String)
            End If
            If (Original_Altura_nominal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_Altura_nominal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_Altura_mínima.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_Altura_mínima.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_Altura_máxima.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_Altura_máxima.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_Altura_catenaria.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Altura_catenaria.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_máx_entre_vanos.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Distancia_máx_entre_vanos.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_máx_del_cantón.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_Distancia_máx_del_cantón.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máximo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_Vano_máximo.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máx_en_sec_mecánico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_Vano_máx_en_sec_mecánico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máx_en_sec_eléctrico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_Vano_máx_en_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_Vano_máx_en_túnel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Vano_máx_en_túnel.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_Incr_normalizado_de_vano.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_Incr_normalizado_de_vano.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_Incr_máx_altura_HC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_Incr_máx_altura_HC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_Núm_mín__vanos_en_sec_mec.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_Núm_mín__vanos_en_sec_mec.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_Núm_mín_vanos_en_sec_eléct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_Núm_mín_vanos_en_sec_eléct.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_Ancho_vía.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_Ancho_vía.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_Descentramiento_máx_recta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_Descentramiento_máx_recta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_Descentramiento_máx_curva.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_Descentramiento_máx_curva.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_Radio_considerable_como_recta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_Radio_considerable_como_recta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_Zona_trabajo_pantógrafo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_Zona_trabajo_pantógrafo.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            If (Original_Elevación_máx_pantógrafo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_Elevación_máx_pantógrafo,String)
            End If
            If (Original_Velocidad_viento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_Velocidad_viento.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_Flecha_máx_centro_vano.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_Flecha_máx_centro_vano.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (_Original_Distancia_carril___poste.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(_Original_Distancia_carril___poste.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (_Original_Distancia_base_poste___PMR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(_Original_Distancia_base_poste___PMR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_eléct_sec_mecánico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_Distancia_eléct_sec_mecánico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_eléct_sec_eléctrico.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_Distancia_eléct_sec_eléctrico.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_Long_zona_común_máx.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_Long_zona_común_máx.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_Long_zona_común_mín.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_Long_zona_común_mín.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (Original_Long_Zona_Neutra.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(Original_Long_Zona_Neutra.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_Hilo_de_Contacto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(Original_Hilo_de_Contacto,String)
            End If
            If (Original_Sustentador Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_Sustentador,String)
            End If
            If (Original_C_de_Protección_Aérea Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(Original_C_de_Protección_Aérea,String)
            End If
            If (Original_Cable_de_Tierra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(Original_Cable_de_Tierra,String)
            End If
            If (_Original_Feeder__ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(_Original_Feeder__,String)
            End If
            If (_Original_Feeder__1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(_Original_Feeder__1,String)
            End If
            If (Original_Punto_fijo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(Original_Punto_fijo,String)
            End If
            If (Original_Péndola Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(Original_Péndola,String)
            End If
            If (Original_Anclaje Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(Original_Anclaje,String)
            End If
            If (_Original_Posición_Feeder__ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(_Original_Posición_Feeder__,String)
            End If
            If (_Original_Posición_Feeder__1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(_Original_Posición_Feeder__1,String)
            End If
            If (Original_Núm_HC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(Original_Núm_HC.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = Global.System.DBNull.Value
            End If
            If (Original_Núm_CdPA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(Original_Núm_CdPA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = Global.System.DBNull.Value
            End If
            If (_Original_Núm_Feeder__.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(_Original_Núm_Feeder__.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = Global.System.DBNull.Value
            End If
            If (_Original_Núm_Feeder__1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(_Original_Núm_Feeder__1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_HC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(Original_Tensión_HC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_sustentador.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(Original_Tensión_sustentador.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_CdPA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(Original_Tensión_CdPA.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = Global.System.DBNull.Value
            End If
            If (_Original_Tensión_Feeder__.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(_Original_Tensión_Feeder__.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = Global.System.DBNull.Value
            End If
            If (_Original_Tensión_Feeder__1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(_Original_Tensión_Feeder__1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(166).Value = Global.System.DBNull.Value
            End If
            If (Original_Tensión_punto_fijo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(Original_Tensión_punto_fijo.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = Global.System.DBNull.Value
            End If
            If (Original_Tipo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(Original_Tipo,String)
            End If
            If (_Original_Adm_Línea Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(_Original_Adm_Línea,String)
            End If
            If (Original_Código Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(174).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(Original_Código,String)
            End If
            If (Original_Numeración Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(176).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(Original_Numeración,String)
            End If
            If (Original_Tipo_macizo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(178).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(Original_Tipo_macizo,String)
            End If
            If (_Original_Adm_Línea_postes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(180).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(_Original_Adm_Línea_postes,String)
            End If
            If (Original_Tubo_de_ménsula Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(182).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(Original_Tubo_de_ménsula,String)
            End If
            If (Original_Tubo_tirante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(184).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(Original_Tubo_tirante,String)
            End If
            If (Original_Cola_de_anclaje Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(186).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(Original_Cola_de_anclaje,String)
            End If
            If (_Original_Aislador_Feeder__ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(188).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(_Original_Aislador_Feeder__,String)
            End If
            If (_Original_Aislador_Feeder__1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(190).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(_Original_Aislador_Feeder__1,String)
            End If
            If (Original_Distancia_apoyo_y_1ª_péndola.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(Original_Distancia_apoyo_y_1ª_péndola.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(192).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_1ª_y_2ª_péndola.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(Original_Distancia_1ª_y_2ª_péndola.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(194).Value = Global.System.DBNull.Value
            End If
            If (Original_Distancia_máx_entre_péndolas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(Original_Distancia_máx_entre_péndolas.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(196).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Sistema As String,  _
                    ByVal Altura_nominal As Global.System.Nullable(Of Double),  _
                    ByVal Altura_mínima As Global.System.Nullable(Of Double),  _
                    ByVal Altura_máxima As Global.System.Nullable(Of Double),  _
                    ByVal Altura_catenaria As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_entre_vanos As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_del_cantón As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máximo As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Vano_máx_en_túnel As Global.System.Nullable(Of Double),  _
                    ByVal Incr_normalizado_de_vano As Global.System.Nullable(Of Double),  _
                    ByVal Incr_máx_altura_HC As Global.System.Nullable(Of Double),  _
                    ByVal Núm_mín__vanos_en_sec_mec As Global.System.Nullable(Of Double),  _
                    ByVal Núm_mín_vanos_en_sec_eléct As Global.System.Nullable(Of Double),  _
                    ByVal Ancho_vía As Global.System.Nullable(Of Double),  _
                    ByVal Descentramiento_máx_recta As Global.System.Nullable(Of Double),  _
                    ByVal Descentramiento_máx_curva As Global.System.Nullable(Of Double),  _
                    ByVal Radio_considerable_como_recta As Global.System.Nullable(Of Double),  _
                    ByVal Zona_trabajo_pantógrafo As Global.System.Nullable(Of Double),  _
                    ByVal Elevación_máx_pantógrafo As String,  _
                    ByVal Velocidad_viento As Global.System.Nullable(Of Double),  _
                    ByVal Flecha_máx_centro_vano As Global.System.Nullable(Of Double),  _
                    ByVal _Distancia_carril___poste As Global.System.Nullable(Of Double),  _
                    ByVal _Distancia_base_poste___PMR As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_eléct_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_eléct_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Long_zona_común_máx As Global.System.Nullable(Of Double),  _
                    ByVal Long_zona_común_mín As Global.System.Nullable(Of Double),  _
                    ByVal Long_Zona_Neutra As Global.System.Nullable(Of Double),  _
                    ByVal Hilo_de_Contacto As String,  _
                    ByVal Sustentador As String,  _
                    ByVal C_de_Protección_Aérea As String,  _
                    ByVal Cable_de_Tierra As String,  _
                    ByVal _Feeder__ As String,  _
                    ByVal _Feeder__1 As String,  _
                    ByVal Punto_fijo As String,  _
                    ByVal Péndola As String,  _
                    ByVal Anclaje As String,  _
                    ByVal _Posición_Feeder__ As String,  _
                    ByVal _Posición_Feeder__1 As String,  _
                    ByVal Núm_HC As Global.System.Nullable(Of Integer),  _
                    ByVal Núm_CdPA As Global.System.Nullable(Of Integer),  _
                    ByVal _Núm_Feeder__ As Global.System.Nullable(Of Integer),  _
                    ByVal _Núm_Feeder__1 As Global.System.Nullable(Of Integer),  _
                    ByVal Tensión_HC As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_sustentador As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_CdPA As Global.System.Nullable(Of Double),  _
                    ByVal _Tensión_Feeder__ As Global.System.Nullable(Of Double),  _
                    ByVal _Tensión_Feeder__1 As Global.System.Nullable(Of Double),  _
                    ByVal Tensión_punto_fijo As Global.System.Nullable(Of Double),  _
                    ByVal Tipo As String,  _
                    ByVal _Adm_Línea As String,  _
                    ByVal Código As String,  _
                    ByVal Numeración As String,  _
                    ByVal Tipo_macizo As String,  _
                    ByVal _Adm_Línea_postes As String,  _
                    ByVal Tubo_de_ménsula As String,  _
                    ByVal Tubo_tirante As String,  _
                    ByVal Cola_de_anclaje As String,  _
                    ByVal _Aislador_Feeder__ As String,  _
                    ByVal _Aislador_Feeder__1 As String,  _
                    ByVal Distancia_apoyo_y_1ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_1ª_y_2ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Distancia_máx_entre_péndolas As Global.System.Nullable(Of Double),  _
                    ByVal Original_Nombre_catenaria As String,  _
                    ByVal Original_Sistema As String,  _
                    ByVal Original_Altura_nominal As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_mínima As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_máxima As Global.System.Nullable(Of Double),  _
                    ByVal Original_Altura_catenaria As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_entre_vanos As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_del_cantón As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máximo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Vano_máx_en_túnel As Global.System.Nullable(Of Double),  _
                    ByVal Original_Incr_normalizado_de_vano As Global.System.Nullable(Of Double),  _
                    ByVal Original_Incr_máx_altura_HC As Global.System.Nullable(Of Double),  _
                    ByVal Original_Núm_mín__vanos_en_sec_mec As Global.System.Nullable(Of Double),  _
                    ByVal Original_Núm_mín_vanos_en_sec_eléct As Global.System.Nullable(Of Double),  _
                    ByVal Original_Ancho_vía As Global.System.Nullable(Of Double),  _
                    ByVal Original_Descentramiento_máx_recta As Global.System.Nullable(Of Double),  _
                    ByVal Original_Descentramiento_máx_curva As Global.System.Nullable(Of Double),  _
                    ByVal Original_Radio_considerable_como_recta As Global.System.Nullable(Of Double),  _
                    ByVal Original_Zona_trabajo_pantógrafo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Elevación_máx_pantógrafo As String,  _
                    ByVal Original_Velocidad_viento As Global.System.Nullable(Of Double),  _
                    ByVal Original_Flecha_máx_centro_vano As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Distancia_carril___poste As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Distancia_base_poste___PMR As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_eléct_sec_mecánico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_eléct_sec_eléctrico As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_zona_común_máx As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_zona_común_mín As Global.System.Nullable(Of Double),  _
                    ByVal Original_Long_Zona_Neutra As Global.System.Nullable(Of Double),  _
                    ByVal Original_Hilo_de_Contacto As String,  _
                    ByVal Original_Sustentador As String,  _
                    ByVal Original_C_de_Protección_Aérea As String,  _
                    ByVal Original_Cable_de_Tierra As String,  _
                    ByVal _Original_Feeder__ As String,  _
                    ByVal _Original_Feeder__1 As String,  _
                    ByVal Original_Punto_fijo As String,  _
                    ByVal Original_Péndola As String,  _
                    ByVal Original_Anclaje As String,  _
                    ByVal _Original_Posición_Feeder__ As String,  _
                    ByVal _Original_Posición_Feeder__1 As String,  _
                    ByVal Original_Núm_HC As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Núm_CdPA As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_Núm_Feeder__ As Global.System.Nullable(Of Integer),  _
                    ByVal _Original_Núm_Feeder__1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Tensión_HC As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_sustentador As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_CdPA As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Tensión_Feeder__ As Global.System.Nullable(Of Double),  _
                    ByVal _Original_Tensión_Feeder__1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tensión_punto_fijo As Global.System.Nullable(Of Double),  _
                    ByVal Original_Tipo As String,  _
                    ByVal _Original_Adm_Línea As String,  _
                    ByVal Original_Código As String,  _
                    ByVal Original_Numeración As String,  _
                    ByVal Original_Tipo_macizo As String,  _
                    ByVal _Original_Adm_Línea_postes As String,  _
                    ByVal Original_Tubo_de_ménsula As String,  _
                    ByVal Original_Tubo_tirante As String,  _
                    ByVal Original_Cola_de_anclaje As String,  _
                    ByVal _Original_Aislador_Feeder__ As String,  _
                    ByVal _Original_Aislador_Feeder__1 As String,  _
                    ByVal Original_Distancia_apoyo_y_1ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_1ª_y_2ª_péndola As Global.System.Nullable(Of Double),  _
                    ByVal Original_Distancia_máx_entre_péndolas As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_Nombre_catenaria, Sistema, Altura_nominal, Altura_mínima, Altura_máxima, Altura_catenaria, Distancia_máx_entre_vanos, Distancia_máx_del_cantón, Vano_máximo, Vano_máx_en_sec_mecánico, Vano_máx_en_sec_eléctrico, Vano_máx_en_túnel, Incr_normalizado_de_vano, Incr_máx_altura_HC, Núm_mín__vanos_en_sec_mec, Núm_mín_vanos_en_sec_eléct, Ancho_vía, Descentramiento_máx_recta, Descentramiento_máx_curva, Radio_considerable_como_recta, Zona_trabajo_pantógrafo, Elevación_máx_pantógrafo, Velocidad_viento, Flecha_máx_centro_vano, _Distancia_carril___poste, _Distancia_base_poste___PMR, Distancia_eléct_sec_mecánico, Distancia_eléct_sec_eléctrico, Long_zona_común_máx, Long_zona_común_mín, Long_Zona_Neutra, Hilo_de_Contacto, Sustentador, C_de_Protección_Aérea, Cable_de_Tierra, _Feeder__, _Feeder__1, Punto_fijo, Péndola, Anclaje, _Posición_Feeder__, _Posición_Feeder__1, Núm_HC, Núm_CdPA, _Núm_Feeder__, _Núm_Feeder__1, Tensión_HC, Tensión_sustentador, Tensión_CdPA, _Tensión_Feeder__, _Tensión_Feeder__1, Tensión_punto_fijo, Tipo, _Adm_Línea, Código, Numeración, Tipo_macizo, _Adm_Línea_postes, Tubo_de_ménsula, Tubo_tirante, Cola_de_anclaje, _Aislador_Feeder__, _Aislador_Feeder__1, Distancia_apoyo_y_1ª_péndola, Distancia_1ª_y_2ª_péndola, Distancia_máx_entre_péndolas, Original_Nombre_catenaria, Original_Sistema, Original_Altura_nominal, Original_Altura_mínima, Original_Altura_máxima, Original_Altura_catenaria, Original_Distancia_máx_entre_vanos, Original_Distancia_máx_del_cantón, Original_Vano_máximo, Original_Vano_máx_en_sec_mecánico, Original_Vano_máx_en_sec_eléctrico, Original_Vano_máx_en_túnel, Original_Incr_normalizado_de_vano, Original_Incr_máx_altura_HC, Original_Núm_mín__vanos_en_sec_mec, Original_Núm_mín_vanos_en_sec_eléct, Original_Ancho_vía, Original_Descentramiento_máx_recta, Original_Descentramiento_máx_curva, Original_Radio_considerable_como_recta, Original_Zona_trabajo_pantógrafo, Original_Elevación_máx_pantógrafo, Original_Velocidad_viento, Original_Flecha_máx_centro_vano, _Original_Distancia_carril___poste, _Original_Distancia_base_poste___PMR, Original_Distancia_eléct_sec_mecánico, Original_Distancia_eléct_sec_eléctrico, Original_Long_zona_común_máx, Original_Long_zona_común_mín, Original_Long_Zona_Neutra, Original_Hilo_de_Contacto, Original_Sustentador, Original_C_de_Protección_Aérea, Original_Cable_de_Tierra, _Original_Feeder__, _Original_Feeder__1, Original_Punto_fijo, Original_Péndola, Original_Anclaje, _Original_Posición_Feeder__, _Original_Posición_Feeder__1, Original_Núm_HC, Original_Núm_CdPA, _Original_Núm_Feeder__, _Original_Núm_Feeder__1, Original_Tensión_HC, Original_Tensión_sustentador, Original_Tensión_CdPA, _Original_Tensión_Feeder__, _Original_Tensión_Feeder__1, Original_Tensión_punto_fijo, Original_Tipo, _Original_Adm_Línea, Original_Código, Original_Numeración, Original_Tipo_macizo, _Original_Adm_Línea_postes, Original_Tubo_de_ménsula, Original_Tubo_tirante, Original_Cola_de_anclaje, _Original_Aislador_Feeder__, _Original_Aislador_Feeder__1, Original_Distancia_apoyo_y_1ª_péndola, Original_Distancia_1ª_y_2ª_péndola, Original_Distancia_máx_entre_péndolas)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ElectrificaciónTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Electrificación"
            tableMapping.ColumnMappings.Add("Alimentación", "Alimentación")
            tableMapping.ColumnMappings.Add("Sistema", "Sistema")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Electrificación` (`Alimentación`, `Sistema`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Alimentación", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Alimentación", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sistema", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sistema", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Alimentación, Sistema FROM Electrificación"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.ElectrificaciónDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.ElectrificaciónDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.ElectrificaciónDataTable = New Base_de_datosDataSet.ElectrificaciónDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.ElectrificaciónDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Electrificación")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Alimentación As String, ByVal Sistema As String) As Integer
            If (Alimentación Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Alimentación,String)
            End If
            If (Sistema Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Sistema,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MacizosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Macizos"
            tableMapping.ColumnMappings.Add("Macizo", "Macizo")
            tableMapping.ColumnMappings.Add("Adm/Lín", "Adm/Lín")
            tableMapping.ColumnMappings.Add("D/T", "D/T")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("d (m)", "d (m)")
            tableMapping.ColumnMappings.Add("h (m)", "h (m)")
            tableMapping.ColumnMappings.Add("Volúmen macizo 1 (m3)", "Volúmen macizo 1 (m3)")
            tableMapping.ColumnMappings.Add("at (m)", "at (m)")
            tableMapping.ColumnMappings.Add("bt (m)", "bt (m)")
            tableMapping.ColumnMappings.Add("ht (m)", "ht (m)")
            tableMapping.ColumnMappings.Add("Volúmen macizo 2 (m3)", "Volúmen macizo 2 (m3)")
            tableMapping.ColumnMappings.Add("Volúmen TOTAL (m3)", "Volúmen TOTAL (m3)")
            tableMapping.ColumnMappings.Add("diámetro (m)", "diámetro (m)")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Macizos` (`Macizo`, `Adm/Lín`, `D/T`, `Tipo`, `a (m)`, `b (m)`, `d ("& _ 
                "m)`, `h (m)`, `Volúmen macizo 1 (m3)`, `at (m)`, `bt (m)`, `ht (m)`, `Volúmen ma"& _ 
                "cizo 2 (m3)`, `Volúmen TOTAL (m3)`, `diámetro (m)`) VALUES (?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Macizo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Macizo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Lín", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Lín", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("D/T", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "D/T", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("a_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("b_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("d_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "d (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("h_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "h (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Volúmen_macizo_1_(m3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Volúmen macizo 1 (m3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("at_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "at (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("bt_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bt (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ht_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ht (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Volúmen_macizo_2_(m3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Volúmen macizo 2 (m3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Volúmen_TOTAL_(m3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Volúmen TOTAL (m3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("diámetro_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "diámetro (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Macizo, [Adm/Lín], [D/T], Tipo, [a (m)], [b (m)], [d (m)], [h (m)], [Volúm"& _ 
                "en macizo 1 (m3)], [at (m)], [bt (m)], [ht (m)], [Volúmen macizo 2 (m3)], [Volúm"& _ 
                "en TOTAL (m3)], [diámetro (m)] FROM Macizos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.MacizosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.MacizosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.MacizosDataTable = New Base_de_datosDataSet.MacizosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.MacizosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Macizos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Macizo As String, ByVal _Adm_Lín As String, ByVal _D_T As String, ByVal Tipo As String, ByVal _a__m_ As Global.System.Nullable(Of Double), ByVal _b__m_ As Global.System.Nullable(Of Double), ByVal _d__m_ As Global.System.Nullable(Of Double), ByVal _h__m_ As Global.System.Nullable(Of Double), ByVal _Volúmen_macizo_1__m3_ As Global.System.Nullable(Of Double), ByVal _at__m_ As Global.System.Nullable(Of Double), ByVal _bt__m_ As Global.System.Nullable(Of Double), ByVal _ht__m_ As Global.System.Nullable(Of Double), ByVal _Volúmen_macizo_2__m3_ As Global.System.Nullable(Of Double), ByVal _Volúmen_TOTAL__m3_ As Global.System.Nullable(Of Double), ByVal _diámetro__m_ As Global.System.Nullable(Of Double)) As Integer
            If (Macizo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Macizo,String)
            End If
            If (_Adm_Lín Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Adm_Lín,String)
            End If
            If (_D_T Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_D_T,String)
            End If
            If (Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Tipo,String)
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_d__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_d__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_h__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_h__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_Volúmen_macizo_1__m3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_Volúmen_macizo_1__m3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_at__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_at__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_bt__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_bt__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_ht__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(_ht__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_Volúmen_macizo_2__m3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Volúmen_macizo_2__m3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_Volúmen_TOTAL__m3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_Volúmen_TOTAL__m3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_diámetro__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_diámetro__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PostesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Postes"
            tableMapping.ColumnMappings.Add("Poste", "Poste")
            tableMapping.ColumnMappings.Add("Adm/Lín", "Adm/Lín")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("t (m)", "t (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("s (m)", "s (m)")
            tableMapping.ColumnMappings.Add("Peso", "Peso")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("Htot (m)", "Htot (m)")
            tableMapping.ColumnMappings.Add("H (m)", "H (m)")
            tableMapping.ColumnMappings.Add("tg", "tg")
            tableMapping.ColumnMappings.Add("K", "K")
            tableMapping.ColumnMappings.Add("Sep (m)", "Sep (m)")
            tableMapping.ColumnMappings.Add("Wyy (cm3)", "Wyy (cm3)")
            tableMapping.ColumnMappings.Add("Wxx (cm3)", "Wxx (cm3)")
            tableMapping.ColumnMappings.Add("Wr", "Wr")
            tableMapping.ColumnMappings.Add("M", "M")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Postes` (`Poste`, `Adm/Lín`, `Tipo`, `t (m)`, `b (m)`, `s (m)`, `Pes"& _ 
                "o`, `a (m)`, `Htot (m)`, `H (m)`, `tg`, `K`, `Sep (m)`, `Wyy (cm3)`, `Wxx (cm3)`"& _ 
                ", `Wr`, `M`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Poste", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Poste", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Adm/Lín", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Adm/Lín", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("t_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("b_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("s_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "s (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Peso", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Peso", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("a_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Htot_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Htot (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("H_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "H (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tg", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tg", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("K", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "K", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Sep_(m)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Sep (m)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Wyy_(cm3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Wyy (cm3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Wxx_(cm3)", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Wxx (cm3)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Wr", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Wr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("M", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "M", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Poste, [Adm/Lín], Tipo, [t (m)], [b (m)], [s (m)], Peso, [a (m)], [Htot (m"& _ 
                ")], [H (m)], tg, K, [Sep (m)], [Wyy (cm3)], [Wxx (cm3)], Wr, M FROM Postes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.PostesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.PostesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.PostesDataTable = New Base_de_datosDataSet.PostesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base_de_datosDataSet.PostesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base_de_datosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Postes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Poste As String,  _
                    ByVal _Adm_Lín As String,  _
                    ByVal Tipo As String,  _
                    ByVal _t__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _b__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _s__m_ As Global.System.Nullable(Of Double),  _
                    ByVal Peso As Global.System.Nullable(Of Double),  _
                    ByVal _a__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _Htot__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _H__m_ As Global.System.Nullable(Of Double),  _
                    ByVal tg As Global.System.Nullable(Of Double),  _
                    ByVal K As Global.System.Nullable(Of Double),  _
                    ByVal _Sep__m_ As Global.System.Nullable(Of Double),  _
                    ByVal _Wyy__cm3_ As Global.System.Nullable(Of Double),  _
                    ByVal _Wxx__cm3_ As Global.System.Nullable(Of Double),  _
                    ByVal Wr As Global.System.Nullable(Of Double),  _
                    ByVal M As Global.System.Nullable(Of Double)) As Integer
            If (Poste Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Poste,String)
            End If
            If (_Adm_Lín Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Adm_Lín,String)
            End If
            If (Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Tipo,String)
            End If
            If (_t__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_t__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_s__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_s__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Peso.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Peso.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_Htot__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_Htot__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_H__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_H__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (tg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(tg.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (K.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(K.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_Sep__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Sep__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_Wyy__cm3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_Wyy__cm3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_Wxx__cm3_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_Wxx__cm3_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Wr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Wr.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (M.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(M.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_AnclajeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor Anclaje"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor Anclaje]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_AnclajeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_AnclajeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_AnclajeDataTable = New Base_de_datosDataSet.Conductor_AnclajeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_Cable_de_TierraTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor Cable de Tierra"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor Cable de Tierra]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_Cable_de_TierraDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_Cable_de_TierraDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_Cable_de_TierraDataTable = New Base_de_datosDataSet.Conductor_Cable_de_TierraDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_CDPATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor CDPA"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor CDPA]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_CDPADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_CDPADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_CDPADataTable = New Base_de_datosDataSet.Conductor_CDPADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_Feeder__TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor Feeder -"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor Feeder -]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet._Conductor_Feeder__DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet._Conductor_Feeder__DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet._Conductor_Feeder__DataTable = New Base_de_datosDataSet._Conductor_Feeder__DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_Feeder__TableAdapter1
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor Feeder +"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor Feeder +]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.__Conductor_Feeder__DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.__Conductor_Feeder__DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.__Conductor_Feeder__DataTable = New Base_de_datosDataSet.__Conductor_Feeder__DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_HCTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor HC"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor HC]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_HCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_HCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_HCDataTable = New Base_de_datosDataSet.Conductor_HCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_PendolaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor Pendola"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor Pendola]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_PendolaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_PendolaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_PendolaDataTable = New Base_de_datosDataSet.Conductor_PendolaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_punto_fijoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor punto fijo"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor punto fijo]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_punto_fijoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_punto_fijoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_punto_fijoDataTable = New Base_de_datosDataSet.Conductor_punto_fijoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Conductor_SustentadorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Conductor Sustentador"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Material", "Material")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Tipo, Material FROM [Conductor Sustentador]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Conductor_SustentadorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Conductor_SustentadorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Conductor_SustentadorDataTable = New Base_de_datosDataSet.Conductor_SustentadorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Electrificación_ConsultaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Electrificación Consulta"
            tableMapping.ColumnMappings.Add("Sistema", "Sistema")
            tableMapping.ColumnMappings.Add("Alimentación", "Alimentación")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Sistema, Alimentación FROM [Electrificación Consulta]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Electrificación_ConsultaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Electrificación_ConsultaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Electrificación_ConsultaDataTable = New Base_de_datosDataSet.Electrificación_ConsultaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Macizos_ConsultaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Macizos Consulta"
            tableMapping.ColumnMappings.Add("Macizo", "Macizo")
            tableMapping.ColumnMappings.Add("Adm/Lín", "Adm/Lín")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Macizo, [Adm/Lín] FROM [Macizos Consulta]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Macizos_ConsultaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Macizos_ConsultaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Macizos_ConsultaDataTable = New Base_de_datosDataSet.Macizos_ConsultaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Postes_ConsultaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Postes Consulta"
            tableMapping.ColumnMappings.Add("Adm/Lín", "Adm/Lín")
            tableMapping.ColumnMappings.Add("Poste", "Poste")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SiReCa.My.MySettings.Default.Base_de_datos
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Adm/Lín], Poste FROM [Postes Consulta]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base_de_datosDataSet.Postes_ConsultaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base_de_datosDataSet.Postes_ConsultaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base_de_datosDataSet.Postes_ConsultaDataTable = New Base_de_datosDataSet.Postes_ConsultaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _conductores_y_cablesTableAdapter As Conductores_y_cablesTableAdapter
        
        Private _datosTableAdapter As DatosTableAdapter
        
        Private _electrificaciónTableAdapter As ElectrificaciónTableAdapter
        
        Private _macizosTableAdapter As MacizosTableAdapter
        
        Private _postesTableAdapter As PostesTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Conductores_y_cablesTableAdapter() As Conductores_y_cablesTableAdapter
            Get
                Return Me._conductores_y_cablesTableAdapter
            End Get
            Set
                Me._conductores_y_cablesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DatosTableAdapter() As DatosTableAdapter
            Get
                Return Me._datosTableAdapter
            End Get
            Set
                Me._datosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ElectrificaciónTableAdapter() As ElectrificaciónTableAdapter
            Get
                Return Me._electrificaciónTableAdapter
            End Get
            Set
                Me._electrificaciónTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MacizosTableAdapter() As MacizosTableAdapter
            Get
                Return Me._macizosTableAdapter
            End Get
            Set
                Me._macizosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PostesTableAdapter() As PostesTableAdapter
            Get
                Return Me._postesTableAdapter
            End Get
            Set
                Me._postesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._conductores_y_cablesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._conductores_y_cablesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._conductores_y_cablesTableAdapter.Connection
                End If
                If ((Not (Me._datosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._datosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._datosTableAdapter.Connection
                End If
                If ((Not (Me._electrificaciónTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._electrificaciónTableAdapter.Connection) Is Nothing)) Then
                    Return Me._electrificaciónTableAdapter.Connection
                End If
                If ((Not (Me._macizosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._macizosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._macizosTableAdapter.Connection
                End If
                If ((Not (Me._postesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._postesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._postesTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._datosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._electrificaciónTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._macizosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._postesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Base_de_datosDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._electrificaciónTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Electrificación.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._electrificaciónTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._macizosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Macizos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._macizosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Conductores_y_cables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._conductores_y_cablesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._datosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Datos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._datosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._postesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Postes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._postesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Base_de_datosDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._electrificaciónTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Electrificación.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._electrificaciónTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._macizosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Macizos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._macizosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Conductores_y_cables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._conductores_y_cablesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._datosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Datos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._datosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._postesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Postes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._postesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Base_de_datosDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._postesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Postes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._postesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._datosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Datos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._datosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Conductores_y_cables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._conductores_y_cablesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._macizosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Macizos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._macizosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._electrificaciónTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Electrificación.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._electrificaciónTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Base_de_datosDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._conductores_y_cablesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._conductores_y_cablesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._datosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._datosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._electrificaciónTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._electrificaciónTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._macizosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._macizosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._postesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._postesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._conductores_y_cablesTableAdapter, Me._conductores_y_cablesTableAdapter.Connection)
                    Me._conductores_y_cablesTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._conductores_y_cablesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._conductores_y_cablesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._conductores_y_cablesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._conductores_y_cablesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._datosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._datosTableAdapter, Me._datosTableAdapter.Connection)
                    Me._datosTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._datosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._datosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._datosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._datosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._electrificaciónTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._electrificaciónTableAdapter, Me._electrificaciónTableAdapter.Connection)
                    Me._electrificaciónTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._electrificaciónTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._electrificaciónTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._electrificaciónTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._electrificaciónTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._macizosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._macizosTableAdapter, Me._macizosTableAdapter.Connection)
                    Me._macizosTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._macizosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._macizosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._macizosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._macizosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._postesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._postesTableAdapter, Me._postesTableAdapter.Connection)
                    Me._postesTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._postesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._postesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._postesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._postesTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._conductores_y_cablesTableAdapter) Is Nothing) Then
                    Me._conductores_y_cablesTableAdapter.Connection = CType(revertConnections(Me._conductores_y_cablesTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._conductores_y_cablesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._datosTableAdapter) Is Nothing) Then
                    Me._datosTableAdapter.Connection = CType(revertConnections(Me._datosTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._datosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._electrificaciónTableAdapter) Is Nothing) Then
                    Me._electrificaciónTableAdapter.Connection = CType(revertConnections(Me._electrificaciónTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._electrificaciónTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._macizosTableAdapter) Is Nothing) Then
                    Me._macizosTableAdapter.Connection = CType(revertConnections(Me._macizosTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._macizosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._postesTableAdapter) Is Nothing) Then
                    Me._postesTableAdapter.Connection = CType(revertConnections(Me._postesTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._postesTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
